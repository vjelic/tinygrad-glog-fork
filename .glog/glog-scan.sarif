{
  "version": "2.1.0",
  "runs": [
    {
      "tool": {
        "driver": {
          "name": "Glog.AI",
          "organization": "Glog.AI",
          "fullName": "Glog, Making software more secure",
          "version": "1.0.0",
          "semanticVersion": "1.0.0",
          "informationUri": "https://www.glog.ai",
          "rules": [
            {
              "id": "74a9a005-5371-361b-b8ee-b6332f0f5440",
              "name": "resources.rules.dangerous-system-call",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.dangerous-system-call"
              },
              "fullDescription": {
                "text": "Found dynamic content used in a system call. This is dangerous if external data can reach this function call because it allows a malicious actor to execute commands. Use the 'subprocess' module instead, which is easier to use without accidentally exposing a command injection vulnerability."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "help": {
                "text": "Found dynamic content used in a system call. This is dangerous if external data can reach this function call because it allows a malicious actor to execute commands. Use the 'subprocess' module instead, which is easier to use without accidentally exposing a command injection vulnerability.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Found dynamic content used in a system call. This is dangerous if external data can reach this function call because it allows a malicious actor to execute commands. Use the 'subprocess' module instead, which is easier to use without accidentally exposing a command injection vulnerability.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.dangerous-system-call"
                ]
              }
            },
            {
              "id": "4364ff3c-2dbc-3880-b160-ecc7b3ab6116",
              "name": "resources.rules.raptor-memory-address-exposure",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.raptor-memory-address-exposure"
              },
              "fullDescription": {
                "text": "The software generates an error message that includes sensitive information about its environment, users, or associated data. In particular, exposure of memory addresses might defeat ASLR."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "note"
              },
              "help": {
                "text": "The software generates an error message that includes sensitive information about its environment, users, or associated data. In particular, exposure of memory addresses might defeat ASLR.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "The software generates an error message that includes sensitive information about its environment, users, or associated data. In particular, exposure of memory addresses might defeat ASLR.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [https://cwe.mitre.org/data/definitions/200](https://cwe.mitre.org/data/definitions/200)\n - [https://cwe.mitre.org/data/definitions/209](https://cwe.mitre.org/data/definitions/209)\n - [https://cwe.mitre.org/data/definitions/497](https://cwe.mitre.org/data/definitions/497)\n - [https://github.com/struct/mms](https://github.com/struct/mms)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.raptor-memory-address-exposure"
                ]
              }
            },
            {
              "id": "4602bdc3-ff8d-314d-8d29-17584e7e3aa1",
              "name": "resources.rules.raptor-memory-address-exposure",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.raptor-memory-address-exposure"
              },
              "fullDescription": {
                "text": "The software generates an error message that includes sensitive information about its environment, users, or associated data. In particular, exposure of memory addresses might defeat ASLR."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "note"
              },
              "help": {
                "text": "The software generates an error message that includes sensitive information about its environment, users, or associated data. In particular, exposure of memory addresses might defeat ASLR.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "The software generates an error message that includes sensitive information about its environment, users, or associated data. In particular, exposure of memory addresses might defeat ASLR.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [https://cwe.mitre.org/data/definitions/200](https://cwe.mitre.org/data/definitions/200)\n - [https://cwe.mitre.org/data/definitions/209](https://cwe.mitre.org/data/definitions/209)\n - [https://cwe.mitre.org/data/definitions/497](https://cwe.mitre.org/data/definitions/497)\n - [https://github.com/struct/mms](https://github.com/struct/mms)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.raptor-memory-address-exposure"
                ]
              }
            },
            {
              "id": "def12a7c-1ee6-391f-aafb-14835c143bba",
              "name": "resources.rules.raptor-memory-address-exposure",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.raptor-memory-address-exposure"
              },
              "fullDescription": {
                "text": "The software generates an error message that includes sensitive information about its environment, users, or associated data. In particular, exposure of memory addresses might defeat ASLR."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "note"
              },
              "help": {
                "text": "The software generates an error message that includes sensitive information about its environment, users, or associated data. In particular, exposure of memory addresses might defeat ASLR.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "The software generates an error message that includes sensitive information about its environment, users, or associated data. In particular, exposure of memory addresses might defeat ASLR.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [https://cwe.mitre.org/data/definitions/200](https://cwe.mitre.org/data/definitions/200)\n - [https://cwe.mitre.org/data/definitions/209](https://cwe.mitre.org/data/definitions/209)\n - [https://cwe.mitre.org/data/definitions/497](https://cwe.mitre.org/data/definitions/497)\n - [https://github.com/struct/mms](https://github.com/struct/mms)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.raptor-memory-address-exposure"
                ]
              }
            },
            {
              "id": "ec9842eb-3e96-3e49-b0a3-51c88299a5ef",
              "name": "resources.rules.raptor-memory-address-exposure",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.raptor-memory-address-exposure"
              },
              "fullDescription": {
                "text": "The software generates an error message that includes sensitive information about its environment, users, or associated data. In particular, exposure of memory addresses might defeat ASLR."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "note"
              },
              "help": {
                "text": "The software generates an error message that includes sensitive information about its environment, users, or associated data. In particular, exposure of memory addresses might defeat ASLR.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "The software generates an error message that includes sensitive information about its environment, users, or associated data. In particular, exposure of memory addresses might defeat ASLR.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [https://cwe.mitre.org/data/definitions/200](https://cwe.mitre.org/data/definitions/200)\n - [https://cwe.mitre.org/data/definitions/209](https://cwe.mitre.org/data/definitions/209)\n - [https://cwe.mitre.org/data/definitions/497](https://cwe.mitre.org/data/definitions/497)\n - [https://github.com/struct/mms](https://github.com/struct/mms)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.raptor-memory-address-exposure"
                ]
              }
            },
            {
              "id": "f21a41ac-a1bc-3e39-873e-107e8f9a6448",
              "name": "resources.rules.raptor-memory-address-exposure",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.raptor-memory-address-exposure"
              },
              "fullDescription": {
                "text": "The software generates an error message that includes sensitive information about its environment, users, or associated data. In particular, exposure of memory addresses might defeat ASLR."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "note"
              },
              "help": {
                "text": "The software generates an error message that includes sensitive information about its environment, users, or associated data. In particular, exposure of memory addresses might defeat ASLR.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "The software generates an error message that includes sensitive information about its environment, users, or associated data. In particular, exposure of memory addresses might defeat ASLR.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [https://cwe.mitre.org/data/definitions/200](https://cwe.mitre.org/data/definitions/200)\n - [https://cwe.mitre.org/data/definitions/209](https://cwe.mitre.org/data/definitions/209)\n - [https://cwe.mitre.org/data/definitions/497](https://cwe.mitre.org/data/definitions/497)\n - [https://github.com/struct/mms](https://github.com/struct/mms)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.raptor-memory-address-exposure"
                ]
              }
            },
            {
              "id": "e839c464-5912-3275-90f3-2923315a821b",
              "name": "resources.rules.raptor-memory-address-exposure",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.raptor-memory-address-exposure"
              },
              "fullDescription": {
                "text": "The software generates an error message that includes sensitive information about its environment, users, or associated data. In particular, exposure of memory addresses might defeat ASLR."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "note"
              },
              "help": {
                "text": "The software generates an error message that includes sensitive information about its environment, users, or associated data. In particular, exposure of memory addresses might defeat ASLR.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "The software generates an error message that includes sensitive information about its environment, users, or associated data. In particular, exposure of memory addresses might defeat ASLR.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [https://cwe.mitre.org/data/definitions/200](https://cwe.mitre.org/data/definitions/200)\n - [https://cwe.mitre.org/data/definitions/209](https://cwe.mitre.org/data/definitions/209)\n - [https://cwe.mitre.org/data/definitions/497](https://cwe.mitre.org/data/definitions/497)\n - [https://github.com/struct/mms](https://github.com/struct/mms)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.raptor-memory-address-exposure"
                ]
              }
            },
            {
              "id": "a6f78e54-fd34-339c-92c6-10c68d87e979",
              "name": "resources.rules.raptor-memory-address-exposure",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.raptor-memory-address-exposure"
              },
              "fullDescription": {
                "text": "The software generates an error message that includes sensitive information about its environment, users, or associated data. In particular, exposure of memory addresses might defeat ASLR."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "note"
              },
              "help": {
                "text": "The software generates an error message that includes sensitive information about its environment, users, or associated data. In particular, exposure of memory addresses might defeat ASLR.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "The software generates an error message that includes sensitive information about its environment, users, or associated data. In particular, exposure of memory addresses might defeat ASLR.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [https://cwe.mitre.org/data/definitions/200](https://cwe.mitre.org/data/definitions/200)\n - [https://cwe.mitre.org/data/definitions/209](https://cwe.mitre.org/data/definitions/209)\n - [https://cwe.mitre.org/data/definitions/497](https://cwe.mitre.org/data/definitions/497)\n - [https://github.com/struct/mms](https://github.com/struct/mms)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.raptor-memory-address-exposure"
                ]
              }
            },
            {
              "id": "b04e13a4-d243-3ff8-9e7f-7811e6cdae80",
              "name": "resources.rules.raptor-memory-address-exposure",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.raptor-memory-address-exposure"
              },
              "fullDescription": {
                "text": "The software generates an error message that includes sensitive information about its environment, users, or associated data. In particular, exposure of memory addresses might defeat ASLR."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "note"
              },
              "help": {
                "text": "The software generates an error message that includes sensitive information about its environment, users, or associated data. In particular, exposure of memory addresses might defeat ASLR.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "The software generates an error message that includes sensitive information about its environment, users, or associated data. In particular, exposure of memory addresses might defeat ASLR.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [https://cwe.mitre.org/data/definitions/200](https://cwe.mitre.org/data/definitions/200)\n - [https://cwe.mitre.org/data/definitions/209](https://cwe.mitre.org/data/definitions/209)\n - [https://cwe.mitre.org/data/definitions/497](https://cwe.mitre.org/data/definitions/497)\n - [https://github.com/struct/mms](https://github.com/struct/mms)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.raptor-memory-address-exposure"
                ]
              }
            },
            {
              "id": "916d78a5-24e4-3087-b21a-7ff1f0062e63",
              "name": "resources.rules.raptor-memory-address-exposure",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.raptor-memory-address-exposure"
              },
              "fullDescription": {
                "text": "The software generates an error message that includes sensitive information about its environment, users, or associated data. In particular, exposure of memory addresses might defeat ASLR."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "note"
              },
              "help": {
                "text": "The software generates an error message that includes sensitive information about its environment, users, or associated data. In particular, exposure of memory addresses might defeat ASLR.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "The software generates an error message that includes sensitive information about its environment, users, or associated data. In particular, exposure of memory addresses might defeat ASLR.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [https://cwe.mitre.org/data/definitions/200](https://cwe.mitre.org/data/definitions/200)\n - [https://cwe.mitre.org/data/definitions/209](https://cwe.mitre.org/data/definitions/209)\n - [https://cwe.mitre.org/data/definitions/497](https://cwe.mitre.org/data/definitions/497)\n - [https://github.com/struct/mms](https://github.com/struct/mms)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.raptor-memory-address-exposure"
                ]
              }
            },
            {
              "id": "f518c57e-069c-3c1a-8302-e6de6f411919",
              "name": "resources.rules.raptor-memory-address-exposure",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.raptor-memory-address-exposure"
              },
              "fullDescription": {
                "text": "The software generates an error message that includes sensitive information about its environment, users, or associated data. In particular, exposure of memory addresses might defeat ASLR."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "note"
              },
              "help": {
                "text": "The software generates an error message that includes sensitive information about its environment, users, or associated data. In particular, exposure of memory addresses might defeat ASLR.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "The software generates an error message that includes sensitive information about its environment, users, or associated data. In particular, exposure of memory addresses might defeat ASLR.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [https://cwe.mitre.org/data/definitions/200](https://cwe.mitre.org/data/definitions/200)\n - [https://cwe.mitre.org/data/definitions/209](https://cwe.mitre.org/data/definitions/209)\n - [https://cwe.mitre.org/data/definitions/497](https://cwe.mitre.org/data/definitions/497)\n - [https://github.com/struct/mms](https://github.com/struct/mms)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.raptor-memory-address-exposure"
                ]
              }
            },
            {
              "id": "5cbd9348-a7f2-3d7f-a641-ca425e6b883c",
              "name": "resources.rules.raptor-signed-unsigned-conversion",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.raptor-signed-unsigned-conversion"
              },
              "fullDescription": {
                "text": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "help": {
                "text": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [https://cwe.mitre.org/data/definitions/195](https://cwe.mitre.org/data/definitions/195)\n - [https://cwe.mitre.org/data/definitions/196](https://cwe.mitre.org/data/definitions/196)\n - [https://cwe.mitre.org/data/definitions/194](https://cwe.mitre.org/data/definitions/194)\n - [https://cwe.mitre.org/data/definitions/191](https://cwe.mitre.org/data/definitions/191)\n - [https://cwe.mitre.org/data/definitions/681](https://cwe.mitre.org/data/definitions/681)\n - [https://cwe.mitre.org/data/definitions/789](https://cwe.mitre.org/data/definitions/789)\n - [https://g.co/kgs/PCHQjJ](https://g.co/kgs/PCHQjJ)\n - [https://github.com/struct/mms](https://github.com/struct/mms)\n - [https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf](https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf)\n - [http://www.phrack.org/issues/60/10.html#article](http://www.phrack.org/issues/60/10.html#article)\n - [https://docs.microsoft.com/en-us/cpp/sanitizers/asan-error-examples](https://docs.microsoft.com/en-us/cpp/sanitizers/asan-error-examples)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.raptor-signed-unsigned-conversion"
                ]
              }
            },
            {
              "id": "c4cfba39-bc2c-3f62-a966-2c8e417fa15a",
              "name": "resources.rules.raptor-memory-address-exposure",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.raptor-memory-address-exposure"
              },
              "fullDescription": {
                "text": "The software generates an error message that includes sensitive information about its environment, users, or associated data. In particular, exposure of memory addresses might defeat ASLR."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "note"
              },
              "help": {
                "text": "The software generates an error message that includes sensitive information about its environment, users, or associated data. In particular, exposure of memory addresses might defeat ASLR.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "The software generates an error message that includes sensitive information about its environment, users, or associated data. In particular, exposure of memory addresses might defeat ASLR.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [https://cwe.mitre.org/data/definitions/200](https://cwe.mitre.org/data/definitions/200)\n - [https://cwe.mitre.org/data/definitions/209](https://cwe.mitre.org/data/definitions/209)\n - [https://cwe.mitre.org/data/definitions/497](https://cwe.mitre.org/data/definitions/497)\n - [https://github.com/struct/mms](https://github.com/struct/mms)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.raptor-memory-address-exposure"
                ]
              }
            },
            {
              "id": "fc6dbac5-0712-3f4a-ae2e-ff9d27a60605",
              "name": "resources.rules.raptor-memory-address-exposure",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.raptor-memory-address-exposure"
              },
              "fullDescription": {
                "text": "The software generates an error message that includes sensitive information about its environment, users, or associated data. In particular, exposure of memory addresses might defeat ASLR."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "note"
              },
              "help": {
                "text": "The software generates an error message that includes sensitive information about its environment, users, or associated data. In particular, exposure of memory addresses might defeat ASLR.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "The software generates an error message that includes sensitive information about its environment, users, or associated data. In particular, exposure of memory addresses might defeat ASLR.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [https://cwe.mitre.org/data/definitions/200](https://cwe.mitre.org/data/definitions/200)\n - [https://cwe.mitre.org/data/definitions/209](https://cwe.mitre.org/data/definitions/209)\n - [https://cwe.mitre.org/data/definitions/497](https://cwe.mitre.org/data/definitions/497)\n - [https://github.com/struct/mms](https://github.com/struct/mms)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.raptor-memory-address-exposure"
                ]
              }
            },
            {
              "id": "4f8621b3-6741-3716-a7a6-2cc3e5351f92",
              "name": "resources.rules.raptor-memory-address-exposure",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.raptor-memory-address-exposure"
              },
              "fullDescription": {
                "text": "The software generates an error message that includes sensitive information about its environment, users, or associated data. In particular, exposure of memory addresses might defeat ASLR."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "note"
              },
              "help": {
                "text": "The software generates an error message that includes sensitive information about its environment, users, or associated data. In particular, exposure of memory addresses might defeat ASLR.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "The software generates an error message that includes sensitive information about its environment, users, or associated data. In particular, exposure of memory addresses might defeat ASLR.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [https://cwe.mitre.org/data/definitions/200](https://cwe.mitre.org/data/definitions/200)\n - [https://cwe.mitre.org/data/definitions/209](https://cwe.mitre.org/data/definitions/209)\n - [https://cwe.mitre.org/data/definitions/497](https://cwe.mitre.org/data/definitions/497)\n - [https://github.com/struct/mms](https://github.com/struct/mms)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.raptor-memory-address-exposure"
                ]
              }
            },
            {
              "id": "d5fea778-d19b-39f6-85b7-5c35ab9f5631",
              "name": "resources.rules.raptor-memory-address-exposure",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.raptor-memory-address-exposure"
              },
              "fullDescription": {
                "text": "The software generates an error message that includes sensitive information about its environment, users, or associated data. In particular, exposure of memory addresses might defeat ASLR."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "note"
              },
              "help": {
                "text": "The software generates an error message that includes sensitive information about its environment, users, or associated data. In particular, exposure of memory addresses might defeat ASLR.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "The software generates an error message that includes sensitive information about its environment, users, or associated data. In particular, exposure of memory addresses might defeat ASLR.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [https://cwe.mitre.org/data/definitions/200](https://cwe.mitre.org/data/definitions/200)\n - [https://cwe.mitre.org/data/definitions/209](https://cwe.mitre.org/data/definitions/209)\n - [https://cwe.mitre.org/data/definitions/497](https://cwe.mitre.org/data/definitions/497)\n - [https://github.com/struct/mms](https://github.com/struct/mms)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.raptor-memory-address-exposure"
                ]
              }
            },
            {
              "id": "ed6a18e8-553c-30c5-b28b-35fc150ba380",
              "name": "resources.rules.raptor-signed-unsigned-conversion",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.raptor-signed-unsigned-conversion"
              },
              "fullDescription": {
                "text": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "help": {
                "text": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [https://cwe.mitre.org/data/definitions/195](https://cwe.mitre.org/data/definitions/195)\n - [https://cwe.mitre.org/data/definitions/196](https://cwe.mitre.org/data/definitions/196)\n - [https://cwe.mitre.org/data/definitions/194](https://cwe.mitre.org/data/definitions/194)\n - [https://cwe.mitre.org/data/definitions/191](https://cwe.mitre.org/data/definitions/191)\n - [https://cwe.mitre.org/data/definitions/681](https://cwe.mitre.org/data/definitions/681)\n - [https://cwe.mitre.org/data/definitions/789](https://cwe.mitre.org/data/definitions/789)\n - [https://g.co/kgs/PCHQjJ](https://g.co/kgs/PCHQjJ)\n - [https://github.com/struct/mms](https://github.com/struct/mms)\n - [https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf](https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf)\n - [http://www.phrack.org/issues/60/10.html#article](http://www.phrack.org/issues/60/10.html#article)\n - [https://docs.microsoft.com/en-us/cpp/sanitizers/asan-error-examples](https://docs.microsoft.com/en-us/cpp/sanitizers/asan-error-examples)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.raptor-signed-unsigned-conversion"
                ]
              }
            },
            {
              "id": "dd13f50b-b45e-35dc-9527-0964c6a18027",
              "name": "resources.rules.raptor-signed-unsigned-conversion",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.raptor-signed-unsigned-conversion"
              },
              "fullDescription": {
                "text": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "help": {
                "text": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [https://cwe.mitre.org/data/definitions/195](https://cwe.mitre.org/data/definitions/195)\n - [https://cwe.mitre.org/data/definitions/196](https://cwe.mitre.org/data/definitions/196)\n - [https://cwe.mitre.org/data/definitions/194](https://cwe.mitre.org/data/definitions/194)\n - [https://cwe.mitre.org/data/definitions/191](https://cwe.mitre.org/data/definitions/191)\n - [https://cwe.mitre.org/data/definitions/681](https://cwe.mitre.org/data/definitions/681)\n - [https://cwe.mitre.org/data/definitions/789](https://cwe.mitre.org/data/definitions/789)\n - [https://g.co/kgs/PCHQjJ](https://g.co/kgs/PCHQjJ)\n - [https://github.com/struct/mms](https://github.com/struct/mms)\n - [https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf](https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf)\n - [http://www.phrack.org/issues/60/10.html#article](http://www.phrack.org/issues/60/10.html#article)\n - [https://docs.microsoft.com/en-us/cpp/sanitizers/asan-error-examples](https://docs.microsoft.com/en-us/cpp/sanitizers/asan-error-examples)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.raptor-signed-unsigned-conversion"
                ]
              }
            },
            {
              "id": "31c47575-718d-3dbb-bee2-0293b3af3655",
              "name": "resources.rules.raptor-memory-address-exposure",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.raptor-memory-address-exposure"
              },
              "fullDescription": {
                "text": "The software generates an error message that includes sensitive information about its environment, users, or associated data. In particular, exposure of memory addresses might defeat ASLR."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "note"
              },
              "help": {
                "text": "The software generates an error message that includes sensitive information about its environment, users, or associated data. In particular, exposure of memory addresses might defeat ASLR.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "The software generates an error message that includes sensitive information about its environment, users, or associated data. In particular, exposure of memory addresses might defeat ASLR.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [https://cwe.mitre.org/data/definitions/200](https://cwe.mitre.org/data/definitions/200)\n - [https://cwe.mitre.org/data/definitions/209](https://cwe.mitre.org/data/definitions/209)\n - [https://cwe.mitre.org/data/definitions/497](https://cwe.mitre.org/data/definitions/497)\n - [https://github.com/struct/mms](https://github.com/struct/mms)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.raptor-memory-address-exposure"
                ]
              }
            },
            {
              "id": "0a0807db-0c0e-313d-b853-88eba4f7254b",
              "name": "resources.rules.raptor-signed-unsigned-conversion",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.raptor-signed-unsigned-conversion"
              },
              "fullDescription": {
                "text": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "help": {
                "text": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [https://cwe.mitre.org/data/definitions/195](https://cwe.mitre.org/data/definitions/195)\n - [https://cwe.mitre.org/data/definitions/196](https://cwe.mitre.org/data/definitions/196)\n - [https://cwe.mitre.org/data/definitions/194](https://cwe.mitre.org/data/definitions/194)\n - [https://cwe.mitre.org/data/definitions/191](https://cwe.mitre.org/data/definitions/191)\n - [https://cwe.mitre.org/data/definitions/681](https://cwe.mitre.org/data/definitions/681)\n - [https://cwe.mitre.org/data/definitions/789](https://cwe.mitre.org/data/definitions/789)\n - [https://g.co/kgs/PCHQjJ](https://g.co/kgs/PCHQjJ)\n - [https://github.com/struct/mms](https://github.com/struct/mms)\n - [https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf](https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf)\n - [http://www.phrack.org/issues/60/10.html#article](http://www.phrack.org/issues/60/10.html#article)\n - [https://docs.microsoft.com/en-us/cpp/sanitizers/asan-error-examples](https://docs.microsoft.com/en-us/cpp/sanitizers/asan-error-examples)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.raptor-signed-unsigned-conversion"
                ]
              }
            },
            {
              "id": "ac0a0bb3-f545-301b-a4a9-1f5c991baf94",
              "name": "resources.rules.raptor-suspicious-assert",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.raptor-suspicious-assert"
              },
              "fullDescription": {
                "text": "Most codebases define assertion macros which compile to a no-op on non-debug builds. If assertions are the only line of defense against untrusted input, the software may be exposed to attacks that leverage the lack of proper input checks."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "help": {
                "text": "Most codebases define assertion macros which compile to a no-op on non-debug builds. If assertions are the only line of defense against untrusted input, the software may be exposed to attacks that leverage the lack of proper input checks.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Most codebases define assertion macros which compile to a no-op on non-debug builds. If assertions are the only line of defense against untrusted input, the software may be exposed to attacks that leverage the lack of proper input checks.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [https://legends2k.github.io/note/assert_vs_if/](https://legends2k.github.io/note/assert_vs_if/)\n - [https://github.com/struct/mms](https://github.com/struct/mms)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.raptor-suspicious-assert"
                ]
              }
            },
            {
              "id": "a00190fd-17e3-3c1a-8b37-c14b327c5e19",
              "name": "resources.rules.raptor-signed-unsigned-conversion",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.raptor-signed-unsigned-conversion"
              },
              "fullDescription": {
                "text": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "help": {
                "text": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [https://cwe.mitre.org/data/definitions/195](https://cwe.mitre.org/data/definitions/195)\n - [https://cwe.mitre.org/data/definitions/196](https://cwe.mitre.org/data/definitions/196)\n - [https://cwe.mitre.org/data/definitions/194](https://cwe.mitre.org/data/definitions/194)\n - [https://cwe.mitre.org/data/definitions/191](https://cwe.mitre.org/data/definitions/191)\n - [https://cwe.mitre.org/data/definitions/681](https://cwe.mitre.org/data/definitions/681)\n - [https://cwe.mitre.org/data/definitions/789](https://cwe.mitre.org/data/definitions/789)\n - [https://g.co/kgs/PCHQjJ](https://g.co/kgs/PCHQjJ)\n - [https://github.com/struct/mms](https://github.com/struct/mms)\n - [https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf](https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf)\n - [http://www.phrack.org/issues/60/10.html#article](http://www.phrack.org/issues/60/10.html#article)\n - [https://docs.microsoft.com/en-us/cpp/sanitizers/asan-error-examples](https://docs.microsoft.com/en-us/cpp/sanitizers/asan-error-examples)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.raptor-signed-unsigned-conversion"
                ]
              }
            },
            {
              "id": "b60fb930-c06a-3cc6-8ad6-98674d1e4bbb",
              "name": "resources.rules.raptor-signed-unsigned-conversion",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.raptor-signed-unsigned-conversion"
              },
              "fullDescription": {
                "text": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "help": {
                "text": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [https://cwe.mitre.org/data/definitions/195](https://cwe.mitre.org/data/definitions/195)\n - [https://cwe.mitre.org/data/definitions/196](https://cwe.mitre.org/data/definitions/196)\n - [https://cwe.mitre.org/data/definitions/194](https://cwe.mitre.org/data/definitions/194)\n - [https://cwe.mitre.org/data/definitions/191](https://cwe.mitre.org/data/definitions/191)\n - [https://cwe.mitre.org/data/definitions/681](https://cwe.mitre.org/data/definitions/681)\n - [https://cwe.mitre.org/data/definitions/789](https://cwe.mitre.org/data/definitions/789)\n - [https://g.co/kgs/PCHQjJ](https://g.co/kgs/PCHQjJ)\n - [https://github.com/struct/mms](https://github.com/struct/mms)\n - [https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf](https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf)\n - [http://www.phrack.org/issues/60/10.html#article](http://www.phrack.org/issues/60/10.html#article)\n - [https://docs.microsoft.com/en-us/cpp/sanitizers/asan-error-examples](https://docs.microsoft.com/en-us/cpp/sanitizers/asan-error-examples)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.raptor-signed-unsigned-conversion"
                ]
              }
            },
            {
              "id": "ebba3743-ec29-3671-83ac-e458a2a5219a",
              "name": "resources.rules.raptor-signed-unsigned-conversion",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.raptor-signed-unsigned-conversion"
              },
              "fullDescription": {
                "text": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "help": {
                "text": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [https://cwe.mitre.org/data/definitions/195](https://cwe.mitre.org/data/definitions/195)\n - [https://cwe.mitre.org/data/definitions/196](https://cwe.mitre.org/data/definitions/196)\n - [https://cwe.mitre.org/data/definitions/194](https://cwe.mitre.org/data/definitions/194)\n - [https://cwe.mitre.org/data/definitions/191](https://cwe.mitre.org/data/definitions/191)\n - [https://cwe.mitre.org/data/definitions/681](https://cwe.mitre.org/data/definitions/681)\n - [https://cwe.mitre.org/data/definitions/789](https://cwe.mitre.org/data/definitions/789)\n - [https://g.co/kgs/PCHQjJ](https://g.co/kgs/PCHQjJ)\n - [https://github.com/struct/mms](https://github.com/struct/mms)\n - [https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf](https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf)\n - [http://www.phrack.org/issues/60/10.html#article](http://www.phrack.org/issues/60/10.html#article)\n - [https://docs.microsoft.com/en-us/cpp/sanitizers/asan-error-examples](https://docs.microsoft.com/en-us/cpp/sanitizers/asan-error-examples)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.raptor-signed-unsigned-conversion"
                ]
              }
            },
            {
              "id": "ad5bd98a-2e87-327b-bda5-f52d4da7e000",
              "name": "resources.rules.raptor-signed-unsigned-conversion",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.raptor-signed-unsigned-conversion"
              },
              "fullDescription": {
                "text": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "help": {
                "text": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [https://cwe.mitre.org/data/definitions/195](https://cwe.mitre.org/data/definitions/195)\n - [https://cwe.mitre.org/data/definitions/196](https://cwe.mitre.org/data/definitions/196)\n - [https://cwe.mitre.org/data/definitions/194](https://cwe.mitre.org/data/definitions/194)\n - [https://cwe.mitre.org/data/definitions/191](https://cwe.mitre.org/data/definitions/191)\n - [https://cwe.mitre.org/data/definitions/681](https://cwe.mitre.org/data/definitions/681)\n - [https://cwe.mitre.org/data/definitions/789](https://cwe.mitre.org/data/definitions/789)\n - [https://g.co/kgs/PCHQjJ](https://g.co/kgs/PCHQjJ)\n - [https://github.com/struct/mms](https://github.com/struct/mms)\n - [https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf](https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf)\n - [http://www.phrack.org/issues/60/10.html#article](http://www.phrack.org/issues/60/10.html#article)\n - [https://docs.microsoft.com/en-us/cpp/sanitizers/asan-error-examples](https://docs.microsoft.com/en-us/cpp/sanitizers/asan-error-examples)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.raptor-signed-unsigned-conversion"
                ]
              }
            },
            {
              "id": "39dcc581-0463-31ed-aa02-71b2149358b9",
              "name": "resources.rules.raptor-signed-unsigned-conversion",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.raptor-signed-unsigned-conversion"
              },
              "fullDescription": {
                "text": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "help": {
                "text": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [https://cwe.mitre.org/data/definitions/195](https://cwe.mitre.org/data/definitions/195)\n - [https://cwe.mitre.org/data/definitions/196](https://cwe.mitre.org/data/definitions/196)\n - [https://cwe.mitre.org/data/definitions/194](https://cwe.mitre.org/data/definitions/194)\n - [https://cwe.mitre.org/data/definitions/191](https://cwe.mitre.org/data/definitions/191)\n - [https://cwe.mitre.org/data/definitions/681](https://cwe.mitre.org/data/definitions/681)\n - [https://cwe.mitre.org/data/definitions/789](https://cwe.mitre.org/data/definitions/789)\n - [https://g.co/kgs/PCHQjJ](https://g.co/kgs/PCHQjJ)\n - [https://github.com/struct/mms](https://github.com/struct/mms)\n - [https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf](https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf)\n - [http://www.phrack.org/issues/60/10.html#article](http://www.phrack.org/issues/60/10.html#article)\n - [https://docs.microsoft.com/en-us/cpp/sanitizers/asan-error-examples](https://docs.microsoft.com/en-us/cpp/sanitizers/asan-error-examples)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.raptor-signed-unsigned-conversion"
                ]
              }
            },
            {
              "id": "6e2738ee-c061-3b5e-aed8-5cfa89656172",
              "name": "resources.rules.raptor-signed-unsigned-conversion",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.raptor-signed-unsigned-conversion"
              },
              "fullDescription": {
                "text": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "help": {
                "text": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [https://cwe.mitre.org/data/definitions/195](https://cwe.mitre.org/data/definitions/195)\n - [https://cwe.mitre.org/data/definitions/196](https://cwe.mitre.org/data/definitions/196)\n - [https://cwe.mitre.org/data/definitions/194](https://cwe.mitre.org/data/definitions/194)\n - [https://cwe.mitre.org/data/definitions/191](https://cwe.mitre.org/data/definitions/191)\n - [https://cwe.mitre.org/data/definitions/681](https://cwe.mitre.org/data/definitions/681)\n - [https://cwe.mitre.org/data/definitions/789](https://cwe.mitre.org/data/definitions/789)\n - [https://g.co/kgs/PCHQjJ](https://g.co/kgs/PCHQjJ)\n - [https://github.com/struct/mms](https://github.com/struct/mms)\n - [https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf](https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf)\n - [http://www.phrack.org/issues/60/10.html#article](http://www.phrack.org/issues/60/10.html#article)\n - [https://docs.microsoft.com/en-us/cpp/sanitizers/asan-error-examples](https://docs.microsoft.com/en-us/cpp/sanitizers/asan-error-examples)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.raptor-signed-unsigned-conversion"
                ]
              }
            },
            {
              "id": "d15e20c5-9140-3250-a5a7-26197edd4d98",
              "name": "resources.rules.raptor-signed-unsigned-conversion",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.raptor-signed-unsigned-conversion"
              },
              "fullDescription": {
                "text": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "help": {
                "text": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [https://cwe.mitre.org/data/definitions/195](https://cwe.mitre.org/data/definitions/195)\n - [https://cwe.mitre.org/data/definitions/196](https://cwe.mitre.org/data/definitions/196)\n - [https://cwe.mitre.org/data/definitions/194](https://cwe.mitre.org/data/definitions/194)\n - [https://cwe.mitre.org/data/definitions/191](https://cwe.mitre.org/data/definitions/191)\n - [https://cwe.mitre.org/data/definitions/681](https://cwe.mitre.org/data/definitions/681)\n - [https://cwe.mitre.org/data/definitions/789](https://cwe.mitre.org/data/definitions/789)\n - [https://g.co/kgs/PCHQjJ](https://g.co/kgs/PCHQjJ)\n - [https://github.com/struct/mms](https://github.com/struct/mms)\n - [https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf](https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf)\n - [http://www.phrack.org/issues/60/10.html#article](http://www.phrack.org/issues/60/10.html#article)\n - [https://docs.microsoft.com/en-us/cpp/sanitizers/asan-error-examples](https://docs.microsoft.com/en-us/cpp/sanitizers/asan-error-examples)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.raptor-signed-unsigned-conversion"
                ]
              }
            },
            {
              "id": "13119517-369c-3787-a577-45b656ef5be0",
              "name": "resources.rules.raptor-signed-unsigned-conversion",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.raptor-signed-unsigned-conversion"
              },
              "fullDescription": {
                "text": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "help": {
                "text": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [https://cwe.mitre.org/data/definitions/195](https://cwe.mitre.org/data/definitions/195)\n - [https://cwe.mitre.org/data/definitions/196](https://cwe.mitre.org/data/definitions/196)\n - [https://cwe.mitre.org/data/definitions/194](https://cwe.mitre.org/data/definitions/194)\n - [https://cwe.mitre.org/data/definitions/191](https://cwe.mitre.org/data/definitions/191)\n - [https://cwe.mitre.org/data/definitions/681](https://cwe.mitre.org/data/definitions/681)\n - [https://cwe.mitre.org/data/definitions/789](https://cwe.mitre.org/data/definitions/789)\n - [https://g.co/kgs/PCHQjJ](https://g.co/kgs/PCHQjJ)\n - [https://github.com/struct/mms](https://github.com/struct/mms)\n - [https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf](https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf)\n - [http://www.phrack.org/issues/60/10.html#article](http://www.phrack.org/issues/60/10.html#article)\n - [https://docs.microsoft.com/en-us/cpp/sanitizers/asan-error-examples](https://docs.microsoft.com/en-us/cpp/sanitizers/asan-error-examples)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.raptor-signed-unsigned-conversion"
                ]
              }
            },
            {
              "id": "306e534c-58c8-39ee-ac51-5621db696466",
              "name": "resources.rules.raptor-signed-unsigned-conversion",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.raptor-signed-unsigned-conversion"
              },
              "fullDescription": {
                "text": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "help": {
                "text": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [https://cwe.mitre.org/data/definitions/195](https://cwe.mitre.org/data/definitions/195)\n - [https://cwe.mitre.org/data/definitions/196](https://cwe.mitre.org/data/definitions/196)\n - [https://cwe.mitre.org/data/definitions/194](https://cwe.mitre.org/data/definitions/194)\n - [https://cwe.mitre.org/data/definitions/191](https://cwe.mitre.org/data/definitions/191)\n - [https://cwe.mitre.org/data/definitions/681](https://cwe.mitre.org/data/definitions/681)\n - [https://cwe.mitre.org/data/definitions/789](https://cwe.mitre.org/data/definitions/789)\n - [https://g.co/kgs/PCHQjJ](https://g.co/kgs/PCHQjJ)\n - [https://github.com/struct/mms](https://github.com/struct/mms)\n - [https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf](https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf)\n - [http://www.phrack.org/issues/60/10.html#article](http://www.phrack.org/issues/60/10.html#article)\n - [https://docs.microsoft.com/en-us/cpp/sanitizers/asan-error-examples](https://docs.microsoft.com/en-us/cpp/sanitizers/asan-error-examples)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.raptor-signed-unsigned-conversion"
                ]
              }
            },
            {
              "id": "d3088307-9d21-39a8-8713-25b7a7751626",
              "name": "resources.rules.raptor-signed-unsigned-conversion",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.raptor-signed-unsigned-conversion"
              },
              "fullDescription": {
                "text": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "help": {
                "text": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [https://cwe.mitre.org/data/definitions/195](https://cwe.mitre.org/data/definitions/195)\n - [https://cwe.mitre.org/data/definitions/196](https://cwe.mitre.org/data/definitions/196)\n - [https://cwe.mitre.org/data/definitions/194](https://cwe.mitre.org/data/definitions/194)\n - [https://cwe.mitre.org/data/definitions/191](https://cwe.mitre.org/data/definitions/191)\n - [https://cwe.mitre.org/data/definitions/681](https://cwe.mitre.org/data/definitions/681)\n - [https://cwe.mitre.org/data/definitions/789](https://cwe.mitre.org/data/definitions/789)\n - [https://g.co/kgs/PCHQjJ](https://g.co/kgs/PCHQjJ)\n - [https://github.com/struct/mms](https://github.com/struct/mms)\n - [https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf](https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf)\n - [http://www.phrack.org/issues/60/10.html#article](http://www.phrack.org/issues/60/10.html#article)\n - [https://docs.microsoft.com/en-us/cpp/sanitizers/asan-error-examples](https://docs.microsoft.com/en-us/cpp/sanitizers/asan-error-examples)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.raptor-signed-unsigned-conversion"
                ]
              }
            },
            {
              "id": "35c5e84d-a17d-38c9-aeaa-6370086978b2",
              "name": "resources.rules.raptor-signed-unsigned-conversion",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.raptor-signed-unsigned-conversion"
              },
              "fullDescription": {
                "text": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "help": {
                "text": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [https://cwe.mitre.org/data/definitions/195](https://cwe.mitre.org/data/definitions/195)\n - [https://cwe.mitre.org/data/definitions/196](https://cwe.mitre.org/data/definitions/196)\n - [https://cwe.mitre.org/data/definitions/194](https://cwe.mitre.org/data/definitions/194)\n - [https://cwe.mitre.org/data/definitions/191](https://cwe.mitre.org/data/definitions/191)\n - [https://cwe.mitre.org/data/definitions/681](https://cwe.mitre.org/data/definitions/681)\n - [https://cwe.mitre.org/data/definitions/789](https://cwe.mitre.org/data/definitions/789)\n - [https://g.co/kgs/PCHQjJ](https://g.co/kgs/PCHQjJ)\n - [https://github.com/struct/mms](https://github.com/struct/mms)\n - [https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf](https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf)\n - [http://www.phrack.org/issues/60/10.html#article](http://www.phrack.org/issues/60/10.html#article)\n - [https://docs.microsoft.com/en-us/cpp/sanitizers/asan-error-examples](https://docs.microsoft.com/en-us/cpp/sanitizers/asan-error-examples)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.raptor-signed-unsigned-conversion"
                ]
              }
            },
            {
              "id": "ce79a96b-6a75-3d78-ab04-2e7c1a231196",
              "name": "resources.rules.raptor-signed-unsigned-conversion",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.raptor-signed-unsigned-conversion"
              },
              "fullDescription": {
                "text": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "help": {
                "text": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [https://cwe.mitre.org/data/definitions/195](https://cwe.mitre.org/data/definitions/195)\n - [https://cwe.mitre.org/data/definitions/196](https://cwe.mitre.org/data/definitions/196)\n - [https://cwe.mitre.org/data/definitions/194](https://cwe.mitre.org/data/definitions/194)\n - [https://cwe.mitre.org/data/definitions/191](https://cwe.mitre.org/data/definitions/191)\n - [https://cwe.mitre.org/data/definitions/681](https://cwe.mitre.org/data/definitions/681)\n - [https://cwe.mitre.org/data/definitions/789](https://cwe.mitre.org/data/definitions/789)\n - [https://g.co/kgs/PCHQjJ](https://g.co/kgs/PCHQjJ)\n - [https://github.com/struct/mms](https://github.com/struct/mms)\n - [https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf](https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf)\n - [http://www.phrack.org/issues/60/10.html#article](http://www.phrack.org/issues/60/10.html#article)\n - [https://docs.microsoft.com/en-us/cpp/sanitizers/asan-error-examples](https://docs.microsoft.com/en-us/cpp/sanitizers/asan-error-examples)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.raptor-signed-unsigned-conversion"
                ]
              }
            },
            {
              "id": "d7ed3405-c517-3e68-ad06-f30411f7bab5",
              "name": "resources.rules.raptor-suspicious-assert",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.raptor-suspicious-assert"
              },
              "fullDescription": {
                "text": "Most codebases define assertion macros which compile to a no-op on non-debug builds. If assertions are the only line of defense against untrusted input, the software may be exposed to attacks that leverage the lack of proper input checks."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "help": {
                "text": "Most codebases define assertion macros which compile to a no-op on non-debug builds. If assertions are the only line of defense against untrusted input, the software may be exposed to attacks that leverage the lack of proper input checks.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Most codebases define assertion macros which compile to a no-op on non-debug builds. If assertions are the only line of defense against untrusted input, the software may be exposed to attacks that leverage the lack of proper input checks.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [https://legends2k.github.io/note/assert_vs_if/](https://legends2k.github.io/note/assert_vs_if/)\n - [https://github.com/struct/mms](https://github.com/struct/mms)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.raptor-suspicious-assert"
                ]
              }
            },
            {
              "id": "8c644cf4-4526-335f-b858-d8b2c84e4f0b",
              "name": "resources.rules.raptor-suspicious-assert",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.raptor-suspicious-assert"
              },
              "fullDescription": {
                "text": "Most codebases define assertion macros which compile to a no-op on non-debug builds. If assertions are the only line of defense against untrusted input, the software may be exposed to attacks that leverage the lack of proper input checks."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "help": {
                "text": "Most codebases define assertion macros which compile to a no-op on non-debug builds. If assertions are the only line of defense against untrusted input, the software may be exposed to attacks that leverage the lack of proper input checks.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Most codebases define assertion macros which compile to a no-op on non-debug builds. If assertions are the only line of defense against untrusted input, the software may be exposed to attacks that leverage the lack of proper input checks.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [https://legends2k.github.io/note/assert_vs_if/](https://legends2k.github.io/note/assert_vs_if/)\n - [https://github.com/struct/mms](https://github.com/struct/mms)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.raptor-suspicious-assert"
                ]
              }
            },
            {
              "id": "51640982-3f38-38b6-a9d5-9b7d774d4e68",
              "name": "resources.rules.raptor-signed-unsigned-conversion",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.raptor-signed-unsigned-conversion"
              },
              "fullDescription": {
                "text": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "help": {
                "text": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [https://cwe.mitre.org/data/definitions/195](https://cwe.mitre.org/data/definitions/195)\n - [https://cwe.mitre.org/data/definitions/196](https://cwe.mitre.org/data/definitions/196)\n - [https://cwe.mitre.org/data/definitions/194](https://cwe.mitre.org/data/definitions/194)\n - [https://cwe.mitre.org/data/definitions/191](https://cwe.mitre.org/data/definitions/191)\n - [https://cwe.mitre.org/data/definitions/681](https://cwe.mitre.org/data/definitions/681)\n - [https://cwe.mitre.org/data/definitions/789](https://cwe.mitre.org/data/definitions/789)\n - [https://g.co/kgs/PCHQjJ](https://g.co/kgs/PCHQjJ)\n - [https://github.com/struct/mms](https://github.com/struct/mms)\n - [https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf](https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf)\n - [http://www.phrack.org/issues/60/10.html#article](http://www.phrack.org/issues/60/10.html#article)\n - [https://docs.microsoft.com/en-us/cpp/sanitizers/asan-error-examples](https://docs.microsoft.com/en-us/cpp/sanitizers/asan-error-examples)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.raptor-signed-unsigned-conversion"
                ]
              }
            },
            {
              "id": "367368be-b946-39c2-81ad-7a15c08d7097",
              "name": "resources.rules.raptor-signed-unsigned-conversion",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.raptor-signed-unsigned-conversion"
              },
              "fullDescription": {
                "text": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "help": {
                "text": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [https://cwe.mitre.org/data/definitions/195](https://cwe.mitre.org/data/definitions/195)\n - [https://cwe.mitre.org/data/definitions/196](https://cwe.mitre.org/data/definitions/196)\n - [https://cwe.mitre.org/data/definitions/194](https://cwe.mitre.org/data/definitions/194)\n - [https://cwe.mitre.org/data/definitions/191](https://cwe.mitre.org/data/definitions/191)\n - [https://cwe.mitre.org/data/definitions/681](https://cwe.mitre.org/data/definitions/681)\n - [https://cwe.mitre.org/data/definitions/789](https://cwe.mitre.org/data/definitions/789)\n - [https://g.co/kgs/PCHQjJ](https://g.co/kgs/PCHQjJ)\n - [https://github.com/struct/mms](https://github.com/struct/mms)\n - [https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf](https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf)\n - [http://www.phrack.org/issues/60/10.html#article](http://www.phrack.org/issues/60/10.html#article)\n - [https://docs.microsoft.com/en-us/cpp/sanitizers/asan-error-examples](https://docs.microsoft.com/en-us/cpp/sanitizers/asan-error-examples)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.raptor-signed-unsigned-conversion"
                ]
              }
            },
            {
              "id": "27da65d9-f4b5-31ee-bc5e-287ff83f644e",
              "name": "resources.rules.return-in-init",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.return-in-init"
              },
              "fullDescription": {
                "text": "`return` should never appear inside a class __init__ function. This will cause a runtime error."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "error"
              },
              "help": {
                "text": "`return` should never appear inside a class __init__ function. This will cause a runtime error.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "`return` should never appear inside a class __init__ function. This will cause a runtime error.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.return-in-init"
                ]
              }
            },
            {
              "id": "2b3d4794-31ef-3956-91b7-3a9194796740",
              "name": "resources.rules.raptor-signed-unsigned-conversion",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.raptor-signed-unsigned-conversion"
              },
              "fullDescription": {
                "text": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "help": {
                "text": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [https://cwe.mitre.org/data/definitions/195](https://cwe.mitre.org/data/definitions/195)\n - [https://cwe.mitre.org/data/definitions/196](https://cwe.mitre.org/data/definitions/196)\n - [https://cwe.mitre.org/data/definitions/194](https://cwe.mitre.org/data/definitions/194)\n - [https://cwe.mitre.org/data/definitions/191](https://cwe.mitre.org/data/definitions/191)\n - [https://cwe.mitre.org/data/definitions/681](https://cwe.mitre.org/data/definitions/681)\n - [https://cwe.mitre.org/data/definitions/789](https://cwe.mitre.org/data/definitions/789)\n - [https://g.co/kgs/PCHQjJ](https://g.co/kgs/PCHQjJ)\n - [https://github.com/struct/mms](https://github.com/struct/mms)\n - [https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf](https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf)\n - [http://www.phrack.org/issues/60/10.html#article](http://www.phrack.org/issues/60/10.html#article)\n - [https://docs.microsoft.com/en-us/cpp/sanitizers/asan-error-examples](https://docs.microsoft.com/en-us/cpp/sanitizers/asan-error-examples)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.raptor-signed-unsigned-conversion"
                ]
              }
            },
            {
              "id": "9f28feff-723d-3cf7-b973-ace33704dbad",
              "name": "resources.rules.return-in-init",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.return-in-init"
              },
              "fullDescription": {
                "text": "`return` should never appear inside a class __init__ function. This will cause a runtime error."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "error"
              },
              "help": {
                "text": "`return` should never appear inside a class __init__ function. This will cause a runtime error.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "`return` should never appear inside a class __init__ function. This will cause a runtime error.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.return-in-init"
                ]
              }
            },
            {
              "id": "21ebd432-9594-3c8d-97ac-45bf731f3a56",
              "name": "python.lang.security.audit.exec-detected.exec-detected",
              "shortDescription": {
                "text": "Opengrep Finding: python.lang.security.audit.exec-detected.exec-detected"
              },
              "fullDescription": {
                "text": "Detected the use of exec(). exec() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://semgrep.dev/r/python.lang.security.audit.exec-detected.exec-detected",
              "help": {
                "text": "Detected the use of exec(). exec() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Detected the use of exec(). exec() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/python.lang.security.audit.exec-detected.exec-detected)\n - [https://owasp.org/Top10/A03_2021-Injection](https://owasp.org/Top10/A03_2021-Injection)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "python.lang.security.audit.exec-detected.exec-detected"
                ]
              }
            },
            {
              "id": "ccbd7de8-346d-3348-986d-540e246b2a85",
              "name": "resources.rules.hardcoded-tmp-path",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.hardcoded-tmp-path"
              },
              "fullDescription": {
                "text": "Detected hardcoded temp directory. Consider using 'tempfile.TemporaryFile' instead.\n"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "help": {
                "text": "Detected hardcoded temp directory. Consider using 'tempfile.TemporaryFile' instead.\n\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Detected hardcoded temp directory. Consider using 'tempfile.TemporaryFile' instead.\n\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [https://docs.python.org/3/library/tempfile.html#tempfile.TemporaryFile](https://docs.python.org/3/library/tempfile.html#tempfile.TemporaryFile)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.hardcoded-tmp-path"
                ]
              }
            },
            {
              "id": "0b4a8580-69fd-3e79-b2b9-744309027005",
              "name": "resources.rules.dlint-catastrophic-redos",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.dlint-catastrophic-redos"
              },
              "fullDescription": {
                "text": "Regex `$X` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "error"
              },
              "help": {
                "text": "Regex `$X` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Regex `$X` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [https://r2c.dev/blog/2020/finding-python-redos-bugs-at-scale-using-dlint-and-r2c/](https://r2c.dev/blog/2020/finding-python-redos-bugs-at-scale-using-dlint-and-r2c/)\n - [https://r2c.dev/blog/2020/improving-redos-detection-with-dlint-and-r2c/](https://r2c.dev/blog/2020/improving-redos-detection-with-dlint-and-r2c/)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.dlint-catastrophic-redos"
                ]
              }
            },
            {
              "id": "4caf5963-f789-32aa-959e-1d79633ecbd2",
              "name": "resources.rules.return-not-in-function",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.return-not-in-function"
              },
              "fullDescription": {
                "text": "`return` only makes sense inside a function"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "help": {
                "text": "`return` only makes sense inside a function\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "`return` only makes sense inside a function\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.return-not-in-function"
                ]
              }
            },
            {
              "id": "02bf8a6b-5b2d-38b7-969a-b6140be2152a",
              "name": "resources.rules.return-in-init",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.return-in-init"
              },
              "fullDescription": {
                "text": "`return` should never appear inside a class __init__ function. This will cause a runtime error."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "error"
              },
              "help": {
                "text": "`return` should never appear inside a class __init__ function. This will cause a runtime error.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "`return` should never appear inside a class __init__ function. This will cause a runtime error.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.return-in-init"
                ]
              }
            },
            {
              "id": "867e7997-6fc8-3af3-aa76-72ca90edf76a",
              "name": "resources.rules.return-in-init",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.return-in-init"
              },
              "fullDescription": {
                "text": "`return` should never appear inside a class __init__ function. This will cause a runtime error."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "error"
              },
              "help": {
                "text": "`return` should never appear inside a class __init__ function. This will cause a runtime error.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "`return` should never appear inside a class __init__ function. This will cause a runtime error.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.return-in-init"
                ]
              }
            },
            {
              "id": "d7bfa525-9665-3d53-bc2d-94a88f47bd23",
              "name": "resources.rules.return-in-init",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.return-in-init"
              },
              "fullDescription": {
                "text": "`return` should never appear inside a class __init__ function. This will cause a runtime error."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "error"
              },
              "help": {
                "text": "`return` should never appear inside a class __init__ function. This will cause a runtime error.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "`return` should never appear inside a class __init__ function. This will cause a runtime error.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.return-in-init"
                ]
              }
            },
            {
              "id": "da4f3c8e-dd8b-3e92-a972-999fc243bf0a",
              "name": "html.security.audit.missing-integrity.missing-integrity",
              "shortDescription": {
                "text": "Opengrep Finding: html.security.audit.missing-integrity.missing-integrity"
              },
              "fullDescription": {
                "text": "This tag is missing an 'integrity' subresource integrity attribute. The 'integrity' attribute allows for the browser to verify that externally hosted files (for example from a CDN) are delivered without unexpected manipulation. Without this attribute, if an attacker can modify the externally hosted resource, this could lead to XSS and other types of attacks. To prevent this, include the base64-encoded cryptographic hash of the resource (file) youâ€™re telling the browser to fetch in the 'integrity' attribute for all externally hosted files."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://semgrep.dev/r/html.security.audit.missing-integrity.missing-integrity",
              "help": {
                "text": "This tag is missing an 'integrity' subresource integrity attribute. The 'integrity' attribute allows for the browser to verify that externally hosted files (for example from a CDN) are delivered without unexpected manipulation. Without this attribute, if an attacker can modify the externally hosted resource, this could lead to XSS and other types of attacks. To prevent this, include the base64-encoded cryptographic hash of the resource (file) youâ€™re telling the browser to fetch in the 'integrity' attribute for all externally hosted files.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "This tag is missing an 'integrity' subresource integrity attribute. The 'integrity' attribute allows for the browser to verify that externally hosted files (for example from a CDN) are delivered without unexpected manipulation. Without this attribute, if an attacker can modify the externally hosted resource, this could lead to XSS and other types of attacks. To prevent this, include the base64-encoded cryptographic hash of the resource (file) youâ€™re telling the browser to fetch in the 'integrity' attribute for all externally hosted files.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/html.security.audit.missing-integrity.missing-integrity)\n - [https://owasp.org/Top10/A08_2021-Software_and_Data_Integrity_Failures](https://owasp.org/Top10/A08_2021-Software_and_Data_Integrity_Failures)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "html.security.audit.missing-integrity.missing-integrity"
                ]
              }
            },
            {
              "id": "cedcab19-4d38-3f44-83d8-54f8f4372e5a",
              "name": "resources.rules.return-not-in-function",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.return-not-in-function"
              },
              "fullDescription": {
                "text": "`return` only makes sense inside a function"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "help": {
                "text": "`return` only makes sense inside a function\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "`return` only makes sense inside a function\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.return-not-in-function"
                ]
              }
            },
            {
              "id": "a5c9a8aa-2407-38ff-81e5-c352f700620f",
              "name": "resources.rules.return-not-in-function",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.return-not-in-function"
              },
              "fullDescription": {
                "text": "`return` only makes sense inside a function"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "help": {
                "text": "`return` only makes sense inside a function\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "`return` only makes sense inside a function\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.return-not-in-function"
                ]
              }
            },
            {
              "id": "9307f797-a81e-3f37-b088-825b6407777c",
              "name": "resources.rules.return-not-in-function",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.return-not-in-function"
              },
              "fullDescription": {
                "text": "`return` only makes sense inside a function"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "help": {
                "text": "`return` only makes sense inside a function\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "`return` only makes sense inside a function\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.return-not-in-function"
                ]
              }
            },
            {
              "id": "7d646895-88d4-3745-a2c5-dde10aa8f638",
              "name": "resources.rules.return-not-in-function",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.return-not-in-function"
              },
              "fullDescription": {
                "text": "`return` only makes sense inside a function"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "help": {
                "text": "`return` only makes sense inside a function\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "`return` only makes sense inside a function\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.return-not-in-function"
                ]
              }
            },
            {
              "id": "1fecd904-e44e-36ba-b3cc-e58bd1b46424",
              "name": "python.lang.security.deserialization.pickle.avoid-pickle",
              "shortDescription": {
                "text": "Opengrep Finding: python.lang.security.deserialization.pickle.avoid-pickle"
              },
              "fullDescription": {
                "text": "Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://semgrep.dev/r/python.lang.security.deserialization.pickle.avoid-pickle",
              "help": {
                "text": "Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/python.lang.security.deserialization.pickle.avoid-pickle)\n - [https://docs.python.org/3/library/pickle.html](https://docs.python.org/3/library/pickle.html)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "python.lang.security.deserialization.pickle.avoid-pickle"
                ]
              }
            },
            {
              "id": "c14ba698-8ff0-3e70-be7a-51e4a4e8a182",
              "name": "python.lang.security.deserialization.pickle.avoid-pickle",
              "shortDescription": {
                "text": "Opengrep Finding: python.lang.security.deserialization.pickle.avoid-pickle"
              },
              "fullDescription": {
                "text": "Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://semgrep.dev/r/python.lang.security.deserialization.pickle.avoid-pickle",
              "help": {
                "text": "Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/python.lang.security.deserialization.pickle.avoid-pickle)\n - [https://docs.python.org/3/library/pickle.html](https://docs.python.org/3/library/pickle.html)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "python.lang.security.deserialization.pickle.avoid-pickle"
                ]
              }
            },
            {
              "id": "466f707f-ead6-3f47-8383-94eb32a39e3a",
              "name": "resources.rules.use-sys-exit",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.use-sys-exit"
              },
              "fullDescription": {
                "text": "Use `sys.exit` over the python shell `exit` built-in. `exit` is a helper for the interactive shell and may not be available on all Python implementations. https://stackoverflow.com/questions/6501121/difference-between-exit-and-sys-exit-in-python"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "help": {
                "text": "Use `sys.exit` over the python shell `exit` built-in. `exit` is a helper for the interactive shell and may not be available on all Python implementations. https://stackoverflow.com/questions/6501121/difference-between-exit-and-sys-exit-in-python\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Use `sys.exit` over the python shell `exit` built-in. `exit` is a helper for the interactive shell and may not be available on all Python implementations. https://stackoverflow.com/questions/6501121/difference-between-exit-and-sys-exit-in-python\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.use-sys-exit"
                ]
              }
            },
            {
              "id": "087974e4-10cc-3afe-bb68-df3274e0465c",
              "name": "python.lang.security.deserialization.pickle.avoid-pickle",
              "shortDescription": {
                "text": "Opengrep Finding: python.lang.security.deserialization.pickle.avoid-pickle"
              },
              "fullDescription": {
                "text": "Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://semgrep.dev/r/python.lang.security.deserialization.pickle.avoid-pickle",
              "help": {
                "text": "Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/python.lang.security.deserialization.pickle.avoid-pickle)\n - [https://docs.python.org/3/library/pickle.html](https://docs.python.org/3/library/pickle.html)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "python.lang.security.deserialization.pickle.avoid-pickle"
                ]
              }
            },
            {
              "id": "b4d28c24-8ad5-3185-b15d-cbc528f00d56",
              "name": "resources.rules.dlint-catastrophic-redos",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.dlint-catastrophic-redos"
              },
              "fullDescription": {
                "text": "Regex `$X` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "error"
              },
              "help": {
                "text": "Regex `$X` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Regex `$X` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [https://r2c.dev/blog/2020/finding-python-redos-bugs-at-scale-using-dlint-and-r2c/](https://r2c.dev/blog/2020/finding-python-redos-bugs-at-scale-using-dlint-and-r2c/)\n - [https://r2c.dev/blog/2020/improving-redos-detection-with-dlint-and-r2c/](https://r2c.dev/blog/2020/improving-redos-detection-with-dlint-and-r2c/)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.dlint-catastrophic-redos"
                ]
              }
            },
            {
              "id": "6de61cfa-2e19-39e0-81d4-faca9165366b",
              "name": "resources.rules.pass-body-fn",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.pass-body-fn"
              },
              "fullDescription": {
                "text": "`pass` is the body of function $X. Consider removing this or raise NotImplementedError() if this is a TODO"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "help": {
                "text": "`pass` is the body of function $X. Consider removing this or raise NotImplementedError() if this is a TODO\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "`pass` is the body of function $X. Consider removing this or raise NotImplementedError() if this is a TODO\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.pass-body-fn"
                ]
              }
            },
            {
              "id": "ec8f086b-4118-3520-b88e-37ed57a55a8c",
              "name": "python.lang.security.dangerous-globals-use.dangerous-globals-use",
              "shortDescription": {
                "text": "Opengrep Finding: python.lang.security.dangerous-globals-use.dangerous-globals-use"
              },
              "fullDescription": {
                "text": "Found non static data as an index to 'globals()'. This is extremely dangerous because it allows an attacker to execute arbitrary code on the system. Refactor your code not to use 'globals()'."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://semgrep.dev/r/python.lang.security.dangerous-globals-use.dangerous-globals-use",
              "help": {
                "text": "Found non static data as an index to 'globals()'. This is extremely dangerous because it allows an attacker to execute arbitrary code on the system. Refactor your code not to use 'globals()'.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Found non static data as an index to 'globals()'. This is extremely dangerous because it allows an attacker to execute arbitrary code on the system. Refactor your code not to use 'globals()'.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/python.lang.security.dangerous-globals-use.dangerous-globals-use)\n - [https://github.com/mpirnat/lets-be-bad-guys/blob/d92768fb3ade32956abd53bd6bb06e19d634a084/badguys/vulnerable/views.py#L181-L186](https://github.com/mpirnat/lets-be-bad-guys/blob/d92768fb3ade32956abd53bd6bb06e19d634a084/badguys/vulnerable/views.py#L181-L186)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "python.lang.security.dangerous-globals-use.dangerous-globals-use"
                ]
              }
            },
            {
              "id": "31c72bfb-b552-30f5-a19e-0d57db791445",
              "name": "python.lang.security.dangerous-globals-use.dangerous-globals-use",
              "shortDescription": {
                "text": "Opengrep Finding: python.lang.security.dangerous-globals-use.dangerous-globals-use"
              },
              "fullDescription": {
                "text": "Found non static data as an index to 'globals()'. This is extremely dangerous because it allows an attacker to execute arbitrary code on the system. Refactor your code not to use 'globals()'."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://semgrep.dev/r/python.lang.security.dangerous-globals-use.dangerous-globals-use",
              "help": {
                "text": "Found non static data as an index to 'globals()'. This is extremely dangerous because it allows an attacker to execute arbitrary code on the system. Refactor your code not to use 'globals()'.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Found non static data as an index to 'globals()'. This is extremely dangerous because it allows an attacker to execute arbitrary code on the system. Refactor your code not to use 'globals()'.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/python.lang.security.dangerous-globals-use.dangerous-globals-use)\n - [https://github.com/mpirnat/lets-be-bad-guys/blob/d92768fb3ade32956abd53bd6bb06e19d634a084/badguys/vulnerable/views.py#L181-L186](https://github.com/mpirnat/lets-be-bad-guys/blob/d92768fb3ade32956abd53bd6bb06e19d634a084/badguys/vulnerable/views.py#L181-L186)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "python.lang.security.dangerous-globals-use.dangerous-globals-use"
                ]
              }
            },
            {
              "id": "9db78396-728e-3b60-9b82-a2a72de1ca85",
              "name": "resources.rules.pass-body-fn",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.pass-body-fn"
              },
              "fullDescription": {
                "text": "`pass` is the body of function $X. Consider removing this or raise NotImplementedError() if this is a TODO"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "help": {
                "text": "`pass` is the body of function $X. Consider removing this or raise NotImplementedError() if this is a TODO\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "`pass` is the body of function $X. Consider removing this or raise NotImplementedError() if this is a TODO\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.pass-body-fn"
                ]
              }
            },
            {
              "id": "5a2870e9-491b-3560-b071-1527a5b812d2",
              "name": "resources.rules.pass-body-fn",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.pass-body-fn"
              },
              "fullDescription": {
                "text": "`pass` is the body of function $X. Consider removing this or raise NotImplementedError() if this is a TODO"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "help": {
                "text": "`pass` is the body of function $X. Consider removing this or raise NotImplementedError() if this is a TODO\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "`pass` is the body of function $X. Consider removing this or raise NotImplementedError() if this is a TODO\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.pass-body-fn"
                ]
              }
            },
            {
              "id": "2e04e563-0c84-3f68-8ac5-87cae8f6cd33",
              "name": "resources.rules.pass-body-fn",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.pass-body-fn"
              },
              "fullDescription": {
                "text": "`pass` is the body of function $X. Consider removing this or raise NotImplementedError() if this is a TODO"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "help": {
                "text": "`pass` is the body of function $X. Consider removing this or raise NotImplementedError() if this is a TODO\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "`pass` is the body of function $X. Consider removing this or raise NotImplementedError() if this is a TODO\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.pass-body-fn"
                ]
              }
            },
            {
              "id": "225873b7-c5eb-30db-b411-8295dd56a265",
              "name": "python.lang.security.dangerous-globals-use.dangerous-globals-use",
              "shortDescription": {
                "text": "Opengrep Finding: python.lang.security.dangerous-globals-use.dangerous-globals-use"
              },
              "fullDescription": {
                "text": "Found non static data as an index to 'globals()'. This is extremely dangerous because it allows an attacker to execute arbitrary code on the system. Refactor your code not to use 'globals()'."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://semgrep.dev/r/python.lang.security.dangerous-globals-use.dangerous-globals-use",
              "help": {
                "text": "Found non static data as an index to 'globals()'. This is extremely dangerous because it allows an attacker to execute arbitrary code on the system. Refactor your code not to use 'globals()'.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Found non static data as an index to 'globals()'. This is extremely dangerous because it allows an attacker to execute arbitrary code on the system. Refactor your code not to use 'globals()'.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/python.lang.security.dangerous-globals-use.dangerous-globals-use)\n - [https://github.com/mpirnat/lets-be-bad-guys/blob/d92768fb3ade32956abd53bd6bb06e19d634a084/badguys/vulnerable/views.py#L181-L186](https://github.com/mpirnat/lets-be-bad-guys/blob/d92768fb3ade32956abd53bd6bb06e19d634a084/badguys/vulnerable/views.py#L181-L186)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "python.lang.security.dangerous-globals-use.dangerous-globals-use"
                ]
              }
            },
            {
              "id": "8b43d953-43f2-302f-ab0b-ea03a9061e4b",
              "name": "resources.rules.return-not-in-function",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.return-not-in-function"
              },
              "fullDescription": {
                "text": "`return` only makes sense inside a function"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "help": {
                "text": "`return` only makes sense inside a function\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "`return` only makes sense inside a function\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.return-not-in-function"
                ]
              }
            },
            {
              "id": "b52aadc7-76d1-32c0-aa78-d74c69f3faf0",
              "name": "resources.rules.return-in-init",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.return-in-init"
              },
              "fullDescription": {
                "text": "`return` should never appear inside a class __init__ function. This will cause a runtime error."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "error"
              },
              "help": {
                "text": "`return` should never appear inside a class __init__ function. This will cause a runtime error.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "`return` should never appear inside a class __init__ function. This will cause a runtime error.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.return-in-init"
                ]
              }
            },
            {
              "id": "fdb3b3e3-fbf9-3998-a974-0b3f0599039d",
              "name": "python.lang.security.audit.eval-detected.eval-detected",
              "shortDescription": {
                "text": "Opengrep Finding: python.lang.security.audit.eval-detected.eval-detected"
              },
              "fullDescription": {
                "text": "Detected the use of eval(). eval() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://semgrep.dev/r/python.lang.security.audit.eval-detected.eval-detected",
              "help": {
                "text": "Detected the use of eval(). eval() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Detected the use of eval(). eval() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/python.lang.security.audit.eval-detected.eval-detected)\n - [https://owasp.org/Top10/A03_2021-Injection](https://owasp.org/Top10/A03_2021-Injection)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "python.lang.security.audit.eval-detected.eval-detected"
                ]
              }
            },
            {
              "id": "2c1853bd-d1fa-3a41-ba07-fde119b2f406",
              "name": "resources.rules.return-in-init",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.return-in-init"
              },
              "fullDescription": {
                "text": "`return` should never appear inside a class __init__ function. This will cause a runtime error."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "error"
              },
              "help": {
                "text": "`return` should never appear inside a class __init__ function. This will cause a runtime error.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "`return` should never appear inside a class __init__ function. This will cause a runtime error.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.return-in-init"
                ]
              }
            },
            {
              "id": "c9a3fd2d-5291-3f13-9bc5-f01ed9c53df4",
              "name": "resources.rules.return-in-init",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.return-in-init"
              },
              "fullDescription": {
                "text": "`return` should never appear inside a class __init__ function. This will cause a runtime error."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "error"
              },
              "help": {
                "text": "`return` should never appear inside a class __init__ function. This will cause a runtime error.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "`return` should never appear inside a class __init__ function. This will cause a runtime error.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.return-in-init"
                ]
              }
            },
            {
              "id": "e3f0b744-6b0b-3910-bf4d-76b0d73413d5",
              "name": "resources.rules.return-in-init",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.return-in-init"
              },
              "fullDescription": {
                "text": "`return` should never appear inside a class __init__ function. This will cause a runtime error."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "error"
              },
              "help": {
                "text": "`return` should never appear inside a class __init__ function. This will cause a runtime error.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "`return` should never appear inside a class __init__ function. This will cause a runtime error.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.return-in-init"
                ]
              }
            },
            {
              "id": "43de6b89-aa4d-3e5a-9b8d-9f5ea5aa3a55",
              "name": "resources.rules.return-in-init",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.return-in-init"
              },
              "fullDescription": {
                "text": "`return` should never appear inside a class __init__ function. This will cause a runtime error."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "error"
              },
              "help": {
                "text": "`return` should never appear inside a class __init__ function. This will cause a runtime error.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "`return` should never appear inside a class __init__ function. This will cause a runtime error.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.return-in-init"
                ]
              }
            },
            {
              "id": "ed872d09-5ba0-364b-822e-5a48d1be5070",
              "name": "resources.rules.return-in-init",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.return-in-init"
              },
              "fullDescription": {
                "text": "`return` should never appear inside a class __init__ function. This will cause a runtime error."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "error"
              },
              "help": {
                "text": "`return` should never appear inside a class __init__ function. This will cause a runtime error.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "`return` should never appear inside a class __init__ function. This will cause a runtime error.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.return-in-init"
                ]
              }
            },
            {
              "id": "03da0479-17de-319d-a0c2-afaf3db47947",
              "name": "resources.rules.return-in-init",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.return-in-init"
              },
              "fullDescription": {
                "text": "`return` should never appear inside a class __init__ function. This will cause a runtime error."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "error"
              },
              "help": {
                "text": "`return` should never appear inside a class __init__ function. This will cause a runtime error.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "`return` should never appear inside a class __init__ function. This will cause a runtime error.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.return-in-init"
                ]
              }
            },
            {
              "id": "7bcf681a-fbb2-3010-9bad-5b0194733eae",
              "name": "resources.rules.return-in-init",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.return-in-init"
              },
              "fullDescription": {
                "text": "`return` should never appear inside a class __init__ function. This will cause a runtime error."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "error"
              },
              "help": {
                "text": "`return` should never appear inside a class __init__ function. This will cause a runtime error.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "`return` should never appear inside a class __init__ function. This will cause a runtime error.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.return-in-init"
                ]
              }
            },
            {
              "id": "961616e1-6adc-3ee1-bdd4-2de95253b489",
              "name": "resources.rules.return-in-init",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.return-in-init"
              },
              "fullDescription": {
                "text": "`return` should never appear inside a class __init__ function. This will cause a runtime error."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "error"
              },
              "help": {
                "text": "`return` should never appear inside a class __init__ function. This will cause a runtime error.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "`return` should never appear inside a class __init__ function. This will cause a runtime error.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.return-in-init"
                ]
              }
            },
            {
              "id": "a907eb9a-1015-3d0e-b762-e1c18c474aec",
              "name": "resources.rules.return-in-init",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.return-in-init"
              },
              "fullDescription": {
                "text": "`return` should never appear inside a class __init__ function. This will cause a runtime error."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "error"
              },
              "help": {
                "text": "`return` should never appear inside a class __init__ function. This will cause a runtime error.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "`return` should never appear inside a class __init__ function. This will cause a runtime error.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.return-in-init"
                ]
              }
            },
            {
              "id": "c7eee1ec-9d3f-3f5b-8ee8-eb4afe43b92c",
              "name": "resources.rules.return-in-init",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.return-in-init"
              },
              "fullDescription": {
                "text": "`return` should never appear inside a class __init__ function. This will cause a runtime error."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "error"
              },
              "help": {
                "text": "`return` should never appear inside a class __init__ function. This will cause a runtime error.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "`return` should never appear inside a class __init__ function. This will cause a runtime error.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.return-in-init"
                ]
              }
            },
            {
              "id": "95aed026-c0fc-38c1-888c-9612d520167a",
              "name": "resources.rules.return-in-init",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.return-in-init"
              },
              "fullDescription": {
                "text": "`return` should never appear inside a class __init__ function. This will cause a runtime error."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "error"
              },
              "help": {
                "text": "`return` should never appear inside a class __init__ function. This will cause a runtime error.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "`return` should never appear inside a class __init__ function. This will cause a runtime error.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.return-in-init"
                ]
              }
            },
            {
              "id": "741db45c-113f-3c8c-89de-d53562e5ea38",
              "name": "resources.rules.dlint-catastrophic-redos",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.dlint-catastrophic-redos"
              },
              "fullDescription": {
                "text": "Regex `$X` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "error"
              },
              "help": {
                "text": "Regex `$X` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Regex `$X` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [https://r2c.dev/blog/2020/finding-python-redos-bugs-at-scale-using-dlint-and-r2c/](https://r2c.dev/blog/2020/finding-python-redos-bugs-at-scale-using-dlint-and-r2c/)\n - [https://r2c.dev/blog/2020/improving-redos-detection-with-dlint-and-r2c/](https://r2c.dev/blog/2020/improving-redos-detection-with-dlint-and-r2c/)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.dlint-catastrophic-redos"
                ]
              }
            },
            {
              "id": "df3f0d0c-a04f-3302-977b-4b826f9742bc",
              "name": "resources.rules.dlint-catastrophic-redos",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.dlint-catastrophic-redos"
              },
              "fullDescription": {
                "text": "Regex `$X` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "error"
              },
              "help": {
                "text": "Regex `$X` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Regex `$X` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [https://r2c.dev/blog/2020/finding-python-redos-bugs-at-scale-using-dlint-and-r2c/](https://r2c.dev/blog/2020/finding-python-redos-bugs-at-scale-using-dlint-and-r2c/)\n - [https://r2c.dev/blog/2020/improving-redos-detection-with-dlint-and-r2c/](https://r2c.dev/blog/2020/improving-redos-detection-with-dlint-and-r2c/)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.dlint-catastrophic-redos"
                ]
              }
            },
            {
              "id": "ee5d609c-906a-351a-8791-c1f76cc95481",
              "name": "resources.rules.dlint-catastrophic-redos",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.dlint-catastrophic-redos"
              },
              "fullDescription": {
                "text": "Regex `$X` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "error"
              },
              "help": {
                "text": "Regex `$X` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Regex `$X` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [https://r2c.dev/blog/2020/finding-python-redos-bugs-at-scale-using-dlint-and-r2c/](https://r2c.dev/blog/2020/finding-python-redos-bugs-at-scale-using-dlint-and-r2c/)\n - [https://r2c.dev/blog/2020/improving-redos-detection-with-dlint-and-r2c/](https://r2c.dev/blog/2020/improving-redos-detection-with-dlint-and-r2c/)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.dlint-catastrophic-redos"
                ]
              }
            },
            {
              "id": "897617bd-b923-338c-9815-258b6f2e1b18",
              "name": "resources.rules.return-not-in-function",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.return-not-in-function"
              },
              "fullDescription": {
                "text": "`return` only makes sense inside a function"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "help": {
                "text": "`return` only makes sense inside a function\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "`return` only makes sense inside a function\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.return-not-in-function"
                ]
              }
            },
            {
              "id": "1b3f0e86-23b1-3e13-9684-484b8eed8c10",
              "name": "resources.rules.return-not-in-function",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.return-not-in-function"
              },
              "fullDescription": {
                "text": "`return` only makes sense inside a function"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "help": {
                "text": "`return` only makes sense inside a function\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "`return` only makes sense inside a function\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.return-not-in-function"
                ]
              }
            },
            {
              "id": "3ac244f4-364e-3377-9401-cd0a220b6f44",
              "name": "resources.rules.return-not-in-function",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.return-not-in-function"
              },
              "fullDescription": {
                "text": "`return` only makes sense inside a function"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "help": {
                "text": "`return` only makes sense inside a function\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "`return` only makes sense inside a function\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.return-not-in-function"
                ]
              }
            },
            {
              "id": "dac0cb09-803e-38b7-94fe-3460a72dd30c",
              "name": "resources.rules.dlint-catastrophic-redos",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.dlint-catastrophic-redos"
              },
              "fullDescription": {
                "text": "Regex `$X` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "error"
              },
              "help": {
                "text": "Regex `$X` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Regex `$X` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [https://r2c.dev/blog/2020/finding-python-redos-bugs-at-scale-using-dlint-and-r2c/](https://r2c.dev/blog/2020/finding-python-redos-bugs-at-scale-using-dlint-and-r2c/)\n - [https://r2c.dev/blog/2020/improving-redos-detection-with-dlint-and-r2c/](https://r2c.dev/blog/2020/improving-redos-detection-with-dlint-and-r2c/)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.dlint-catastrophic-redos"
                ]
              }
            },
            {
              "id": "5716e0ef-393d-3d42-a9dd-715f408bd608",
              "name": "resources.rules.dlint-catastrophic-redos",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.dlint-catastrophic-redos"
              },
              "fullDescription": {
                "text": "Regex `$X` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "error"
              },
              "help": {
                "text": "Regex `$X` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Regex `$X` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [https://r2c.dev/blog/2020/finding-python-redos-bugs-at-scale-using-dlint-and-r2c/](https://r2c.dev/blog/2020/finding-python-redos-bugs-at-scale-using-dlint-and-r2c/)\n - [https://r2c.dev/blog/2020/improving-redos-detection-with-dlint-and-r2c/](https://r2c.dev/blog/2020/improving-redos-detection-with-dlint-and-r2c/)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.dlint-catastrophic-redos"
                ]
              }
            },
            {
              "id": "bb301043-1d20-39b6-90b7-e8945be3e468",
              "name": "resources.rules.dlint-catastrophic-redos",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.dlint-catastrophic-redos"
              },
              "fullDescription": {
                "text": "Regex `$X` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "error"
              },
              "help": {
                "text": "Regex `$X` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Regex `$X` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [https://r2c.dev/blog/2020/finding-python-redos-bugs-at-scale-using-dlint-and-r2c/](https://r2c.dev/blog/2020/finding-python-redos-bugs-at-scale-using-dlint-and-r2c/)\n - [https://r2c.dev/blog/2020/improving-redos-detection-with-dlint-and-r2c/](https://r2c.dev/blog/2020/improving-redos-detection-with-dlint-and-r2c/)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.dlint-catastrophic-redos"
                ]
              }
            },
            {
              "id": "26f9c058-9cb8-319b-b40a-e9f5c72d1156",
              "name": "resources.rules.dlint-catastrophic-redos",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.dlint-catastrophic-redos"
              },
              "fullDescription": {
                "text": "Regex `$X` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "error"
              },
              "help": {
                "text": "Regex `$X` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Regex `$X` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [https://r2c.dev/blog/2020/finding-python-redos-bugs-at-scale-using-dlint-and-r2c/](https://r2c.dev/blog/2020/finding-python-redos-bugs-at-scale-using-dlint-and-r2c/)\n - [https://r2c.dev/blog/2020/improving-redos-detection-with-dlint-and-r2c/](https://r2c.dev/blog/2020/improving-redos-detection-with-dlint-and-r2c/)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.dlint-catastrophic-redos"
                ]
              }
            },
            {
              "id": "c939ec6a-4f00-31b2-b076-e99f2e2490af",
              "name": "resources.rules.dlint-catastrophic-redos",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.dlint-catastrophic-redos"
              },
              "fullDescription": {
                "text": "Regex `$X` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "error"
              },
              "help": {
                "text": "Regex `$X` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Regex `$X` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [https://r2c.dev/blog/2020/finding-python-redos-bugs-at-scale-using-dlint-and-r2c/](https://r2c.dev/blog/2020/finding-python-redos-bugs-at-scale-using-dlint-and-r2c/)\n - [https://r2c.dev/blog/2020/improving-redos-detection-with-dlint-and-r2c/](https://r2c.dev/blog/2020/improving-redos-detection-with-dlint-and-r2c/)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.dlint-catastrophic-redos"
                ]
              }
            },
            {
              "id": "51fe07e6-0273-35e2-ad0d-25844e6dacdd",
              "name": "resources.rules.dlint-catastrophic-redos",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.dlint-catastrophic-redos"
              },
              "fullDescription": {
                "text": "Regex `$X` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "error"
              },
              "help": {
                "text": "Regex `$X` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Regex `$X` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [https://r2c.dev/blog/2020/finding-python-redos-bugs-at-scale-using-dlint-and-r2c/](https://r2c.dev/blog/2020/finding-python-redos-bugs-at-scale-using-dlint-and-r2c/)\n - [https://r2c.dev/blog/2020/improving-redos-detection-with-dlint-and-r2c/](https://r2c.dev/blog/2020/improving-redos-detection-with-dlint-and-r2c/)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.dlint-catastrophic-redos"
                ]
              }
            },
            {
              "id": "13c11e0b-9dcb-3b47-9fd1-54241d30bf4d",
              "name": "resources.rules.dlint-catastrophic-redos",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.dlint-catastrophic-redos"
              },
              "fullDescription": {
                "text": "Regex `$X` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "error"
              },
              "help": {
                "text": "Regex `$X` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Regex `$X` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [https://r2c.dev/blog/2020/finding-python-redos-bugs-at-scale-using-dlint-and-r2c/](https://r2c.dev/blog/2020/finding-python-redos-bugs-at-scale-using-dlint-and-r2c/)\n - [https://r2c.dev/blog/2020/improving-redos-detection-with-dlint-and-r2c/](https://r2c.dev/blog/2020/improving-redos-detection-with-dlint-and-r2c/)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.dlint-catastrophic-redos"
                ]
              }
            },
            {
              "id": "62c608f8-d7d5-33f1-a49b-a2e73a560014",
              "name": "resources.rules.missing-noopener",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.missing-noopener"
              },
              "fullDescription": {
                "text": "This anchor tag with 'target=\"_blank\"' is missing 'noopener'. A page opened with 'target=\"_blank\"' can access the window object of the origin page. This means it can manipulate the 'window.opener' property, which could redirect the origin page to a malicious URL. This is called reverse tabnabbing. To prevent this, include 'rel=noopener' on this tag"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "help": {
                "text": "This anchor tag with 'target=\"_blank\"' is missing 'noopener'. A page opened with 'target=\"_blank\"' can access the window object of the origin page. This means it can manipulate the 'window.opener' property, which could redirect the origin page to a malicious URL. This is called reverse tabnabbing. To prevent this, include 'rel=noopener' on this tag\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "This anchor tag with 'target=\"_blank\"' is missing 'noopener'. A page opened with 'target=\"_blank\"' can access the window object of the origin page. This means it can manipulate the 'window.opener' property, which could redirect the origin page to a malicious URL. This is called reverse tabnabbing. To prevent this, include 'rel=noopener' on this tag\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.missing-noopener"
                ]
              }
            },
            {
              "id": "762d4113-1096-35a8-aa72-1899d5133df4",
              "name": "resources.rules.return-in-init",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.return-in-init"
              },
              "fullDescription": {
                "text": "`return` should never appear inside a class __init__ function. This will cause a runtime error."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "error"
              },
              "help": {
                "text": "`return` should never appear inside a class __init__ function. This will cause a runtime error.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "`return` should never appear inside a class __init__ function. This will cause a runtime error.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.return-in-init"
                ]
              }
            },
            {
              "id": "024e246b-2b99-353f-b044-37cdcd799f4e",
              "name": "resources.rules.dangerous-system-call",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.dangerous-system-call"
              },
              "fullDescription": {
                "text": "Found dynamic content used in a system call. This is dangerous if external data can reach this function call because it allows a malicious actor to execute commands. Use the 'subprocess' module instead, which is easier to use without accidentally exposing a command injection vulnerability."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "help": {
                "text": "Found dynamic content used in a system call. This is dangerous if external data can reach this function call because it allows a malicious actor to execute commands. Use the 'subprocess' module instead, which is easier to use without accidentally exposing a command injection vulnerability.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Found dynamic content used in a system call. This is dangerous if external data can reach this function call because it allows a malicious actor to execute commands. Use the 'subprocess' module instead, which is easier to use without accidentally exposing a command injection vulnerability.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.dangerous-system-call"
                ]
              }
            },
            {
              "id": "f674a1be-1323-3ad0-8bf0-ccba65663fd7",
              "name": "resources.rules.raptor-signed-unsigned-conversion",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.raptor-signed-unsigned-conversion"
              },
              "fullDescription": {
                "text": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "help": {
                "text": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [https://cwe.mitre.org/data/definitions/195](https://cwe.mitre.org/data/definitions/195)\n - [https://cwe.mitre.org/data/definitions/196](https://cwe.mitre.org/data/definitions/196)\n - [https://cwe.mitre.org/data/definitions/194](https://cwe.mitre.org/data/definitions/194)\n - [https://cwe.mitre.org/data/definitions/191](https://cwe.mitre.org/data/definitions/191)\n - [https://cwe.mitre.org/data/definitions/681](https://cwe.mitre.org/data/definitions/681)\n - [https://cwe.mitre.org/data/definitions/789](https://cwe.mitre.org/data/definitions/789)\n - [https://g.co/kgs/PCHQjJ](https://g.co/kgs/PCHQjJ)\n - [https://github.com/struct/mms](https://github.com/struct/mms)\n - [https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf](https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf)\n - [http://www.phrack.org/issues/60/10.html#article](http://www.phrack.org/issues/60/10.html#article)\n - [https://docs.microsoft.com/en-us/cpp/sanitizers/asan-error-examples](https://docs.microsoft.com/en-us/cpp/sanitizers/asan-error-examples)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.raptor-signed-unsigned-conversion"
                ]
              }
            },
            {
              "id": "cc7088be-64f2-34e5-9827-554bb16ad4e7",
              "name": "resources.rules.raptor-signed-unsigned-conversion",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.raptor-signed-unsigned-conversion"
              },
              "fullDescription": {
                "text": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "help": {
                "text": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [https://cwe.mitre.org/data/definitions/195](https://cwe.mitre.org/data/definitions/195)\n - [https://cwe.mitre.org/data/definitions/196](https://cwe.mitre.org/data/definitions/196)\n - [https://cwe.mitre.org/data/definitions/194](https://cwe.mitre.org/data/definitions/194)\n - [https://cwe.mitre.org/data/definitions/191](https://cwe.mitre.org/data/definitions/191)\n - [https://cwe.mitre.org/data/definitions/681](https://cwe.mitre.org/data/definitions/681)\n - [https://cwe.mitre.org/data/definitions/789](https://cwe.mitre.org/data/definitions/789)\n - [https://g.co/kgs/PCHQjJ](https://g.co/kgs/PCHQjJ)\n - [https://github.com/struct/mms](https://github.com/struct/mms)\n - [https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf](https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf)\n - [http://www.phrack.org/issues/60/10.html#article](http://www.phrack.org/issues/60/10.html#article)\n - [https://docs.microsoft.com/en-us/cpp/sanitizers/asan-error-examples](https://docs.microsoft.com/en-us/cpp/sanitizers/asan-error-examples)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.raptor-signed-unsigned-conversion"
                ]
              }
            },
            {
              "id": "cb16855d-8e26-33b8-863c-6d9d7ab8657a",
              "name": "resources.rules.raptor-signed-unsigned-conversion",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.raptor-signed-unsigned-conversion"
              },
              "fullDescription": {
                "text": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "help": {
                "text": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [https://cwe.mitre.org/data/definitions/195](https://cwe.mitre.org/data/definitions/195)\n - [https://cwe.mitre.org/data/definitions/196](https://cwe.mitre.org/data/definitions/196)\n - [https://cwe.mitre.org/data/definitions/194](https://cwe.mitre.org/data/definitions/194)\n - [https://cwe.mitre.org/data/definitions/191](https://cwe.mitre.org/data/definitions/191)\n - [https://cwe.mitre.org/data/definitions/681](https://cwe.mitre.org/data/definitions/681)\n - [https://cwe.mitre.org/data/definitions/789](https://cwe.mitre.org/data/definitions/789)\n - [https://g.co/kgs/PCHQjJ](https://g.co/kgs/PCHQjJ)\n - [https://github.com/struct/mms](https://github.com/struct/mms)\n - [https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf](https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf)\n - [http://www.phrack.org/issues/60/10.html#article](http://www.phrack.org/issues/60/10.html#article)\n - [https://docs.microsoft.com/en-us/cpp/sanitizers/asan-error-examples](https://docs.microsoft.com/en-us/cpp/sanitizers/asan-error-examples)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.raptor-signed-unsigned-conversion"
                ]
              }
            },
            {
              "id": "9f117ca6-ac1f-3323-b5f1-1cba7110053a",
              "name": "resources.rules.raptor-signed-unsigned-conversion",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.raptor-signed-unsigned-conversion"
              },
              "fullDescription": {
                "text": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "help": {
                "text": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [https://cwe.mitre.org/data/definitions/195](https://cwe.mitre.org/data/definitions/195)\n - [https://cwe.mitre.org/data/definitions/196](https://cwe.mitre.org/data/definitions/196)\n - [https://cwe.mitre.org/data/definitions/194](https://cwe.mitre.org/data/definitions/194)\n - [https://cwe.mitre.org/data/definitions/191](https://cwe.mitre.org/data/definitions/191)\n - [https://cwe.mitre.org/data/definitions/681](https://cwe.mitre.org/data/definitions/681)\n - [https://cwe.mitre.org/data/definitions/789](https://cwe.mitre.org/data/definitions/789)\n - [https://g.co/kgs/PCHQjJ](https://g.co/kgs/PCHQjJ)\n - [https://github.com/struct/mms](https://github.com/struct/mms)\n - [https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf](https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf)\n - [http://www.phrack.org/issues/60/10.html#article](http://www.phrack.org/issues/60/10.html#article)\n - [https://docs.microsoft.com/en-us/cpp/sanitizers/asan-error-examples](https://docs.microsoft.com/en-us/cpp/sanitizers/asan-error-examples)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.raptor-signed-unsigned-conversion"
                ]
              }
            },
            {
              "id": "049b9fbd-15b0-365e-9c23-a37a25814cfe",
              "name": "resources.rules.raptor-signed-unsigned-conversion",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.raptor-signed-unsigned-conversion"
              },
              "fullDescription": {
                "text": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "help": {
                "text": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [https://cwe.mitre.org/data/definitions/195](https://cwe.mitre.org/data/definitions/195)\n - [https://cwe.mitre.org/data/definitions/196](https://cwe.mitre.org/data/definitions/196)\n - [https://cwe.mitre.org/data/definitions/194](https://cwe.mitre.org/data/definitions/194)\n - [https://cwe.mitre.org/data/definitions/191](https://cwe.mitre.org/data/definitions/191)\n - [https://cwe.mitre.org/data/definitions/681](https://cwe.mitre.org/data/definitions/681)\n - [https://cwe.mitre.org/data/definitions/789](https://cwe.mitre.org/data/definitions/789)\n - [https://g.co/kgs/PCHQjJ](https://g.co/kgs/PCHQjJ)\n - [https://github.com/struct/mms](https://github.com/struct/mms)\n - [https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf](https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf)\n - [http://www.phrack.org/issues/60/10.html#article](http://www.phrack.org/issues/60/10.html#article)\n - [https://docs.microsoft.com/en-us/cpp/sanitizers/asan-error-examples](https://docs.microsoft.com/en-us/cpp/sanitizers/asan-error-examples)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.raptor-signed-unsigned-conversion"
                ]
              }
            },
            {
              "id": "440a2396-eccf-374b-861c-8b45ba9b9e2b",
              "name": "resources.rules.return-not-in-function",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.return-not-in-function"
              },
              "fullDescription": {
                "text": "`return` only makes sense inside a function"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "help": {
                "text": "`return` only makes sense inside a function\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "`return` only makes sense inside a function\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.return-not-in-function"
                ]
              }
            },
            {
              "id": "81e1b57c-863a-37ee-9fa9-b7933a4318dd",
              "name": "resources.rules.return-not-in-function",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.return-not-in-function"
              },
              "fullDescription": {
                "text": "`return` only makes sense inside a function"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "help": {
                "text": "`return` only makes sense inside a function\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "`return` only makes sense inside a function\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.return-not-in-function"
                ]
              }
            },
            {
              "id": "ba56d593-785e-3f1b-9247-bc00387b0275",
              "name": "resources.rules.return-not-in-function",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.return-not-in-function"
              },
              "fullDescription": {
                "text": "`return` only makes sense inside a function"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "help": {
                "text": "`return` only makes sense inside a function\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "`return` only makes sense inside a function\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.return-not-in-function"
                ]
              }
            },
            {
              "id": "0078f444-3539-3e36-bb95-90e2dad19f6c",
              "name": "resources.rules.return-not-in-function",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.return-not-in-function"
              },
              "fullDescription": {
                "text": "`return` only makes sense inside a function"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "help": {
                "text": "`return` only makes sense inside a function\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "`return` only makes sense inside a function\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.return-not-in-function"
                ]
              }
            },
            {
              "id": "65c9fa44-b02b-3e76-a926-31e788c53eba",
              "name": "resources.rules.hardcoded-tmp-path",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.hardcoded-tmp-path"
              },
              "fullDescription": {
                "text": "Detected hardcoded temp directory. Consider using 'tempfile.TemporaryFile' instead.\n"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "help": {
                "text": "Detected hardcoded temp directory. Consider using 'tempfile.TemporaryFile' instead.\n\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Detected hardcoded temp directory. Consider using 'tempfile.TemporaryFile' instead.\n\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [https://docs.python.org/3/library/tempfile.html#tempfile.TemporaryFile](https://docs.python.org/3/library/tempfile.html#tempfile.TemporaryFile)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.hardcoded-tmp-path"
                ]
              }
            },
            {
              "id": "fe691fef-893f-3e37-9e36-15a4c3b8527d",
              "name": "resources.rules.hardcoded-tmp-path",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.hardcoded-tmp-path"
              },
              "fullDescription": {
                "text": "Detected hardcoded temp directory. Consider using 'tempfile.TemporaryFile' instead.\n"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "help": {
                "text": "Detected hardcoded temp directory. Consider using 'tempfile.TemporaryFile' instead.\n\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Detected hardcoded temp directory. Consider using 'tempfile.TemporaryFile' instead.\n\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [https://docs.python.org/3/library/tempfile.html#tempfile.TemporaryFile](https://docs.python.org/3/library/tempfile.html#tempfile.TemporaryFile)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.hardcoded-tmp-path"
                ]
              }
            },
            {
              "id": "5b677208-b447-3fdd-8722-f448082ecbb4",
              "name": "resources.rules.hardcoded-tmp-path",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.hardcoded-tmp-path"
              },
              "fullDescription": {
                "text": "Detected hardcoded temp directory. Consider using 'tempfile.TemporaryFile' instead.\n"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "help": {
                "text": "Detected hardcoded temp directory. Consider using 'tempfile.TemporaryFile' instead.\n\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Detected hardcoded temp directory. Consider using 'tempfile.TemporaryFile' instead.\n\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [https://docs.python.org/3/library/tempfile.html#tempfile.TemporaryFile](https://docs.python.org/3/library/tempfile.html#tempfile.TemporaryFile)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.hardcoded-tmp-path"
                ]
              }
            },
            {
              "id": "468ea742-ca7c-3825-84c8-fe8376ce79b4",
              "name": "resources.rules.raptor-memory-address-exposure",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.raptor-memory-address-exposure"
              },
              "fullDescription": {
                "text": "The software generates an error message that includes sensitive information about its environment, users, or associated data. In particular, exposure of memory addresses might defeat ASLR."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "note"
              },
              "help": {
                "text": "The software generates an error message that includes sensitive information about its environment, users, or associated data. In particular, exposure of memory addresses might defeat ASLR.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "The software generates an error message that includes sensitive information about its environment, users, or associated data. In particular, exposure of memory addresses might defeat ASLR.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [https://cwe.mitre.org/data/definitions/200](https://cwe.mitre.org/data/definitions/200)\n - [https://cwe.mitre.org/data/definitions/209](https://cwe.mitre.org/data/definitions/209)\n - [https://cwe.mitre.org/data/definitions/497](https://cwe.mitre.org/data/definitions/497)\n - [https://github.com/struct/mms](https://github.com/struct/mms)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.raptor-memory-address-exposure"
                ]
              }
            },
            {
              "id": "6e208bd5-ba8b-3f86-bd1c-00477286e5d8",
              "name": "resources.rules.raptor-interesting-api-calls",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.raptor-interesting-api-calls"
              },
              "fullDescription": {
                "text": "Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "help": {
                "text": "Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [https://github.com/0xdea/ghidra-scripts/blob/main/Rhabdomancer.java](https://github.com/0xdea/ghidra-scripts/blob/main/Rhabdomancer.java)\n - [https://github.com/x509cert/banned/blob/master/banned.h](https://github.com/x509cert/banned/blob/master/banned.h)\n - [https://g.co/kgs/PCHQjJ](https://g.co/kgs/PCHQjJ)\n - [https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf](https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf)\n - [https://learn.microsoft.com/en-us/windows-hardware/drivers/devtest/28719-banned-api-usage-use-updated-function-replacement](https://learn.microsoft.com/en-us/windows-hardware/drivers/devtest/28719-banned-api-usage-use-updated-function-replacement)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.raptor-interesting-api-calls"
                ]
              }
            },
            {
              "id": "1ca27c79-5bb5-39d6-ac79-034ef6583f5c",
              "name": "resources.rules.raptor-interesting-api-calls",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.raptor-interesting-api-calls"
              },
              "fullDescription": {
                "text": "Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "help": {
                "text": "Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [https://github.com/0xdea/ghidra-scripts/blob/main/Rhabdomancer.java](https://github.com/0xdea/ghidra-scripts/blob/main/Rhabdomancer.java)\n - [https://github.com/x509cert/banned/blob/master/banned.h](https://github.com/x509cert/banned/blob/master/banned.h)\n - [https://g.co/kgs/PCHQjJ](https://g.co/kgs/PCHQjJ)\n - [https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf](https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf)\n - [https://learn.microsoft.com/en-us/windows-hardware/drivers/devtest/28719-banned-api-usage-use-updated-function-replacement](https://learn.microsoft.com/en-us/windows-hardware/drivers/devtest/28719-banned-api-usage-use-updated-function-replacement)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.raptor-interesting-api-calls"
                ]
              }
            },
            {
              "id": "4e52ff20-f480-3d1a-a531-c6e9cc59b882",
              "name": "resources.rules.raptor-integer-truncation",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.raptor-integer-truncation"
              },
              "fullDescription": {
                "text": "Truncation errors occur when a primitive is cast to a primitive of a  smaller size and data is lost in the conversion. The value cannot be  trusted and the application will be in an undefined state."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "help": {
                "text": "Truncation errors occur when a primitive is cast to a primitive of a  smaller size and data is lost in the conversion. The value cannot be  trusted and the application will be in an undefined state.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Truncation errors occur when a primitive is cast to a primitive of a  smaller size and data is lost in the conversion. The value cannot be  trusted and the application will be in an undefined state.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [https://cwe.mitre.org/data/definitions/197](https://cwe.mitre.org/data/definitions/197)\n - [https://cwe.mitre.org/data/definitions/681](https://cwe.mitre.org/data/definitions/681)\n - [https://g.co/kgs/PCHQjJ](https://g.co/kgs/PCHQjJ)\n - [https://github.com/struct/mms](https://github.com/struct/mms)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.raptor-integer-truncation"
                ]
              }
            },
            {
              "id": "14b307a7-f7e1-3ad6-8fc9-f46537b5a188",
              "name": "resources.rules.return-in-init",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.return-in-init"
              },
              "fullDescription": {
                "text": "`return` should never appear inside a class __init__ function. This will cause a runtime error."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "error"
              },
              "help": {
                "text": "`return` should never appear inside a class __init__ function. This will cause a runtime error.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "`return` should never appear inside a class __init__ function. This will cause a runtime error.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.return-in-init"
                ]
              }
            },
            {
              "id": "d2ddd085-3fad-341d-a035-af3e17179d9f",
              "name": "resources.rules.return-in-init",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.return-in-init"
              },
              "fullDescription": {
                "text": "`return` should never appear inside a class __init__ function. This will cause a runtime error."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "error"
              },
              "help": {
                "text": "`return` should never appear inside a class __init__ function. This will cause a runtime error.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "`return` should never appear inside a class __init__ function. This will cause a runtime error.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.return-in-init"
                ]
              }
            },
            {
              "id": "365a1497-6bfb-35b9-af99-805962712334",
              "name": "resources.rules.return-in-init",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.return-in-init"
              },
              "fullDescription": {
                "text": "`return` should never appear inside a class __init__ function. This will cause a runtime error."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "error"
              },
              "help": {
                "text": "`return` should never appear inside a class __init__ function. This will cause a runtime error.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "`return` should never appear inside a class __init__ function. This will cause a runtime error.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.return-in-init"
                ]
              }
            },
            {
              "id": "36f4a8c5-29d9-3ef9-9fda-8fe618125291",
              "name": "resources.rules.return-in-init",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.return-in-init"
              },
              "fullDescription": {
                "text": "`return` should never appear inside a class __init__ function. This will cause a runtime error."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "error"
              },
              "help": {
                "text": "`return` should never appear inside a class __init__ function. This will cause a runtime error.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "`return` should never appear inside a class __init__ function. This will cause a runtime error.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.return-in-init"
                ]
              }
            },
            {
              "id": "8296cc61-d75a-3fc1-944e-2db1e7b757d6",
              "name": "resources.rules.return-in-init",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.return-in-init"
              },
              "fullDescription": {
                "text": "`return` should never appear inside a class __init__ function. This will cause a runtime error."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "error"
              },
              "help": {
                "text": "`return` should never appear inside a class __init__ function. This will cause a runtime error.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "`return` should never appear inside a class __init__ function. This will cause a runtime error.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.return-in-init"
                ]
              }
            },
            {
              "id": "1d492b92-bc5d-3a62-9b88-29747a6034f1",
              "name": "resources.rules.dlint-catastrophic-redos",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.dlint-catastrophic-redos"
              },
              "fullDescription": {
                "text": "Regex `$X` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "error"
              },
              "help": {
                "text": "Regex `$X` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Regex `$X` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [https://r2c.dev/blog/2020/finding-python-redos-bugs-at-scale-using-dlint-and-r2c/](https://r2c.dev/blog/2020/finding-python-redos-bugs-at-scale-using-dlint-and-r2c/)\n - [https://r2c.dev/blog/2020/improving-redos-detection-with-dlint-and-r2c/](https://r2c.dev/blog/2020/improving-redos-detection-with-dlint-and-r2c/)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.dlint-catastrophic-redos"
                ]
              }
            },
            {
              "id": "58a047bd-74bd-3282-aa9c-f0fd6e17bc68",
              "name": "resources.rules.dlint-catastrophic-redos",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.dlint-catastrophic-redos"
              },
              "fullDescription": {
                "text": "Regex `$X` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "error"
              },
              "help": {
                "text": "Regex `$X` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Regex `$X` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [https://r2c.dev/blog/2020/finding-python-redos-bugs-at-scale-using-dlint-and-r2c/](https://r2c.dev/blog/2020/finding-python-redos-bugs-at-scale-using-dlint-and-r2c/)\n - [https://r2c.dev/blog/2020/improving-redos-detection-with-dlint-and-r2c/](https://r2c.dev/blog/2020/improving-redos-detection-with-dlint-and-r2c/)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.dlint-catastrophic-redos"
                ]
              }
            },
            {
              "id": "32bb6c1e-6db5-3e6e-bc40-43251d8d3d25",
              "name": "python.lang.security.dangerous-globals-use.dangerous-globals-use",
              "shortDescription": {
                "text": "Opengrep Finding: python.lang.security.dangerous-globals-use.dangerous-globals-use"
              },
              "fullDescription": {
                "text": "Found non static data as an index to 'globals()'. This is extremely dangerous because it allows an attacker to execute arbitrary code on the system. Refactor your code not to use 'globals()'."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://semgrep.dev/r/python.lang.security.dangerous-globals-use.dangerous-globals-use",
              "help": {
                "text": "Found non static data as an index to 'globals()'. This is extremely dangerous because it allows an attacker to execute arbitrary code on the system. Refactor your code not to use 'globals()'.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Found non static data as an index to 'globals()'. This is extremely dangerous because it allows an attacker to execute arbitrary code on the system. Refactor your code not to use 'globals()'.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/python.lang.security.dangerous-globals-use.dangerous-globals-use)\n - [https://github.com/mpirnat/lets-be-bad-guys/blob/d92768fb3ade32956abd53bd6bb06e19d634a084/badguys/vulnerable/views.py#L181-L186](https://github.com/mpirnat/lets-be-bad-guys/blob/d92768fb3ade32956abd53bd6bb06e19d634a084/badguys/vulnerable/views.py#L181-L186)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "python.lang.security.dangerous-globals-use.dangerous-globals-use"
                ]
              }
            },
            {
              "id": "5cf3f41b-ba08-3991-a08f-9319184d76dc",
              "name": "resources.rules.open-never-closed",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.open-never-closed"
              },
              "fullDescription": {
                "text": "file object opened without corresponding close"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "error"
              },
              "help": {
                "text": "file object opened without corresponding close\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "file object opened without corresponding close\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.open-never-closed"
                ]
              }
            },
            {
              "id": "26d73781-7633-3159-9e57-1584d7997ec5",
              "name": "python.lang.security.deserialization.pickle.avoid-pickle",
              "shortDescription": {
                "text": "Opengrep Finding: python.lang.security.deserialization.pickle.avoid-pickle"
              },
              "fullDescription": {
                "text": "Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://semgrep.dev/r/python.lang.security.deserialization.pickle.avoid-pickle",
              "help": {
                "text": "Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/python.lang.security.deserialization.pickle.avoid-pickle)\n - [https://docs.python.org/3/library/pickle.html](https://docs.python.org/3/library/pickle.html)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "python.lang.security.deserialization.pickle.avoid-pickle"
                ]
              }
            },
            {
              "id": "bfb5132b-5a22-3cc5-9893-6637393e2842",
              "name": "python.lang.security.deserialization.pickle.avoid-pickle",
              "shortDescription": {
                "text": "Opengrep Finding: python.lang.security.deserialization.pickle.avoid-pickle"
              },
              "fullDescription": {
                "text": "Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://semgrep.dev/r/python.lang.security.deserialization.pickle.avoid-pickle",
              "help": {
                "text": "Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/python.lang.security.deserialization.pickle.avoid-pickle)\n - [https://docs.python.org/3/library/pickle.html](https://docs.python.org/3/library/pickle.html)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "python.lang.security.deserialization.pickle.avoid-pickle"
                ]
              }
            },
            {
              "id": "c20dad82-585e-3f9c-a369-5fb166d64989",
              "name": "resources.rules.hardcoded-tmp-path",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.hardcoded-tmp-path"
              },
              "fullDescription": {
                "text": "Detected hardcoded temp directory. Consider using 'tempfile.TemporaryFile' instead.\n"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "help": {
                "text": "Detected hardcoded temp directory. Consider using 'tempfile.TemporaryFile' instead.\n\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Detected hardcoded temp directory. Consider using 'tempfile.TemporaryFile' instead.\n\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [https://docs.python.org/3/library/tempfile.html#tempfile.TemporaryFile](https://docs.python.org/3/library/tempfile.html#tempfile.TemporaryFile)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.hardcoded-tmp-path"
                ]
              }
            },
            {
              "id": "1750f7d8-40e7-383c-9c9d-5920f4467bc6",
              "name": "resources.rules.pass-body-range",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.pass-body-range"
              },
              "fullDescription": {
                "text": "`pass` is the body of for $X in $Y. Consider removing this or raise NotImplementedError() if this is a TODO"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "help": {
                "text": "`pass` is the body of for $X in $Y. Consider removing this or raise NotImplementedError() if this is a TODO\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "`pass` is the body of for $X in $Y. Consider removing this or raise NotImplementedError() if this is a TODO\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.pass-body-range"
                ]
              }
            },
            {
              "id": "ff62ca1f-446e-3e7e-8e83-8c9d87d2ebc9",
              "name": "resources.rules.pass-body-range",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.pass-body-range"
              },
              "fullDescription": {
                "text": "`pass` is the body of for $X in $Y. Consider removing this or raise NotImplementedError() if this is a TODO"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "help": {
                "text": "`pass` is the body of for $X in $Y. Consider removing this or raise NotImplementedError() if this is a TODO\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "`pass` is the body of for $X in $Y. Consider removing this or raise NotImplementedError() if this is a TODO\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.pass-body-range"
                ]
              }
            },
            {
              "id": "6f51d769-8e36-3cec-9840-b1ae04e34ed9",
              "name": "resources.rules.insecure-tarfile-use",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.insecure-tarfile-use"
              },
              "fullDescription": {
                "text": "The Python 'tarfile' extract|extractall functions are vulnerable to arbitrary file overwrites"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "help": {
                "text": "The Python 'tarfile' extract|extractall functions are vulnerable to arbitrary file overwrites\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "The Python 'tarfile' extract|extractall functions are vulnerable to arbitrary file overwrites\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.insecure-tarfile-use"
                ]
              }
            },
            {
              "id": "a399b98b-4095-3df9-b84f-a9be1d8c6518",
              "name": "python.lang.security.deserialization.pickle.avoid-pickle",
              "shortDescription": {
                "text": "Opengrep Finding: python.lang.security.deserialization.pickle.avoid-pickle"
              },
              "fullDescription": {
                "text": "Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://semgrep.dev/r/python.lang.security.deserialization.pickle.avoid-pickle",
              "help": {
                "text": "Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/python.lang.security.deserialization.pickle.avoid-pickle)\n - [https://docs.python.org/3/library/pickle.html](https://docs.python.org/3/library/pickle.html)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "python.lang.security.deserialization.pickle.avoid-pickle"
                ]
              }
            },
            {
              "id": "3459d2f2-86ab-35f3-924d-6965dba5ce2d",
              "name": "python.lang.security.deserialization.pickle.avoid-pickle",
              "shortDescription": {
                "text": "Opengrep Finding: python.lang.security.deserialization.pickle.avoid-pickle"
              },
              "fullDescription": {
                "text": "Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://semgrep.dev/r/python.lang.security.deserialization.pickle.avoid-pickle",
              "help": {
                "text": "Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/python.lang.security.deserialization.pickle.avoid-pickle)\n - [https://docs.python.org/3/library/pickle.html](https://docs.python.org/3/library/pickle.html)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "python.lang.security.deserialization.pickle.avoid-pickle"
                ]
              }
            },
            {
              "id": "328558a9-c8d6-3faf-b276-36bad525cac6",
              "name": "python.lang.security.deserialization.pickle.avoid-pickle",
              "shortDescription": {
                "text": "Opengrep Finding: python.lang.security.deserialization.pickle.avoid-pickle"
              },
              "fullDescription": {
                "text": "Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://semgrep.dev/r/python.lang.security.deserialization.pickle.avoid-pickle",
              "help": {
                "text": "Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/python.lang.security.deserialization.pickle.avoid-pickle)\n - [https://docs.python.org/3/library/pickle.html](https://docs.python.org/3/library/pickle.html)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "python.lang.security.deserialization.pickle.avoid-pickle"
                ]
              }
            },
            {
              "id": "f65391ed-dfb4-3531-bcbc-0ed92beabdfe",
              "name": "resources.rules.insecure-tarfile-use",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.insecure-tarfile-use"
              },
              "fullDescription": {
                "text": "The Python 'tarfile' extract|extractall functions are vulnerable to arbitrary file overwrites"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "help": {
                "text": "The Python 'tarfile' extract|extractall functions are vulnerable to arbitrary file overwrites\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "The Python 'tarfile' extract|extractall functions are vulnerable to arbitrary file overwrites\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.insecure-tarfile-use"
                ]
              }
            },
            {
              "id": "e35699bf-23e4-3a15-85ad-d25b403377c7",
              "name": "resources.rules.insecure-hash-algorithm-md5",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.insecure-hash-algorithm-md5"
              },
              "fullDescription": {
                "text": "Detected MD5 hash algorithm which is considered insecure. MD5 is not\ncollision resistant and is therefore not suitable as a cryptographic\nsignature. Use SHA256 or SHA3 instead.\n"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "help": {
                "text": "Detected MD5 hash algorithm which is considered insecure. MD5 is not\ncollision resistant and is therefore not suitable as a cryptographic\nsignature. Use SHA256 or SHA3 instead.\n\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Detected MD5 hash algorithm which is considered insecure. MD5 is not\ncollision resistant and is therefore not suitable as a cryptographic\nsignature. Use SHA256 or SHA3 instead.\n\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [https://tools.ietf.org/html/rfc6151](https://tools.ietf.org/html/rfc6151)\n - [https://crypto.stackexchange.com/questions/44151/how-does-the-flame-malware-take-advantage-of-md5-collision](https://crypto.stackexchange.com/questions/44151/how-does-the-flame-malware-take-advantage-of-md5-collision)\n - [https://pycryptodome.readthedocs.io/en/latest/src/hash/sha3_256.html](https://pycryptodome.readthedocs.io/en/latest/src/hash/sha3_256.html)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.insecure-hash-algorithm-md5"
                ]
              }
            },
            {
              "id": "5deeacd2-5683-3c16-8121-268b2a11dedc",
              "name": "resources.rules.use-sys-exit",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.use-sys-exit"
              },
              "fullDescription": {
                "text": "Use `sys.exit` over the python shell `exit` built-in. `exit` is a helper for the interactive shell and may not be available on all Python implementations. https://stackoverflow.com/questions/6501121/difference-between-exit-and-sys-exit-in-python"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "help": {
                "text": "Use `sys.exit` over the python shell `exit` built-in. `exit` is a helper for the interactive shell and may not be available on all Python implementations. https://stackoverflow.com/questions/6501121/difference-between-exit-and-sys-exit-in-python\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Use `sys.exit` over the python shell `exit` built-in. `exit` is a helper for the interactive shell and may not be available on all Python implementations. https://stackoverflow.com/questions/6501121/difference-between-exit-and-sys-exit-in-python\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.use-sys-exit"
                ]
              }
            },
            {
              "id": "a7108619-24c4-3231-a6fa-bc5a5b84b961",
              "name": "resources.rules.use-sys-exit",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.use-sys-exit"
              },
              "fullDescription": {
                "text": "Use `sys.exit` over the python shell `exit` built-in. `exit` is a helper for the interactive shell and may not be available on all Python implementations. https://stackoverflow.com/questions/6501121/difference-between-exit-and-sys-exit-in-python"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "help": {
                "text": "Use `sys.exit` over the python shell `exit` built-in. `exit` is a helper for the interactive shell and may not be available on all Python implementations. https://stackoverflow.com/questions/6501121/difference-between-exit-and-sys-exit-in-python\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Use `sys.exit` over the python shell `exit` built-in. `exit` is a helper for the interactive shell and may not be available on all Python implementations. https://stackoverflow.com/questions/6501121/difference-between-exit-and-sys-exit-in-python\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.use-sys-exit"
                ]
              }
            },
            {
              "id": "36350bd2-753e-3dbe-aac2-3c9112b617f9",
              "name": "python.lang.security.audit.formatted-sql-query.formatted-sql-query",
              "shortDescription": {
                "text": "Opengrep Finding: python.lang.security.audit.formatted-sql-query.formatted-sql-query"
              },
              "fullDescription": {
                "text": "Detected possible formatted SQL query. Use parameterized queries instead."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://semgrep.dev/r/python.lang.security.audit.formatted-sql-query.formatted-sql-query",
              "help": {
                "text": "Detected possible formatted SQL query. Use parameterized queries instead.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Detected possible formatted SQL query. Use parameterized queries instead.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/python.lang.security.audit.formatted-sql-query.formatted-sql-query)\n - [https://stackoverflow.com/questions/775296/mysql-parameterized-queries](https://stackoverflow.com/questions/775296/mysql-parameterized-queries)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "python.lang.security.audit.formatted-sql-query.formatted-sql-query"
                ]
              }
            },
            {
              "id": "b334b3eb-6141-35b8-8259-94f64a620d51",
              "name": "python.lang.security.audit.formatted-sql-query.formatted-sql-query",
              "shortDescription": {
                "text": "Opengrep Finding: python.lang.security.audit.formatted-sql-query.formatted-sql-query"
              },
              "fullDescription": {
                "text": "Detected possible formatted SQL query. Use parameterized queries instead."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://semgrep.dev/r/python.lang.security.audit.formatted-sql-query.formatted-sql-query",
              "help": {
                "text": "Detected possible formatted SQL query. Use parameterized queries instead.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Detected possible formatted SQL query. Use parameterized queries instead.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/python.lang.security.audit.formatted-sql-query.formatted-sql-query)\n - [https://stackoverflow.com/questions/775296/mysql-parameterized-queries](https://stackoverflow.com/questions/775296/mysql-parameterized-queries)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "python.lang.security.audit.formatted-sql-query.formatted-sql-query"
                ]
              }
            },
            {
              "id": "aaa12889-72fd-32af-825d-1d22f502fab7",
              "name": "python.lang.security.deserialization.pickle.avoid-pickle",
              "shortDescription": {
                "text": "Opengrep Finding: python.lang.security.deserialization.pickle.avoid-pickle"
              },
              "fullDescription": {
                "text": "Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://semgrep.dev/r/python.lang.security.deserialization.pickle.avoid-pickle",
              "help": {
                "text": "Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/python.lang.security.deserialization.pickle.avoid-pickle)\n - [https://docs.python.org/3/library/pickle.html](https://docs.python.org/3/library/pickle.html)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "python.lang.security.deserialization.pickle.avoid-pickle"
                ]
              }
            },
            {
              "id": "0a9042ef-d8cb-3b8f-8026-48e280506afb",
              "name": "resources.rules.return-not-in-function",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.return-not-in-function"
              },
              "fullDescription": {
                "text": "`return` only makes sense inside a function"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "help": {
                "text": "`return` only makes sense inside a function\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "`return` only makes sense inside a function\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.return-not-in-function"
                ]
              }
            },
            {
              "id": "d175a391-b061-3126-b214-1127d533effb",
              "name": "resources.rules.raptor-interesting-api-calls",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.raptor-interesting-api-calls"
              },
              "fullDescription": {
                "text": "Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "help": {
                "text": "Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [https://github.com/0xdea/ghidra-scripts/blob/main/Rhabdomancer.java](https://github.com/0xdea/ghidra-scripts/blob/main/Rhabdomancer.java)\n - [https://github.com/x509cert/banned/blob/master/banned.h](https://github.com/x509cert/banned/blob/master/banned.h)\n - [https://g.co/kgs/PCHQjJ](https://g.co/kgs/PCHQjJ)\n - [https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf](https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf)\n - [https://learn.microsoft.com/en-us/windows-hardware/drivers/devtest/28719-banned-api-usage-use-updated-function-replacement](https://learn.microsoft.com/en-us/windows-hardware/drivers/devtest/28719-banned-api-usage-use-updated-function-replacement)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.raptor-interesting-api-calls"
                ]
              }
            },
            {
              "id": "e742a749-6851-367a-9c1b-f90e17b03046",
              "name": "resources.rules.raptor-interesting-api-calls",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.raptor-interesting-api-calls"
              },
              "fullDescription": {
                "text": "Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "help": {
                "text": "Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [https://github.com/0xdea/ghidra-scripts/blob/main/Rhabdomancer.java](https://github.com/0xdea/ghidra-scripts/blob/main/Rhabdomancer.java)\n - [https://github.com/x509cert/banned/blob/master/banned.h](https://github.com/x509cert/banned/blob/master/banned.h)\n - [https://g.co/kgs/PCHQjJ](https://g.co/kgs/PCHQjJ)\n - [https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf](https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf)\n - [https://learn.microsoft.com/en-us/windows-hardware/drivers/devtest/28719-banned-api-usage-use-updated-function-replacement](https://learn.microsoft.com/en-us/windows-hardware/drivers/devtest/28719-banned-api-usage-use-updated-function-replacement)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.raptor-interesting-api-calls"
                ]
              }
            },
            {
              "id": "953488b6-4f6e-38df-8ff8-3cb061a020ac",
              "name": "resources.rules.raptor-interesting-api-calls",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.raptor-interesting-api-calls"
              },
              "fullDescription": {
                "text": "Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "help": {
                "text": "Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [https://github.com/0xdea/ghidra-scripts/blob/main/Rhabdomancer.java](https://github.com/0xdea/ghidra-scripts/blob/main/Rhabdomancer.java)\n - [https://github.com/x509cert/banned/blob/master/banned.h](https://github.com/x509cert/banned/blob/master/banned.h)\n - [https://g.co/kgs/PCHQjJ](https://g.co/kgs/PCHQjJ)\n - [https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf](https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf)\n - [https://learn.microsoft.com/en-us/windows-hardware/drivers/devtest/28719-banned-api-usage-use-updated-function-replacement](https://learn.microsoft.com/en-us/windows-hardware/drivers/devtest/28719-banned-api-usage-use-updated-function-replacement)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.raptor-interesting-api-calls"
                ]
              }
            },
            {
              "id": "21e9e36d-6ea9-36f3-b876-aca2bddb14d6",
              "name": "resources.rules.raptor-interesting-api-calls",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.raptor-interesting-api-calls"
              },
              "fullDescription": {
                "text": "Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "help": {
                "text": "Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [https://github.com/0xdea/ghidra-scripts/blob/main/Rhabdomancer.java](https://github.com/0xdea/ghidra-scripts/blob/main/Rhabdomancer.java)\n - [https://github.com/x509cert/banned/blob/master/banned.h](https://github.com/x509cert/banned/blob/master/banned.h)\n - [https://g.co/kgs/PCHQjJ](https://g.co/kgs/PCHQjJ)\n - [https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf](https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf)\n - [https://learn.microsoft.com/en-us/windows-hardware/drivers/devtest/28719-banned-api-usage-use-updated-function-replacement](https://learn.microsoft.com/en-us/windows-hardware/drivers/devtest/28719-banned-api-usage-use-updated-function-replacement)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.raptor-interesting-api-calls"
                ]
              }
            },
            {
              "id": "05d41032-34bc-3e28-a16c-ffadd2bade8b",
              "name": "resources.rules.raptor-write-into-stack-buffer",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.raptor-write-into-stack-buffer"
              },
              "fullDescription": {
                "text": "The software directly writes into a stack buffer. This might lead to a stack-based buffer overflow."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "note"
              },
              "help": {
                "text": "The software directly writes into a stack buffer. This might lead to a stack-based buffer overflow.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "The software directly writes into a stack buffer. This might lead to a stack-based buffer overflow.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [https://cwe.mitre.org/data/definitions/121](https://cwe.mitre.org/data/definitions/121)\n - [https://github.com/googleprojectzero/weggli](https://github.com/googleprojectzero/weggli)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.raptor-write-into-stack-buffer"
                ]
              }
            },
            {
              "id": "1f4d8778-9aa9-396b-9c09-df47a266be8e",
              "name": "resources.rules.hardcoded-tmp-path",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.hardcoded-tmp-path"
              },
              "fullDescription": {
                "text": "Detected hardcoded temp directory. Consider using 'tempfile.TemporaryFile' instead.\n"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "help": {
                "text": "Detected hardcoded temp directory. Consider using 'tempfile.TemporaryFile' instead.\n\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Detected hardcoded temp directory. Consider using 'tempfile.TemporaryFile' instead.\n\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [https://docs.python.org/3/library/tempfile.html#tempfile.TemporaryFile](https://docs.python.org/3/library/tempfile.html#tempfile.TemporaryFile)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.hardcoded-tmp-path"
                ]
              }
            },
            {
              "id": "a201ab28-82ec-3f91-b073-e852f777ef39",
              "name": "resources.rules.return-not-in-function",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.return-not-in-function"
              },
              "fullDescription": {
                "text": "`return` only makes sense inside a function"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "help": {
                "text": "`return` only makes sense inside a function\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "`return` only makes sense inside a function\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.return-not-in-function"
                ]
              }
            },
            {
              "id": "f189ab78-6ea6-3eb7-a221-1e67180b99fb",
              "name": "resources.rules.return-not-in-function",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.return-not-in-function"
              },
              "fullDescription": {
                "text": "`return` only makes sense inside a function"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "help": {
                "text": "`return` only makes sense inside a function\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "`return` only makes sense inside a function\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.return-not-in-function"
                ]
              }
            },
            {
              "id": "aef62f53-e51a-344c-823a-713412092791",
              "name": "resources.rules.return-not-in-function",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.return-not-in-function"
              },
              "fullDescription": {
                "text": "`return` only makes sense inside a function"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "help": {
                "text": "`return` only makes sense inside a function\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "`return` only makes sense inside a function\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.return-not-in-function"
                ]
              }
            },
            {
              "id": "b277da45-ded2-380d-b8d7-6e3d74caa6c7",
              "name": "resources.rules.return-not-in-function",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.return-not-in-function"
              },
              "fullDescription": {
                "text": "`return` only makes sense inside a function"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "help": {
                "text": "`return` only makes sense inside a function\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "`return` only makes sense inside a function\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.return-not-in-function"
                ]
              }
            },
            {
              "id": "a0e7a235-d8a3-335c-84ad-883c2869c351",
              "name": "resources.rules.dlint-catastrophic-redos",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.dlint-catastrophic-redos"
              },
              "fullDescription": {
                "text": "Regex `$X` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "error"
              },
              "help": {
                "text": "Regex `$X` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Regex `$X` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [https://r2c.dev/blog/2020/finding-python-redos-bugs-at-scale-using-dlint-and-r2c/](https://r2c.dev/blog/2020/finding-python-redos-bugs-at-scale-using-dlint-and-r2c/)\n - [https://r2c.dev/blog/2020/improving-redos-detection-with-dlint-and-r2c/](https://r2c.dev/blog/2020/improving-redos-detection-with-dlint-and-r2c/)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.dlint-catastrophic-redos"
                ]
              }
            },
            {
              "id": "a4d21c95-abc0-31d0-b90c-658a9bc87f3f",
              "name": "resources.rules.missing-ratelimit",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.missing-ratelimit"
              },
              "fullDescription": {
                "text": "Function '$FUNC' is missing a rate-limiting decorator.\nHigh volume traffic to this function could starve application\nresources. Consider adding rate limiting from a library such\nas 'django-ratelimit'.\n"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "help": {
                "text": "Function '$FUNC' is missing a rate-limiting decorator.\nHigh volume traffic to this function could starve application\nresources. Consider adding rate limiting from a library such\nas 'django-ratelimit'.\n\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Function '$FUNC' is missing a rate-limiting decorator.\nHigh volume traffic to this function could starve application\nresources. Consider adding rate limiting from a library such\nas 'django-ratelimit'.\n\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [https://github.com/jsocol/django-ratelimit/blob/main/docs/index.rst#quickstart](https://github.com/jsocol/django-ratelimit/blob/main/docs/index.rst#quickstart)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.missing-ratelimit"
                ]
              }
            },
            {
              "id": "b21275ff-27eb-3824-80ca-2940da54cf06",
              "name": "resources.rules.raptor-signed-unsigned-conversion",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.raptor-signed-unsigned-conversion"
              },
              "fullDescription": {
                "text": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "help": {
                "text": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [https://cwe.mitre.org/data/definitions/195](https://cwe.mitre.org/data/definitions/195)\n - [https://cwe.mitre.org/data/definitions/196](https://cwe.mitre.org/data/definitions/196)\n - [https://cwe.mitre.org/data/definitions/194](https://cwe.mitre.org/data/definitions/194)\n - [https://cwe.mitre.org/data/definitions/191](https://cwe.mitre.org/data/definitions/191)\n - [https://cwe.mitre.org/data/definitions/681](https://cwe.mitre.org/data/definitions/681)\n - [https://cwe.mitre.org/data/definitions/789](https://cwe.mitre.org/data/definitions/789)\n - [https://g.co/kgs/PCHQjJ](https://g.co/kgs/PCHQjJ)\n - [https://github.com/struct/mms](https://github.com/struct/mms)\n - [https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf](https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf)\n - [http://www.phrack.org/issues/60/10.html#article](http://www.phrack.org/issues/60/10.html#article)\n - [https://docs.microsoft.com/en-us/cpp/sanitizers/asan-error-examples](https://docs.microsoft.com/en-us/cpp/sanitizers/asan-error-examples)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.raptor-signed-unsigned-conversion"
                ]
              }
            },
            {
              "id": "7d634454-576c-38a5-89b4-cbf2c2817c20",
              "name": "resources.rules.raptor-signed-unsigned-conversion",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.raptor-signed-unsigned-conversion"
              },
              "fullDescription": {
                "text": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "help": {
                "text": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [https://cwe.mitre.org/data/definitions/195](https://cwe.mitre.org/data/definitions/195)\n - [https://cwe.mitre.org/data/definitions/196](https://cwe.mitre.org/data/definitions/196)\n - [https://cwe.mitre.org/data/definitions/194](https://cwe.mitre.org/data/definitions/194)\n - [https://cwe.mitre.org/data/definitions/191](https://cwe.mitre.org/data/definitions/191)\n - [https://cwe.mitre.org/data/definitions/681](https://cwe.mitre.org/data/definitions/681)\n - [https://cwe.mitre.org/data/definitions/789](https://cwe.mitre.org/data/definitions/789)\n - [https://g.co/kgs/PCHQjJ](https://g.co/kgs/PCHQjJ)\n - [https://github.com/struct/mms](https://github.com/struct/mms)\n - [https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf](https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf)\n - [http://www.phrack.org/issues/60/10.html#article](http://www.phrack.org/issues/60/10.html#article)\n - [https://docs.microsoft.com/en-us/cpp/sanitizers/asan-error-examples](https://docs.microsoft.com/en-us/cpp/sanitizers/asan-error-examples)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.raptor-signed-unsigned-conversion"
                ]
              }
            },
            {
              "id": "5fb7fd06-28cf-3491-ab2f-2842b0ffcfad",
              "name": "resources.rules.raptor-signed-unsigned-conversion",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.raptor-signed-unsigned-conversion"
              },
              "fullDescription": {
                "text": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "help": {
                "text": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [https://cwe.mitre.org/data/definitions/195](https://cwe.mitre.org/data/definitions/195)\n - [https://cwe.mitre.org/data/definitions/196](https://cwe.mitre.org/data/definitions/196)\n - [https://cwe.mitre.org/data/definitions/194](https://cwe.mitre.org/data/definitions/194)\n - [https://cwe.mitre.org/data/definitions/191](https://cwe.mitre.org/data/definitions/191)\n - [https://cwe.mitre.org/data/definitions/681](https://cwe.mitre.org/data/definitions/681)\n - [https://cwe.mitre.org/data/definitions/789](https://cwe.mitre.org/data/definitions/789)\n - [https://g.co/kgs/PCHQjJ](https://g.co/kgs/PCHQjJ)\n - [https://github.com/struct/mms](https://github.com/struct/mms)\n - [https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf](https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf)\n - [http://www.phrack.org/issues/60/10.html#article](http://www.phrack.org/issues/60/10.html#article)\n - [https://docs.microsoft.com/en-us/cpp/sanitizers/asan-error-examples](https://docs.microsoft.com/en-us/cpp/sanitizers/asan-error-examples)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.raptor-signed-unsigned-conversion"
                ]
              }
            },
            {
              "id": "5e3f484d-0679-372d-8f2a-30a5036ee320",
              "name": "resources.rules.raptor-signed-unsigned-conversion",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.raptor-signed-unsigned-conversion"
              },
              "fullDescription": {
                "text": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "help": {
                "text": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [https://cwe.mitre.org/data/definitions/195](https://cwe.mitre.org/data/definitions/195)\n - [https://cwe.mitre.org/data/definitions/196](https://cwe.mitre.org/data/definitions/196)\n - [https://cwe.mitre.org/data/definitions/194](https://cwe.mitre.org/data/definitions/194)\n - [https://cwe.mitre.org/data/definitions/191](https://cwe.mitre.org/data/definitions/191)\n - [https://cwe.mitre.org/data/definitions/681](https://cwe.mitre.org/data/definitions/681)\n - [https://cwe.mitre.org/data/definitions/789](https://cwe.mitre.org/data/definitions/789)\n - [https://g.co/kgs/PCHQjJ](https://g.co/kgs/PCHQjJ)\n - [https://github.com/struct/mms](https://github.com/struct/mms)\n - [https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf](https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf)\n - [http://www.phrack.org/issues/60/10.html#article](http://www.phrack.org/issues/60/10.html#article)\n - [https://docs.microsoft.com/en-us/cpp/sanitizers/asan-error-examples](https://docs.microsoft.com/en-us/cpp/sanitizers/asan-error-examples)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.raptor-signed-unsigned-conversion"
                ]
              }
            },
            {
              "id": "9a88a4be-07d9-30e3-9f6a-1f60dfc30931",
              "name": "resources.rules.raptor-signed-unsigned-conversion",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.raptor-signed-unsigned-conversion"
              },
              "fullDescription": {
                "text": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "help": {
                "text": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [https://cwe.mitre.org/data/definitions/195](https://cwe.mitre.org/data/definitions/195)\n - [https://cwe.mitre.org/data/definitions/196](https://cwe.mitre.org/data/definitions/196)\n - [https://cwe.mitre.org/data/definitions/194](https://cwe.mitre.org/data/definitions/194)\n - [https://cwe.mitre.org/data/definitions/191](https://cwe.mitre.org/data/definitions/191)\n - [https://cwe.mitre.org/data/definitions/681](https://cwe.mitre.org/data/definitions/681)\n - [https://cwe.mitre.org/data/definitions/789](https://cwe.mitre.org/data/definitions/789)\n - [https://g.co/kgs/PCHQjJ](https://g.co/kgs/PCHQjJ)\n - [https://github.com/struct/mms](https://github.com/struct/mms)\n - [https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf](https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf)\n - [http://www.phrack.org/issues/60/10.html#article](http://www.phrack.org/issues/60/10.html#article)\n - [https://docs.microsoft.com/en-us/cpp/sanitizers/asan-error-examples](https://docs.microsoft.com/en-us/cpp/sanitizers/asan-error-examples)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.raptor-signed-unsigned-conversion"
                ]
              }
            },
            {
              "id": "2e465ec7-b31e-3601-96ac-a43a9f087ed7",
              "name": "resources.rules.raptor-signed-unsigned-conversion",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.raptor-signed-unsigned-conversion"
              },
              "fullDescription": {
                "text": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "help": {
                "text": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [https://cwe.mitre.org/data/definitions/195](https://cwe.mitre.org/data/definitions/195)\n - [https://cwe.mitre.org/data/definitions/196](https://cwe.mitre.org/data/definitions/196)\n - [https://cwe.mitre.org/data/definitions/194](https://cwe.mitre.org/data/definitions/194)\n - [https://cwe.mitre.org/data/definitions/191](https://cwe.mitre.org/data/definitions/191)\n - [https://cwe.mitre.org/data/definitions/681](https://cwe.mitre.org/data/definitions/681)\n - [https://cwe.mitre.org/data/definitions/789](https://cwe.mitre.org/data/definitions/789)\n - [https://g.co/kgs/PCHQjJ](https://g.co/kgs/PCHQjJ)\n - [https://github.com/struct/mms](https://github.com/struct/mms)\n - [https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf](https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf)\n - [http://www.phrack.org/issues/60/10.html#article](http://www.phrack.org/issues/60/10.html#article)\n - [https://docs.microsoft.com/en-us/cpp/sanitizers/asan-error-examples](https://docs.microsoft.com/en-us/cpp/sanitizers/asan-error-examples)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.raptor-signed-unsigned-conversion"
                ]
              }
            },
            {
              "id": "ffa2b6bf-be3f-381b-a82a-c2ea3726a226",
              "name": "resources.rules.raptor-signed-unsigned-conversion",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.raptor-signed-unsigned-conversion"
              },
              "fullDescription": {
                "text": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "help": {
                "text": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [https://cwe.mitre.org/data/definitions/195](https://cwe.mitre.org/data/definitions/195)\n - [https://cwe.mitre.org/data/definitions/196](https://cwe.mitre.org/data/definitions/196)\n - [https://cwe.mitre.org/data/definitions/194](https://cwe.mitre.org/data/definitions/194)\n - [https://cwe.mitre.org/data/definitions/191](https://cwe.mitre.org/data/definitions/191)\n - [https://cwe.mitre.org/data/definitions/681](https://cwe.mitre.org/data/definitions/681)\n - [https://cwe.mitre.org/data/definitions/789](https://cwe.mitre.org/data/definitions/789)\n - [https://g.co/kgs/PCHQjJ](https://g.co/kgs/PCHQjJ)\n - [https://github.com/struct/mms](https://github.com/struct/mms)\n - [https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf](https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf)\n - [http://www.phrack.org/issues/60/10.html#article](http://www.phrack.org/issues/60/10.html#article)\n - [https://docs.microsoft.com/en-us/cpp/sanitizers/asan-error-examples](https://docs.microsoft.com/en-us/cpp/sanitizers/asan-error-examples)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.raptor-signed-unsigned-conversion"
                ]
              }
            },
            {
              "id": "3b8b8d26-d774-3eeb-9b8e-4bc723090b08",
              "name": "resources.rules.raptor-signed-unsigned-conversion",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.raptor-signed-unsigned-conversion"
              },
              "fullDescription": {
                "text": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "help": {
                "text": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [https://cwe.mitre.org/data/definitions/195](https://cwe.mitre.org/data/definitions/195)\n - [https://cwe.mitre.org/data/definitions/196](https://cwe.mitre.org/data/definitions/196)\n - [https://cwe.mitre.org/data/definitions/194](https://cwe.mitre.org/data/definitions/194)\n - [https://cwe.mitre.org/data/definitions/191](https://cwe.mitre.org/data/definitions/191)\n - [https://cwe.mitre.org/data/definitions/681](https://cwe.mitre.org/data/definitions/681)\n - [https://cwe.mitre.org/data/definitions/789](https://cwe.mitre.org/data/definitions/789)\n - [https://g.co/kgs/PCHQjJ](https://g.co/kgs/PCHQjJ)\n - [https://github.com/struct/mms](https://github.com/struct/mms)\n - [https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf](https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf)\n - [http://www.phrack.org/issues/60/10.html#article](http://www.phrack.org/issues/60/10.html#article)\n - [https://docs.microsoft.com/en-us/cpp/sanitizers/asan-error-examples](https://docs.microsoft.com/en-us/cpp/sanitizers/asan-error-examples)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.raptor-signed-unsigned-conversion"
                ]
              }
            },
            {
              "id": "3411cbb4-907f-3e96-bf27-eab851e1b139",
              "name": "resources.rules.raptor-signed-unsigned-conversion",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.raptor-signed-unsigned-conversion"
              },
              "fullDescription": {
                "text": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "help": {
                "text": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [https://cwe.mitre.org/data/definitions/195](https://cwe.mitre.org/data/definitions/195)\n - [https://cwe.mitre.org/data/definitions/196](https://cwe.mitre.org/data/definitions/196)\n - [https://cwe.mitre.org/data/definitions/194](https://cwe.mitre.org/data/definitions/194)\n - [https://cwe.mitre.org/data/definitions/191](https://cwe.mitre.org/data/definitions/191)\n - [https://cwe.mitre.org/data/definitions/681](https://cwe.mitre.org/data/definitions/681)\n - [https://cwe.mitre.org/data/definitions/789](https://cwe.mitre.org/data/definitions/789)\n - [https://g.co/kgs/PCHQjJ](https://g.co/kgs/PCHQjJ)\n - [https://github.com/struct/mms](https://github.com/struct/mms)\n - [https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf](https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf)\n - [http://www.phrack.org/issues/60/10.html#article](http://www.phrack.org/issues/60/10.html#article)\n - [https://docs.microsoft.com/en-us/cpp/sanitizers/asan-error-examples](https://docs.microsoft.com/en-us/cpp/sanitizers/asan-error-examples)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.raptor-signed-unsigned-conversion"
                ]
              }
            },
            {
              "id": "61ea94a8-0602-3314-b6fd-f9a85ba5eca4",
              "name": "resources.rules.raptor-signed-unsigned-conversion",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.raptor-signed-unsigned-conversion"
              },
              "fullDescription": {
                "text": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "help": {
                "text": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [https://cwe.mitre.org/data/definitions/195](https://cwe.mitre.org/data/definitions/195)\n - [https://cwe.mitre.org/data/definitions/196](https://cwe.mitre.org/data/definitions/196)\n - [https://cwe.mitre.org/data/definitions/194](https://cwe.mitre.org/data/definitions/194)\n - [https://cwe.mitre.org/data/definitions/191](https://cwe.mitre.org/data/definitions/191)\n - [https://cwe.mitre.org/data/definitions/681](https://cwe.mitre.org/data/definitions/681)\n - [https://cwe.mitre.org/data/definitions/789](https://cwe.mitre.org/data/definitions/789)\n - [https://g.co/kgs/PCHQjJ](https://g.co/kgs/PCHQjJ)\n - [https://github.com/struct/mms](https://github.com/struct/mms)\n - [https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf](https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf)\n - [http://www.phrack.org/issues/60/10.html#article](http://www.phrack.org/issues/60/10.html#article)\n - [https://docs.microsoft.com/en-us/cpp/sanitizers/asan-error-examples](https://docs.microsoft.com/en-us/cpp/sanitizers/asan-error-examples)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.raptor-signed-unsigned-conversion"
                ]
              }
            },
            {
              "id": "fce7dcb8-56c6-3291-b6d2-7a9330e9eb2e",
              "name": "resources.rules.raptor-signed-unsigned-conversion",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.raptor-signed-unsigned-conversion"
              },
              "fullDescription": {
                "text": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "help": {
                "text": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [https://cwe.mitre.org/data/definitions/195](https://cwe.mitre.org/data/definitions/195)\n - [https://cwe.mitre.org/data/definitions/196](https://cwe.mitre.org/data/definitions/196)\n - [https://cwe.mitre.org/data/definitions/194](https://cwe.mitre.org/data/definitions/194)\n - [https://cwe.mitre.org/data/definitions/191](https://cwe.mitre.org/data/definitions/191)\n - [https://cwe.mitre.org/data/definitions/681](https://cwe.mitre.org/data/definitions/681)\n - [https://cwe.mitre.org/data/definitions/789](https://cwe.mitre.org/data/definitions/789)\n - [https://g.co/kgs/PCHQjJ](https://g.co/kgs/PCHQjJ)\n - [https://github.com/struct/mms](https://github.com/struct/mms)\n - [https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf](https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf)\n - [http://www.phrack.org/issues/60/10.html#article](http://www.phrack.org/issues/60/10.html#article)\n - [https://docs.microsoft.com/en-us/cpp/sanitizers/asan-error-examples](https://docs.microsoft.com/en-us/cpp/sanitizers/asan-error-examples)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.raptor-signed-unsigned-conversion"
                ]
              }
            },
            {
              "id": "3705b3c4-d3d2-3196-b82b-bdfce8fff38e",
              "name": "resources.rules.raptor-signed-unsigned-conversion",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.raptor-signed-unsigned-conversion"
              },
              "fullDescription": {
                "text": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "help": {
                "text": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [https://cwe.mitre.org/data/definitions/195](https://cwe.mitre.org/data/definitions/195)\n - [https://cwe.mitre.org/data/definitions/196](https://cwe.mitre.org/data/definitions/196)\n - [https://cwe.mitre.org/data/definitions/194](https://cwe.mitre.org/data/definitions/194)\n - [https://cwe.mitre.org/data/definitions/191](https://cwe.mitre.org/data/definitions/191)\n - [https://cwe.mitre.org/data/definitions/681](https://cwe.mitre.org/data/definitions/681)\n - [https://cwe.mitre.org/data/definitions/789](https://cwe.mitre.org/data/definitions/789)\n - [https://g.co/kgs/PCHQjJ](https://g.co/kgs/PCHQjJ)\n - [https://github.com/struct/mms](https://github.com/struct/mms)\n - [https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf](https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf)\n - [http://www.phrack.org/issues/60/10.html#article](http://www.phrack.org/issues/60/10.html#article)\n - [https://docs.microsoft.com/en-us/cpp/sanitizers/asan-error-examples](https://docs.microsoft.com/en-us/cpp/sanitizers/asan-error-examples)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.raptor-signed-unsigned-conversion"
                ]
              }
            },
            {
              "id": "866d00a5-f9a5-30cc-83e9-4b32bdfa9612",
              "name": "resources.rules.raptor-signed-unsigned-conversion",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.raptor-signed-unsigned-conversion"
              },
              "fullDescription": {
                "text": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "help": {
                "text": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [https://cwe.mitre.org/data/definitions/195](https://cwe.mitre.org/data/definitions/195)\n - [https://cwe.mitre.org/data/definitions/196](https://cwe.mitre.org/data/definitions/196)\n - [https://cwe.mitre.org/data/definitions/194](https://cwe.mitre.org/data/definitions/194)\n - [https://cwe.mitre.org/data/definitions/191](https://cwe.mitre.org/data/definitions/191)\n - [https://cwe.mitre.org/data/definitions/681](https://cwe.mitre.org/data/definitions/681)\n - [https://cwe.mitre.org/data/definitions/789](https://cwe.mitre.org/data/definitions/789)\n - [https://g.co/kgs/PCHQjJ](https://g.co/kgs/PCHQjJ)\n - [https://github.com/struct/mms](https://github.com/struct/mms)\n - [https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf](https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf)\n - [http://www.phrack.org/issues/60/10.html#article](http://www.phrack.org/issues/60/10.html#article)\n - [https://docs.microsoft.com/en-us/cpp/sanitizers/asan-error-examples](https://docs.microsoft.com/en-us/cpp/sanitizers/asan-error-examples)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.raptor-signed-unsigned-conversion"
                ]
              }
            },
            {
              "id": "43e3b6a1-a094-388e-90a3-ef7b456f2fb2",
              "name": "resources.rules.dlint-catastrophic-redos",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.dlint-catastrophic-redos"
              },
              "fullDescription": {
                "text": "Regex `$X` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "error"
              },
              "help": {
                "text": "Regex `$X` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Regex `$X` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [https://r2c.dev/blog/2020/finding-python-redos-bugs-at-scale-using-dlint-and-r2c/](https://r2c.dev/blog/2020/finding-python-redos-bugs-at-scale-using-dlint-and-r2c/)\n - [https://r2c.dev/blog/2020/improving-redos-detection-with-dlint-and-r2c/](https://r2c.dev/blog/2020/improving-redos-detection-with-dlint-and-r2c/)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.dlint-catastrophic-redos"
                ]
              }
            },
            {
              "id": "b59c380a-0899-3841-9000-5940ed3f30b9",
              "name": "resources.rules.arbitrary-sleep",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.arbitrary-sleep"
              },
              "fullDescription": {
                "text": "time.sleep() call; did you mean to leave this in?"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "error"
              },
              "help": {
                "text": "time.sleep() call; did you mean to leave this in?\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "time.sleep() call; did you mean to leave this in?\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.arbitrary-sleep"
                ]
              }
            },
            {
              "id": "249c4b30-4ea8-31a1-95e7-fe5441ef11a8",
              "name": "resources.rules.use-sys-exit",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.use-sys-exit"
              },
              "fullDescription": {
                "text": "Use `sys.exit` over the python shell `exit` built-in. `exit` is a helper for the interactive shell and may not be available on all Python implementations. https://stackoverflow.com/questions/6501121/difference-between-exit-and-sys-exit-in-python"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "help": {
                "text": "Use `sys.exit` over the python shell `exit` built-in. `exit` is a helper for the interactive shell and may not be available on all Python implementations. https://stackoverflow.com/questions/6501121/difference-between-exit-and-sys-exit-in-python\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Use `sys.exit` over the python shell `exit` built-in. `exit` is a helper for the interactive shell and may not be available on all Python implementations. https://stackoverflow.com/questions/6501121/difference-between-exit-and-sys-exit-in-python\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.use-sys-exit"
                ]
              }
            },
            {
              "id": "639ec970-8346-3ccf-bd8b-4fcb2f87effb",
              "name": "resources.rules.arbitrary-sleep",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.arbitrary-sleep"
              },
              "fullDescription": {
                "text": "time.sleep() call; did you mean to leave this in?"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "error"
              },
              "help": {
                "text": "time.sleep() call; did you mean to leave this in?\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "time.sleep() call; did you mean to leave this in?\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.arbitrary-sleep"
                ]
              }
            },
            {
              "id": "1cf05756-91d9-3357-96d5-0624c520704f",
              "name": "trailofbits.python.pickles-in-pytorch.pickles-in-pytorch",
              "shortDescription": {
                "text": "Opengrep Finding: trailofbits.python.pickles-in-pytorch.pickles-in-pytorch"
              },
              "fullDescription": {
                "text": "Functions reliant on pickle can result in arbitrary code execution.  Consider loading from `state_dict`, using fickling, or switching to a safer serialization method like ONNX"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "error"
              },
              "helpUri": "https://semgrep.dev/r/trailofbits.python.pickles-in-pytorch.pickles-in-pytorch",
              "help": {
                "text": "Functions reliant on pickle can result in arbitrary code execution.  Consider loading from `state_dict`, using fickling, or switching to a safer serialization method like ONNX\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Functions reliant on pickle can result in arbitrary code execution.  Consider loading from `state_dict`, using fickling, or switching to a safer serialization method like ONNX\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/trailofbits.python.pickles-in-pytorch.pickles-in-pytorch)\n - [https://blog.trailofbits.com/2021/03/15/never-a-dill-moment-exploiting-machine-learning-pickle-files/](https://blog.trailofbits.com/2021/03/15/never-a-dill-moment-exploiting-machine-learning-pickle-files/)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "trailofbits.python.pickles-in-pytorch.pickles-in-pytorch"
                ]
              }
            },
            {
              "id": "c839a7cd-ea81-3173-acc1-df5bc3d93f30",
              "name": "resources.rules.return-in-init",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.return-in-init"
              },
              "fullDescription": {
                "text": "`return` should never appear inside a class __init__ function. This will cause a runtime error."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "error"
              },
              "help": {
                "text": "`return` should never appear inside a class __init__ function. This will cause a runtime error.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "`return` should never appear inside a class __init__ function. This will cause a runtime error.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.return-in-init"
                ]
              }
            },
            {
              "id": "508ba444-99ca-3bd7-b39d-1648fd1b3e55",
              "name": "resources.rules.return-in-init",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.return-in-init"
              },
              "fullDescription": {
                "text": "`return` should never appear inside a class __init__ function. This will cause a runtime error."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "error"
              },
              "help": {
                "text": "`return` should never appear inside a class __init__ function. This will cause a runtime error.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "`return` should never appear inside a class __init__ function. This will cause a runtime error.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.return-in-init"
                ]
              }
            },
            {
              "id": "b5c22e1f-c984-35aa-bbea-8e005187a2be",
              "name": "resources.rules.detected-facebook-oauth",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.detected-facebook-oauth"
              },
              "fullDescription": {
                "text": "Facebook OAuth detected"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "error"
              },
              "help": {
                "text": "Facebook OAuth detected\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Facebook OAuth detected\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.detected-facebook-oauth"
                ]
              }
            },
            {
              "id": "8c7093e3-5c9f-3cfb-895c-fa59587e8997",
              "name": "resources.rules.dlint-catastrophic-redos",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.dlint-catastrophic-redos"
              },
              "fullDescription": {
                "text": "Regex `$X` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "error"
              },
              "help": {
                "text": "Regex `$X` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Regex `$X` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [https://r2c.dev/blog/2020/finding-python-redos-bugs-at-scale-using-dlint-and-r2c/](https://r2c.dev/blog/2020/finding-python-redos-bugs-at-scale-using-dlint-and-r2c/)\n - [https://r2c.dev/blog/2020/improving-redos-detection-with-dlint-and-r2c/](https://r2c.dev/blog/2020/improving-redos-detection-with-dlint-and-r2c/)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.dlint-catastrophic-redos"
                ]
              }
            },
            {
              "id": "e02ef670-e975-3c54-9ec5-980db72c050b",
              "name": "resources.rules.dlint-catastrophic-redos",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.dlint-catastrophic-redos"
              },
              "fullDescription": {
                "text": "Regex `$X` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "error"
              },
              "help": {
                "text": "Regex `$X` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Regex `$X` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [https://r2c.dev/blog/2020/finding-python-redos-bugs-at-scale-using-dlint-and-r2c/](https://r2c.dev/blog/2020/finding-python-redos-bugs-at-scale-using-dlint-and-r2c/)\n - [https://r2c.dev/blog/2020/improving-redos-detection-with-dlint-and-r2c/](https://r2c.dev/blog/2020/improving-redos-detection-with-dlint-and-r2c/)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.dlint-catastrophic-redos"
                ]
              }
            },
            {
              "id": "9fba8483-0c6c-344f-85d4-108758509ca5",
              "name": "resources.rules.dlint-catastrophic-redos",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.dlint-catastrophic-redos"
              },
              "fullDescription": {
                "text": "Regex `$X` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "error"
              },
              "help": {
                "text": "Regex `$X` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Regex `$X` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [https://r2c.dev/blog/2020/finding-python-redos-bugs-at-scale-using-dlint-and-r2c/](https://r2c.dev/blog/2020/finding-python-redos-bugs-at-scale-using-dlint-and-r2c/)\n - [https://r2c.dev/blog/2020/improving-redos-detection-with-dlint-and-r2c/](https://r2c.dev/blog/2020/improving-redos-detection-with-dlint-and-r2c/)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.dlint-catastrophic-redos"
                ]
              }
            },
            {
              "id": "f8541ac1-357a-3190-90d6-2f32a5a4a935",
              "name": "resources.rules.dlint-catastrophic-redos",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.dlint-catastrophic-redos"
              },
              "fullDescription": {
                "text": "Regex `$X` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "error"
              },
              "help": {
                "text": "Regex `$X` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Regex `$X` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [https://r2c.dev/blog/2020/finding-python-redos-bugs-at-scale-using-dlint-and-r2c/](https://r2c.dev/blog/2020/finding-python-redos-bugs-at-scale-using-dlint-and-r2c/)\n - [https://r2c.dev/blog/2020/improving-redos-detection-with-dlint-and-r2c/](https://r2c.dev/blog/2020/improving-redos-detection-with-dlint-and-r2c/)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.dlint-catastrophic-redos"
                ]
              }
            },
            {
              "id": "503bca0b-68cb-32eb-84ec-12aaac12029e",
              "name": "resources.rules.return-not-in-function",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.return-not-in-function"
              },
              "fullDescription": {
                "text": "`return` only makes sense inside a function"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "help": {
                "text": "`return` only makes sense inside a function\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "`return` only makes sense inside a function\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.return-not-in-function"
                ]
              }
            },
            {
              "id": "5a23e375-4dbf-39e3-9837-8d44f69d42bd",
              "name": "resources.rules.return-not-in-function",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.return-not-in-function"
              },
              "fullDescription": {
                "text": "`return` only makes sense inside a function"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "help": {
                "text": "`return` only makes sense inside a function\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "`return` only makes sense inside a function\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.return-not-in-function"
                ]
              }
            },
            {
              "id": "940bc7b1-6220-357f-81dd-94bbd7c9587c",
              "name": "resources.rules.return-not-in-function",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.return-not-in-function"
              },
              "fullDescription": {
                "text": "`return` only makes sense inside a function"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "help": {
                "text": "`return` only makes sense inside a function\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "`return` only makes sense inside a function\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.return-not-in-function"
                ]
              }
            },
            {
              "id": "1f0926f1-a553-33b7-ae74-f0d6973d6dab",
              "name": "resources.rules.return-not-in-function",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.return-not-in-function"
              },
              "fullDescription": {
                "text": "`return` only makes sense inside a function"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "help": {
                "text": "`return` only makes sense inside a function\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "`return` only makes sense inside a function\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.return-not-in-function"
                ]
              }
            },
            {
              "id": "32ffea9f-6e0c-39a1-84dc-9ec1481787e9",
              "name": "resources.rules.return-not-in-function",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.return-not-in-function"
              },
              "fullDescription": {
                "text": "`return` only makes sense inside a function"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "help": {
                "text": "`return` only makes sense inside a function\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "`return` only makes sense inside a function\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.return-not-in-function"
                ]
              }
            },
            {
              "id": "24990133-d4e0-35e0-a8cd-ace2c393a060",
              "name": "resources.rules.return-not-in-function",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.return-not-in-function"
              },
              "fullDescription": {
                "text": "`return` only makes sense inside a function"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "help": {
                "text": "`return` only makes sense inside a function\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "`return` only makes sense inside a function\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.return-not-in-function"
                ]
              }
            },
            {
              "id": "c1590fa3-e7a7-33e2-b8e9-a36edadf0efd",
              "name": "resources.rules.return-in-init",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.return-in-init"
              },
              "fullDescription": {
                "text": "`return` should never appear inside a class __init__ function. This will cause a runtime error."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "error"
              },
              "help": {
                "text": "`return` should never appear inside a class __init__ function. This will cause a runtime error.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "`return` should never appear inside a class __init__ function. This will cause a runtime error.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.return-in-init"
                ]
              }
            },
            {
              "id": "fbc0857a-4043-3557-8485-2f09b9d39b0e",
              "name": "resources.rules.return-in-init",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.return-in-init"
              },
              "fullDescription": {
                "text": "`return` should never appear inside a class __init__ function. This will cause a runtime error."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "error"
              },
              "help": {
                "text": "`return` should never appear inside a class __init__ function. This will cause a runtime error.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "`return` should never appear inside a class __init__ function. This will cause a runtime error.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.return-in-init"
                ]
              }
            },
            {
              "id": "766e1df9-1b9b-3b55-ac80-30f7dbeed859",
              "name": "resources.rules.return-in-init",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.return-in-init"
              },
              "fullDescription": {
                "text": "`return` should never appear inside a class __init__ function. This will cause a runtime error."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "error"
              },
              "help": {
                "text": "`return` should never appear inside a class __init__ function. This will cause a runtime error.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "`return` should never appear inside a class __init__ function. This will cause a runtime error.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.return-in-init"
                ]
              }
            },
            {
              "id": "62a75619-4319-3de7-85c9-2e527b633425",
              "name": "trailofbits.python.pickles-in-pytorch.pickles-in-pytorch",
              "shortDescription": {
                "text": "Opengrep Finding: trailofbits.python.pickles-in-pytorch.pickles-in-pytorch"
              },
              "fullDescription": {
                "text": "Functions reliant on pickle can result in arbitrary code execution.  Consider loading from `state_dict`, using fickling, or switching to a safer serialization method like ONNX"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "error"
              },
              "helpUri": "https://semgrep.dev/r/trailofbits.python.pickles-in-pytorch.pickles-in-pytorch",
              "help": {
                "text": "Functions reliant on pickle can result in arbitrary code execution.  Consider loading from `state_dict`, using fickling, or switching to a safer serialization method like ONNX\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Functions reliant on pickle can result in arbitrary code execution.  Consider loading from `state_dict`, using fickling, or switching to a safer serialization method like ONNX\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/trailofbits.python.pickles-in-pytorch.pickles-in-pytorch)\n - [https://blog.trailofbits.com/2021/03/15/never-a-dill-moment-exploiting-machine-learning-pickle-files/](https://blog.trailofbits.com/2021/03/15/never-a-dill-moment-exploiting-machine-learning-pickle-files/)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "trailofbits.python.pickles-in-pytorch.pickles-in-pytorch"
                ]
              }
            },
            {
              "id": "4bf95ad5-3e8f-3aef-ad51-793954b36f59",
              "name": "resources.rules.return-in-init",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.return-in-init"
              },
              "fullDescription": {
                "text": "`return` should never appear inside a class __init__ function. This will cause a runtime error."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "error"
              },
              "help": {
                "text": "`return` should never appear inside a class __init__ function. This will cause a runtime error.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "`return` should never appear inside a class __init__ function. This will cause a runtime error.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.return-in-init"
                ]
              }
            },
            {
              "id": "299c6a75-83a0-3a62-8897-25280402edef",
              "name": "resources.rules.useless-inner-function",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.useless-inner-function"
              },
              "fullDescription": {
                "text": "function `$FF` is defined inside a function but never used"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "error"
              },
              "help": {
                "text": "function `$FF` is defined inside a function but never used\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "function `$FF` is defined inside a function but never used\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.useless-inner-function"
                ]
              }
            },
            {
              "id": "6ce5507f-fd03-31ba-8a28-694ca88ccb52",
              "name": "resources.rules.dlint-catastrophic-redos",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.dlint-catastrophic-redos"
              },
              "fullDescription": {
                "text": "Regex `$X` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "error"
              },
              "help": {
                "text": "Regex `$X` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Regex `$X` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [https://r2c.dev/blog/2020/finding-python-redos-bugs-at-scale-using-dlint-and-r2c/](https://r2c.dev/blog/2020/finding-python-redos-bugs-at-scale-using-dlint-and-r2c/)\n - [https://r2c.dev/blog/2020/improving-redos-detection-with-dlint-and-r2c/](https://r2c.dev/blog/2020/improving-redos-detection-with-dlint-and-r2c/)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.dlint-catastrophic-redos"
                ]
              }
            },
            {
              "id": "0c3d0c9d-431f-3b4c-90df-36db8bef64ca",
              "name": "resources.rules.dlint-catastrophic-redos",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.dlint-catastrophic-redos"
              },
              "fullDescription": {
                "text": "Regex `$X` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "error"
              },
              "help": {
                "text": "Regex `$X` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Regex `$X` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [https://r2c.dev/blog/2020/finding-python-redos-bugs-at-scale-using-dlint-and-r2c/](https://r2c.dev/blog/2020/finding-python-redos-bugs-at-scale-using-dlint-and-r2c/)\n - [https://r2c.dev/blog/2020/improving-redos-detection-with-dlint-and-r2c/](https://r2c.dev/blog/2020/improving-redos-detection-with-dlint-and-r2c/)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.dlint-catastrophic-redos"
                ]
              }
            },
            {
              "id": "a9548393-18d0-3f93-8fd6-f013fa661366",
              "name": "resources.rules.missing-ratelimit",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.missing-ratelimit"
              },
              "fullDescription": {
                "text": "Function '$FUNC' is missing a rate-limiting decorator.\nHigh volume traffic to this function could starve application\nresources. Consider adding rate limiting from a library such\nas 'django-ratelimit'.\n"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "help": {
                "text": "Function '$FUNC' is missing a rate-limiting decorator.\nHigh volume traffic to this function could starve application\nresources. Consider adding rate limiting from a library such\nas 'django-ratelimit'.\n\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Function '$FUNC' is missing a rate-limiting decorator.\nHigh volume traffic to this function could starve application\nresources. Consider adding rate limiting from a library such\nas 'django-ratelimit'.\n\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [https://github.com/jsocol/django-ratelimit/blob/main/docs/index.rst#quickstart](https://github.com/jsocol/django-ratelimit/blob/main/docs/index.rst#quickstart)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.missing-ratelimit"
                ]
              }
            },
            {
              "id": "7e057bd5-d864-321b-968a-6772c2abddee",
              "name": "resources.rules.return-not-in-function",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.return-not-in-function"
              },
              "fullDescription": {
                "text": "`return` only makes sense inside a function"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "help": {
                "text": "`return` only makes sense inside a function\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "`return` only makes sense inside a function\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.return-not-in-function"
                ]
              }
            },
            {
              "id": "651f2c7f-40a2-3e43-bb52-650e7ec2debe",
              "name": "python.lang.security.audit.eval-detected.eval-detected",
              "shortDescription": {
                "text": "Opengrep Finding: python.lang.security.audit.eval-detected.eval-detected"
              },
              "fullDescription": {
                "text": "Detected the use of eval(). eval() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://semgrep.dev/r/python.lang.security.audit.eval-detected.eval-detected",
              "help": {
                "text": "Detected the use of eval(). eval() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Detected the use of eval(). eval() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/python.lang.security.audit.eval-detected.eval-detected)\n - [https://owasp.org/Top10/A03_2021-Injection](https://owasp.org/Top10/A03_2021-Injection)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "python.lang.security.audit.eval-detected.eval-detected"
                ]
              }
            },
            {
              "id": "8c61a950-0ee2-38e9-b1a7-b2f3ab4af38d",
              "name": "python.lang.security.deserialization.pickle.avoid-pickle",
              "shortDescription": {
                "text": "Opengrep Finding: python.lang.security.deserialization.pickle.avoid-pickle"
              },
              "fullDescription": {
                "text": "Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://semgrep.dev/r/python.lang.security.deserialization.pickle.avoid-pickle",
              "help": {
                "text": "Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/python.lang.security.deserialization.pickle.avoid-pickle)\n - [https://docs.python.org/3/library/pickle.html](https://docs.python.org/3/library/pickle.html)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "python.lang.security.deserialization.pickle.avoid-pickle"
                ]
              }
            },
            {
              "id": "d2bd9895-68dd-3b3e-bcaf-528409557ad6",
              "name": "python.lang.security.deserialization.pickle.avoid-pickle",
              "shortDescription": {
                "text": "Opengrep Finding: python.lang.security.deserialization.pickle.avoid-pickle"
              },
              "fullDescription": {
                "text": "Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://semgrep.dev/r/python.lang.security.deserialization.pickle.avoid-pickle",
              "help": {
                "text": "Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/python.lang.security.deserialization.pickle.avoid-pickle)\n - [https://docs.python.org/3/library/pickle.html](https://docs.python.org/3/library/pickle.html)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "python.lang.security.deserialization.pickle.avoid-pickle"
                ]
              }
            },
            {
              "id": "f14d6494-91a9-3ac5-bb35-287e7e150eb5",
              "name": "python.lang.security.audit.eval-detected.eval-detected",
              "shortDescription": {
                "text": "Opengrep Finding: python.lang.security.audit.eval-detected.eval-detected"
              },
              "fullDescription": {
                "text": "Detected the use of eval(). eval() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://semgrep.dev/r/python.lang.security.audit.eval-detected.eval-detected",
              "help": {
                "text": "Detected the use of eval(). eval() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Detected the use of eval(). eval() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/python.lang.security.audit.eval-detected.eval-detected)\n - [https://owasp.org/Top10/A03_2021-Injection](https://owasp.org/Top10/A03_2021-Injection)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "python.lang.security.audit.eval-detected.eval-detected"
                ]
              }
            },
            {
              "id": "079ee192-4154-32b5-920b-391b6d3a5370",
              "name": "python.lang.security.audit.eval-detected.eval-detected",
              "shortDescription": {
                "text": "Opengrep Finding: python.lang.security.audit.eval-detected.eval-detected"
              },
              "fullDescription": {
                "text": "Detected the use of eval(). eval() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://semgrep.dev/r/python.lang.security.audit.eval-detected.eval-detected",
              "help": {
                "text": "Detected the use of eval(). eval() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Detected the use of eval(). eval() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/python.lang.security.audit.eval-detected.eval-detected)\n - [https://owasp.org/Top10/A03_2021-Injection](https://owasp.org/Top10/A03_2021-Injection)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "python.lang.security.audit.eval-detected.eval-detected"
                ]
              }
            },
            {
              "id": "b2559bee-f88a-3a65-b8e2-d892124661c5",
              "name": "python.lang.security.audit.eval-detected.eval-detected",
              "shortDescription": {
                "text": "Opengrep Finding: python.lang.security.audit.eval-detected.eval-detected"
              },
              "fullDescription": {
                "text": "Detected the use of eval(). eval() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://semgrep.dev/r/python.lang.security.audit.eval-detected.eval-detected",
              "help": {
                "text": "Detected the use of eval(). eval() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Detected the use of eval(). eval() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/python.lang.security.audit.eval-detected.eval-detected)\n - [https://owasp.org/Top10/A03_2021-Injection](https://owasp.org/Top10/A03_2021-Injection)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "python.lang.security.audit.eval-detected.eval-detected"
                ]
              }
            },
            {
              "id": "0c4b4f43-0451-34ba-862f-dc7ec2ed5f20",
              "name": "python.lang.security.audit.eval-detected.eval-detected",
              "shortDescription": {
                "text": "Opengrep Finding: python.lang.security.audit.eval-detected.eval-detected"
              },
              "fullDescription": {
                "text": "Detected the use of eval(). eval() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://semgrep.dev/r/python.lang.security.audit.eval-detected.eval-detected",
              "help": {
                "text": "Detected the use of eval(). eval() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Detected the use of eval(). eval() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/python.lang.security.audit.eval-detected.eval-detected)\n - [https://owasp.org/Top10/A03_2021-Injection](https://owasp.org/Top10/A03_2021-Injection)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "python.lang.security.audit.eval-detected.eval-detected"
                ]
              }
            },
            {
              "id": "f57aeb02-4a76-358f-a3e8-252d6776f7e1",
              "name": "resources.rules.hardcoded-tmp-path",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.hardcoded-tmp-path"
              },
              "fullDescription": {
                "text": "Detected hardcoded temp directory. Consider using 'tempfile.TemporaryFile' instead.\n"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "help": {
                "text": "Detected hardcoded temp directory. Consider using 'tempfile.TemporaryFile' instead.\n\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Detected hardcoded temp directory. Consider using 'tempfile.TemporaryFile' instead.\n\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [https://docs.python.org/3/library/tempfile.html#tempfile.TemporaryFile](https://docs.python.org/3/library/tempfile.html#tempfile.TemporaryFile)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.hardcoded-tmp-path"
                ]
              }
            },
            {
              "id": "bb232b76-ab76-3ce0-a184-4bee3dd08d31",
              "name": "resources.rules.useless-literal-dict",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.useless-literal-dict"
              },
              "fullDescription": {
                "text": "key `$X` is uselessly assigned twice"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "help": {
                "text": "key `$X` is uselessly assigned twice\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "key `$X` is uselessly assigned twice\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.useless-literal-dict"
                ]
              }
            },
            {
              "id": "a329cc61-8eef-3b36-95eb-81ef58718567",
              "name": "python.lang.security.audit.eval-detected.eval-detected",
              "shortDescription": {
                "text": "Opengrep Finding: python.lang.security.audit.eval-detected.eval-detected"
              },
              "fullDescription": {
                "text": "Detected the use of eval(). eval() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://semgrep.dev/r/python.lang.security.audit.eval-detected.eval-detected",
              "help": {
                "text": "Detected the use of eval(). eval() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Detected the use of eval(). eval() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/python.lang.security.audit.eval-detected.eval-detected)\n - [https://owasp.org/Top10/A03_2021-Injection](https://owasp.org/Top10/A03_2021-Injection)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "python.lang.security.audit.eval-detected.eval-detected"
                ]
              }
            },
            {
              "id": "106293ce-23d6-354c-9e90-de43bac15c20",
              "name": "resources.rules.useless-literal-dict",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.useless-literal-dict"
              },
              "fullDescription": {
                "text": "key `$X` is uselessly assigned twice"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "help": {
                "text": "key `$X` is uselessly assigned twice\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "key `$X` is uselessly assigned twice\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.useless-literal-dict"
                ]
              }
            },
            {
              "id": "5f281c50-3ce9-34f5-a1c0-805bfad69674",
              "name": "resources.rules.use-defused-xml",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.use-defused-xml"
              },
              "fullDescription": {
                "text": "Found use of the native Python XML libraries, which is vulnerable to XML external entity (XXE)\nattacks. The Python documentation recommends the 'defusedxml' library instead. Use 'defusedxml'.\nSee https://github.com/tiran/defusedxml for more information.\n"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "error"
              },
              "help": {
                "text": "Found use of the native Python XML libraries, which is vulnerable to XML external entity (XXE)\nattacks. The Python documentation recommends the 'defusedxml' library instead. Use 'defusedxml'.\nSee https://github.com/tiran/defusedxml for more information.\n\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Found use of the native Python XML libraries, which is vulnerable to XML external entity (XXE)\nattacks. The Python documentation recommends the 'defusedxml' library instead. Use 'defusedxml'.\nSee https://github.com/tiran/defusedxml for more information.\n\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [https://docs.python.org/3/library/xml.html](https://docs.python.org/3/library/xml.html)\n - [https://github.com/tiran/defusedxml](https://github.com/tiran/defusedxml)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.use-defused-xml"
                ]
              }
            },
            {
              "id": "4eb01b69-ccfa-3440-81e3-953ee0fff8b8",
              "name": "python.lang.security.use-defused-xml-parse.use-defused-xml-parse",
              "shortDescription": {
                "text": "Opengrep Finding: python.lang.security.use-defused-xml-parse.use-defused-xml-parse"
              },
              "fullDescription": {
                "text": "The native Python `xml` library is vulnerable to XML External Entity (XXE) attacks.  These attacks can leak confidential data and \"XML bombs\" can cause denial of service. Do not use this library to parse untrusted input. Instead  the Python documentation recommends using `defusedxml`."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "error"
              },
              "helpUri": "https://semgrep.dev/r/python.lang.security.use-defused-xml-parse.use-defused-xml-parse",
              "help": {
                "text": "The native Python `xml` library is vulnerable to XML External Entity (XXE) attacks.  These attacks can leak confidential data and \"XML bombs\" can cause denial of service. Do not use this library to parse untrusted input. Instead  the Python documentation recommends using `defusedxml`.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "The native Python `xml` library is vulnerable to XML External Entity (XXE) attacks.  These attacks can leak confidential data and \"XML bombs\" can cause denial of service. Do not use this library to parse untrusted input. Instead  the Python documentation recommends using `defusedxml`.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/python.lang.security.use-defused-xml-parse.use-defused-xml-parse)\n - [https://docs.python.org/3/library/xml.html](https://docs.python.org/3/library/xml.html)\n - [https://github.com/tiran/defusedxml](https://github.com/tiran/defusedxml)\n - [https://owasp.org/www-community/vulnerabilities/XML_External_Entity_(XXE)_Processing](https://owasp.org/www-community/vulnerabilities/XML_External_Entity_(XXE)_Processing)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "python.lang.security.use-defused-xml-parse.use-defused-xml-parse"
                ]
              }
            },
            {
              "id": "cd619133-187d-36a5-9012-e081c9ad8a2a",
              "name": "resources.rules.insecure-xml-use",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.insecure-xml-use"
              },
              "fullDescription": {
                "text": "Insecure XML parsing functionality, prefer 'defusedxml'"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "help": {
                "text": "Insecure XML parsing functionality, prefer 'defusedxml'\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Insecure XML parsing functionality, prefer 'defusedxml'\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.insecure-xml-use"
                ]
              }
            },
            {
              "id": "c352126c-f303-3027-befa-3e3bce96f31e",
              "name": "resources.rules.dlint-catastrophic-redos",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.dlint-catastrophic-redos"
              },
              "fullDescription": {
                "text": "Regex `$X` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "error"
              },
              "help": {
                "text": "Regex `$X` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Regex `$X` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [https://r2c.dev/blog/2020/finding-python-redos-bugs-at-scale-using-dlint-and-r2c/](https://r2c.dev/blog/2020/finding-python-redos-bugs-at-scale-using-dlint-and-r2c/)\n - [https://r2c.dev/blog/2020/improving-redos-detection-with-dlint-and-r2c/](https://r2c.dev/blog/2020/improving-redos-detection-with-dlint-and-r2c/)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.dlint-catastrophic-redos"
                ]
              }
            },
            {
              "id": "abbbf279-dab9-3cc0-a214-62021c68df47",
              "name": "resources.rules.return-not-in-function",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.return-not-in-function"
              },
              "fullDescription": {
                "text": "`return` only makes sense inside a function"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "help": {
                "text": "`return` only makes sense inside a function\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "`return` only makes sense inside a function\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.return-not-in-function"
                ]
              }
            },
            {
              "id": "d9b42fba-e632-3954-ac0a-73c892f5caa8",
              "name": "resources.rules.return-not-in-function",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.return-not-in-function"
              },
              "fullDescription": {
                "text": "`return` only makes sense inside a function"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "help": {
                "text": "`return` only makes sense inside a function\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "`return` only makes sense inside a function\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.return-not-in-function"
                ]
              }
            },
            {
              "id": "8b2e3d41-58e0-362c-b280-45ad6a947fb6",
              "name": "resources.rules.return-not-in-function",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.return-not-in-function"
              },
              "fullDescription": {
                "text": "`return` only makes sense inside a function"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "help": {
                "text": "`return` only makes sense inside a function\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "`return` only makes sense inside a function\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.return-not-in-function"
                ]
              }
            },
            {
              "id": "acc7665b-e2d9-33b7-8fac-159193fe5484",
              "name": "resources.rules.missing-ratelimit",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.missing-ratelimit"
              },
              "fullDescription": {
                "text": "Function '$FUNC' is missing a rate-limiting decorator.\nHigh volume traffic to this function could starve application\nresources. Consider adding rate limiting from a library such\nas 'django-ratelimit'.\n"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "help": {
                "text": "Function '$FUNC' is missing a rate-limiting decorator.\nHigh volume traffic to this function could starve application\nresources. Consider adding rate limiting from a library such\nas 'django-ratelimit'.\n\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Function '$FUNC' is missing a rate-limiting decorator.\nHigh volume traffic to this function could starve application\nresources. Consider adding rate limiting from a library such\nas 'django-ratelimit'.\n\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [https://github.com/jsocol/django-ratelimit/blob/main/docs/index.rst#quickstart](https://github.com/jsocol/django-ratelimit/blob/main/docs/index.rst#quickstart)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.missing-ratelimit"
                ]
              }
            },
            {
              "id": "8560b299-6e0d-326f-b94f-7ea782add094",
              "name": "resources.rules.return-in-init",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.return-in-init"
              },
              "fullDescription": {
                "text": "`return` should never appear inside a class __init__ function. This will cause a runtime error."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "error"
              },
              "help": {
                "text": "`return` should never appear inside a class __init__ function. This will cause a runtime error.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "`return` should never appear inside a class __init__ function. This will cause a runtime error.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.return-in-init"
                ]
              }
            },
            {
              "id": "648e60b2-1cf8-35d6-8813-fb88c0f760e6",
              "name": "resources.rules.return-not-in-function",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.return-not-in-function"
              },
              "fullDescription": {
                "text": "`return` only makes sense inside a function"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "help": {
                "text": "`return` only makes sense inside a function\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "`return` only makes sense inside a function\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.return-not-in-function"
                ]
              }
            },
            {
              "id": "75c72ae5-c450-3f4d-8a40-130b9bdada8a",
              "name": "resources.rules.return-in-init",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.return-in-init"
              },
              "fullDescription": {
                "text": "`return` should never appear inside a class __init__ function. This will cause a runtime error."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "error"
              },
              "help": {
                "text": "`return` should never appear inside a class __init__ function. This will cause a runtime error.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "`return` should never appear inside a class __init__ function. This will cause a runtime error.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.return-in-init"
                ]
              }
            },
            {
              "id": "c9b5ae7f-412e-3507-a998-02a47b18b5b9",
              "name": "resources.rules.return-not-in-function",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.return-not-in-function"
              },
              "fullDescription": {
                "text": "`return` only makes sense inside a function"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "help": {
                "text": "`return` only makes sense inside a function\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "`return` only makes sense inside a function\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.return-not-in-function"
                ]
              }
            },
            {
              "id": "49049ead-2488-32ef-bc77-563b71c80483",
              "name": "resources.rules.return-not-in-function",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.return-not-in-function"
              },
              "fullDescription": {
                "text": "`return` only makes sense inside a function"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "help": {
                "text": "`return` only makes sense inside a function\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "`return` only makes sense inside a function\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.return-not-in-function"
                ]
              }
            },
            {
              "id": "13c1938f-311f-364e-9f91-03bc1f468561",
              "name": "resources.rules.return-not-in-function",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.return-not-in-function"
              },
              "fullDescription": {
                "text": "`return` only makes sense inside a function"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "help": {
                "text": "`return` only makes sense inside a function\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "`return` only makes sense inside a function\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.return-not-in-function"
                ]
              }
            },
            {
              "id": "2ada83bb-3949-36dd-b669-058a36dc3e76",
              "name": "resources.rules.return-not-in-function",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.return-not-in-function"
              },
              "fullDescription": {
                "text": "`return` only makes sense inside a function"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "help": {
                "text": "`return` only makes sense inside a function\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "`return` only makes sense inside a function\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.return-not-in-function"
                ]
              }
            },
            {
              "id": "2476bf44-27ac-3a85-af4e-5a4440bcbdd9",
              "name": "resources.rules.return-not-in-function",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.return-not-in-function"
              },
              "fullDescription": {
                "text": "`return` only makes sense inside a function"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "help": {
                "text": "`return` only makes sense inside a function\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "`return` only makes sense inside a function\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.return-not-in-function"
                ]
              }
            },
            {
              "id": "025464ab-b802-361c-940d-f0f4836a54c1",
              "name": "resources.rules.return-not-in-function",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.return-not-in-function"
              },
              "fullDescription": {
                "text": "`return` only makes sense inside a function"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "help": {
                "text": "`return` only makes sense inside a function\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "`return` only makes sense inside a function\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.return-not-in-function"
                ]
              }
            },
            {
              "id": "c2c9c5ab-53ab-30eb-b146-dd1570526f8f",
              "name": "resources.rules.return-not-in-function",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.return-not-in-function"
              },
              "fullDescription": {
                "text": "`return` only makes sense inside a function"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "help": {
                "text": "`return` only makes sense inside a function\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "`return` only makes sense inside a function\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.return-not-in-function"
                ]
              }
            },
            {
              "id": "12ce4cc2-e740-3b90-90d5-e60ca7299ec8",
              "name": "resources.rules.return-not-in-function",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.return-not-in-function"
              },
              "fullDescription": {
                "text": "`return` only makes sense inside a function"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "help": {
                "text": "`return` only makes sense inside a function\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "`return` only makes sense inside a function\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.return-not-in-function"
                ]
              }
            },
            {
              "id": "f7a42fdd-9cd4-3b8a-be1a-c7a37bd3f79c",
              "name": "resources.rules.return-not-in-function",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.return-not-in-function"
              },
              "fullDescription": {
                "text": "`return` only makes sense inside a function"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "help": {
                "text": "`return` only makes sense inside a function\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "`return` only makes sense inside a function\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.return-not-in-function"
                ]
              }
            },
            {
              "id": "36ad69ed-6bbb-32a7-9360-b4143c30f672",
              "name": "resources.rules.return-not-in-function",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.return-not-in-function"
              },
              "fullDescription": {
                "text": "`return` only makes sense inside a function"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "help": {
                "text": "`return` only makes sense inside a function\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "`return` only makes sense inside a function\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.return-not-in-function"
                ]
              }
            },
            {
              "id": "7c222147-02f7-3be9-a07d-53d5106b100a",
              "name": "resources.rules.return-not-in-function",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.return-not-in-function"
              },
              "fullDescription": {
                "text": "`return` only makes sense inside a function"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "help": {
                "text": "`return` only makes sense inside a function\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "`return` only makes sense inside a function\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.return-not-in-function"
                ]
              }
            },
            {
              "id": "703d96e1-2145-3e01-b278-e0716b2dcce8",
              "name": "resources.rules.return-not-in-function",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.return-not-in-function"
              },
              "fullDescription": {
                "text": "`return` only makes sense inside a function"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "help": {
                "text": "`return` only makes sense inside a function\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "`return` only makes sense inside a function\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.return-not-in-function"
                ]
              }
            },
            {
              "id": "c04f06b5-233a-3134-81ca-dd071d127aea",
              "name": "resources.rules.return-not-in-function",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.return-not-in-function"
              },
              "fullDescription": {
                "text": "`return` only makes sense inside a function"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "help": {
                "text": "`return` only makes sense inside a function\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "`return` only makes sense inside a function\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.return-not-in-function"
                ]
              }
            },
            {
              "id": "cdf0cd1c-b1e3-37c0-9732-f17304e708c3",
              "name": "resources.rules.return-not-in-function",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.return-not-in-function"
              },
              "fullDescription": {
                "text": "`return` only makes sense inside a function"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "help": {
                "text": "`return` only makes sense inside a function\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "`return` only makes sense inside a function\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.return-not-in-function"
                ]
              }
            },
            {
              "id": "883b315e-6e77-3c80-87a3-b6f7cc28f574",
              "name": "resources.rules.return-not-in-function",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.return-not-in-function"
              },
              "fullDescription": {
                "text": "`return` only makes sense inside a function"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "help": {
                "text": "`return` only makes sense inside a function\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "`return` only makes sense inside a function\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.return-not-in-function"
                ]
              }
            },
            {
              "id": "38662a19-29c8-3aa8-831e-849af81a9f0e",
              "name": "resources.rules.return-not-in-function",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.return-not-in-function"
              },
              "fullDescription": {
                "text": "`return` only makes sense inside a function"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "help": {
                "text": "`return` only makes sense inside a function\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "`return` only makes sense inside a function\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.return-not-in-function"
                ]
              }
            },
            {
              "id": "a0431bfc-83e5-34c6-ac18-34210466174d",
              "name": "resources.rules.return-not-in-function",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.return-not-in-function"
              },
              "fullDescription": {
                "text": "`return` only makes sense inside a function"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "help": {
                "text": "`return` only makes sense inside a function\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "`return` only makes sense inside a function\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.return-not-in-function"
                ]
              }
            },
            {
              "id": "3bb73345-52c6-343f-a907-2b1ee607eb50",
              "name": "resources.rules.return-not-in-function",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.return-not-in-function"
              },
              "fullDescription": {
                "text": "`return` only makes sense inside a function"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "help": {
                "text": "`return` only makes sense inside a function\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "`return` only makes sense inside a function\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.return-not-in-function"
                ]
              }
            },
            {
              "id": "491ee4d0-8486-3526-b6a0-db74a53e7052",
              "name": "resources.rules.return-not-in-function",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.return-not-in-function"
              },
              "fullDescription": {
                "text": "`return` only makes sense inside a function"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "help": {
                "text": "`return` only makes sense inside a function\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "`return` only makes sense inside a function\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.return-not-in-function"
                ]
              }
            },
            {
              "id": "a9204bc9-ec3b-3004-aa97-6d0951ae94fc",
              "name": "resources.rules.return-not-in-function",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.return-not-in-function"
              },
              "fullDescription": {
                "text": "`return` only makes sense inside a function"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "help": {
                "text": "`return` only makes sense inside a function\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "`return` only makes sense inside a function\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.return-not-in-function"
                ]
              }
            },
            {
              "id": "000d57bf-bac8-33b5-bc66-25d059000578",
              "name": "python.lang.security.audit.non-literal-import.non-literal-import",
              "shortDescription": {
                "text": "Opengrep Finding: python.lang.security.audit.non-literal-import.non-literal-import"
              },
              "fullDescription": {
                "text": "Untrusted user input in `importlib.import_module()` function allows an attacker to load arbitrary code. Avoid dynamic values in `importlib.import_module()` or use a whitelist to prevent running untrusted code."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://semgrep.dev/r/python.lang.security.audit.non-literal-import.non-literal-import",
              "help": {
                "text": "Untrusted user input in `importlib.import_module()` function allows an attacker to load arbitrary code. Avoid dynamic values in `importlib.import_module()` or use a whitelist to prevent running untrusted code.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Untrusted user input in `importlib.import_module()` function allows an attacker to load arbitrary code. Avoid dynamic values in `importlib.import_module()` or use a whitelist to prevent running untrusted code.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/python.lang.security.audit.non-literal-import.non-literal-import)\n - [https://owasp.org/Top10/A01_2021-Broken_Access_Control](https://owasp.org/Top10/A01_2021-Broken_Access_Control)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "python.lang.security.audit.non-literal-import.non-literal-import"
                ]
              }
            },
            {
              "id": "9373f6e3-8005-35ba-b4b9-9d71b07e1664",
              "name": "resources.rules.dangerous-system-call",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.dangerous-system-call"
              },
              "fullDescription": {
                "text": "Found dynamic content used in a system call. This is dangerous if external data can reach this function call because it allows a malicious actor to execute commands. Use the 'subprocess' module instead, which is easier to use without accidentally exposing a command injection vulnerability."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "help": {
                "text": "Found dynamic content used in a system call. This is dangerous if external data can reach this function call because it allows a malicious actor to execute commands. Use the 'subprocess' module instead, which is easier to use without accidentally exposing a command injection vulnerability.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Found dynamic content used in a system call. This is dangerous if external data can reach this function call because it allows a malicious actor to execute commands. Use the 'subprocess' module instead, which is easier to use without accidentally exposing a command injection vulnerability.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.dangerous-system-call"
                ]
              }
            },
            {
              "id": "a99d53c3-6845-3684-8478-758e93946334",
              "name": "resources.rules.dlint-catastrophic-redos",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.dlint-catastrophic-redos"
              },
              "fullDescription": {
                "text": "Regex `$X` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "error"
              },
              "help": {
                "text": "Regex `$X` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Regex `$X` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [https://r2c.dev/blog/2020/finding-python-redos-bugs-at-scale-using-dlint-and-r2c/](https://r2c.dev/blog/2020/finding-python-redos-bugs-at-scale-using-dlint-and-r2c/)\n - [https://r2c.dev/blog/2020/improving-redos-detection-with-dlint-and-r2c/](https://r2c.dev/blog/2020/improving-redos-detection-with-dlint-and-r2c/)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.dlint-catastrophic-redos"
                ]
              }
            },
            {
              "id": "f97aa672-0906-36b3-9015-216fdeeb2bc2",
              "name": "python.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query",
              "shortDescription": {
                "text": "Opengrep Finding: python.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query"
              },
              "fullDescription": {
                "text": "Avoiding SQL string concatenation: untrusted input concatenated with raw SQL query can result in SQL Injection. In order to execute raw query safely, prepared statement should be used. SQLAlchemy provides TextualSQL to easily used prepared statement with named parameters. For complex SQL composition, use SQL Expression Language or Schema Definition Language. In most cases, SQLAlchemy ORM will be a better option."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "error"
              },
              "helpUri": "https://semgrep.dev/r/python.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query",
              "help": {
                "text": "Avoiding SQL string concatenation: untrusted input concatenated with raw SQL query can result in SQL Injection. In order to execute raw query safely, prepared statement should be used. SQLAlchemy provides TextualSQL to easily used prepared statement with named parameters. For complex SQL composition, use SQL Expression Language or Schema Definition Language. In most cases, SQLAlchemy ORM will be a better option.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Avoiding SQL string concatenation: untrusted input concatenated with raw SQL query can result in SQL Injection. In order to execute raw query safely, prepared statement should be used. SQLAlchemy provides TextualSQL to easily used prepared statement with named parameters. For complex SQL composition, use SQL Expression Language or Schema Definition Language. In most cases, SQLAlchemy ORM will be a better option.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/python.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query)\n - [https://docs.sqlalchemy.org/en/14/core/tutorial.html#using-textual-sql](https://docs.sqlalchemy.org/en/14/core/tutorial.html#using-textual-sql)\n - [https://www.tutorialspoint.com/sqlalchemy/sqlalchemy_quick_guide.htm](https://www.tutorialspoint.com/sqlalchemy/sqlalchemy_quick_guide.htm)\n - [https://docs.sqlalchemy.org/en/14/core/tutorial.html#using-more-specific-text-with-table-expression-literal-column-and-expression-column](https://docs.sqlalchemy.org/en/14/core/tutorial.html#using-more-specific-text-with-table-expression-literal-column-and-expression-column)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "python.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query"
                ]
              }
            },
            {
              "id": "50c16f3a-02e2-312d-8790-dd485015ced6",
              "name": "python.lang.security.audit.formatted-sql-query.formatted-sql-query",
              "shortDescription": {
                "text": "Opengrep Finding: python.lang.security.audit.formatted-sql-query.formatted-sql-query"
              },
              "fullDescription": {
                "text": "Detected possible formatted SQL query. Use parameterized queries instead."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://semgrep.dev/r/python.lang.security.audit.formatted-sql-query.formatted-sql-query",
              "help": {
                "text": "Detected possible formatted SQL query. Use parameterized queries instead.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Detected possible formatted SQL query. Use parameterized queries instead.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/python.lang.security.audit.formatted-sql-query.formatted-sql-query)\n - [https://stackoverflow.com/questions/775296/mysql-parameterized-queries](https://stackoverflow.com/questions/775296/mysql-parameterized-queries)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "python.lang.security.audit.formatted-sql-query.formatted-sql-query"
                ]
              }
            },
            {
              "id": "082c14db-2b9f-3ab1-b80d-9a330ea73a60",
              "name": "python.lang.security.deserialization.pickle.avoid-pickle",
              "shortDescription": {
                "text": "Opengrep Finding: python.lang.security.deserialization.pickle.avoid-pickle"
              },
              "fullDescription": {
                "text": "Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://semgrep.dev/r/python.lang.security.deserialization.pickle.avoid-pickle",
              "help": {
                "text": "Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/python.lang.security.deserialization.pickle.avoid-pickle)\n - [https://docs.python.org/3/library/pickle.html](https://docs.python.org/3/library/pickle.html)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "python.lang.security.deserialization.pickle.avoid-pickle"
                ]
              }
            },
            {
              "id": "ad2d496a-d21d-393a-873b-6ce36f4b66b0",
              "name": "python.lang.security.deserialization.pickle.avoid-pickle",
              "shortDescription": {
                "text": "Opengrep Finding: python.lang.security.deserialization.pickle.avoid-pickle"
              },
              "fullDescription": {
                "text": "Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://semgrep.dev/r/python.lang.security.deserialization.pickle.avoid-pickle",
              "help": {
                "text": "Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/python.lang.security.deserialization.pickle.avoid-pickle)\n - [https://docs.python.org/3/library/pickle.html](https://docs.python.org/3/library/pickle.html)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "python.lang.security.deserialization.pickle.avoid-pickle"
                ]
              }
            },
            {
              "id": "0eb83e2a-b6e4-3af5-ac28-e1892cbc5912",
              "name": "resources.rules.insecure-hash-algorithm-md5",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.insecure-hash-algorithm-md5"
              },
              "fullDescription": {
                "text": "Detected MD5 hash algorithm which is considered insecure. MD5 is not\ncollision resistant and is therefore not suitable as a cryptographic\nsignature. Use SHA256 or SHA3 instead.\n"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "help": {
                "text": "Detected MD5 hash algorithm which is considered insecure. MD5 is not\ncollision resistant and is therefore not suitable as a cryptographic\nsignature. Use SHA256 or SHA3 instead.\n\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Detected MD5 hash algorithm which is considered insecure. MD5 is not\ncollision resistant and is therefore not suitable as a cryptographic\nsignature. Use SHA256 or SHA3 instead.\n\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [https://tools.ietf.org/html/rfc6151](https://tools.ietf.org/html/rfc6151)\n - [https://crypto.stackexchange.com/questions/44151/how-does-the-flame-malware-take-advantage-of-md5-collision](https://crypto.stackexchange.com/questions/44151/how-does-the-flame-malware-take-advantage-of-md5-collision)\n - [https://pycryptodome.readthedocs.io/en/latest/src/hash/sha3_256.html](https://pycryptodome.readthedocs.io/en/latest/src/hash/sha3_256.html)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.insecure-hash-algorithm-md5"
                ]
              }
            },
            {
              "id": "a0171b88-aafd-349b-bb76-08bed5f12e3a",
              "name": "resources.rules.return-not-in-function",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.return-not-in-function"
              },
              "fullDescription": {
                "text": "`return` only makes sense inside a function"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "help": {
                "text": "`return` only makes sense inside a function\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "`return` only makes sense inside a function\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.return-not-in-function"
                ]
              }
            },
            {
              "id": "5cbc6814-c497-3120-a6b1-c20887103377",
              "name": "python.lang.security.audit.dynamic-urllib-use-detected.dynamic-urllib-use-detected",
              "shortDescription": {
                "text": "Opengrep Finding: python.lang.security.audit.dynamic-urllib-use-detected.dynamic-urllib-use-detected"
              },
              "fullDescription": {
                "text": "Detected a dynamic value being used with urllib. urllib supports 'file://' schemes, so a dynamic value controlled by a malicious actor may allow them to read arbitrary files. Audit uses of urllib calls to ensure user data cannot control the URLs, or consider using the 'requests' library instead."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://semgrep.dev/r/python.lang.security.audit.dynamic-urllib-use-detected.dynamic-urllib-use-detected",
              "help": {
                "text": "Detected a dynamic value being used with urllib. urllib supports 'file://' schemes, so a dynamic value controlled by a malicious actor may allow them to read arbitrary files. Audit uses of urllib calls to ensure user data cannot control the URLs, or consider using the 'requests' library instead.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Detected a dynamic value being used with urllib. urllib supports 'file://' schemes, so a dynamic value controlled by a malicious actor may allow them to read arbitrary files. Audit uses of urllib calls to ensure user data cannot control the URLs, or consider using the 'requests' library instead.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/python.lang.security.audit.dynamic-urllib-use-detected.dynamic-urllib-use-detected)\n - [https://cwe.mitre.org/data/definitions/939.html](https://cwe.mitre.org/data/definitions/939.html)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "python.lang.security.audit.dynamic-urllib-use-detected.dynamic-urllib-use-detected"
                ]
              }
            },
            {
              "id": "652c76ae-1773-3ff7-ad12-f7d6231ee714",
              "name": "resources.rules.return-not-in-function",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.return-not-in-function"
              },
              "fullDescription": {
                "text": "`return` only makes sense inside a function"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "help": {
                "text": "`return` only makes sense inside a function\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "`return` only makes sense inside a function\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.return-not-in-function"
                ]
              }
            },
            {
              "id": "6754aafe-d8d7-39ba-9c5a-8752261ea71a",
              "name": "resources.rules.return-not-in-function",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.return-not-in-function"
              },
              "fullDescription": {
                "text": "`return` only makes sense inside a function"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "help": {
                "text": "`return` only makes sense inside a function\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "`return` only makes sense inside a function\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.return-not-in-function"
                ]
              }
            },
            {
              "id": "7c7208cf-876a-3b1d-9803-96462e366cdd",
              "name": "resources.rules.return-not-in-function",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.return-not-in-function"
              },
              "fullDescription": {
                "text": "`return` only makes sense inside a function"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "help": {
                "text": "`return` only makes sense inside a function\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "`return` only makes sense inside a function\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.return-not-in-function"
                ]
              }
            },
            {
              "id": "f3f1817d-9e17-306a-9447-bdde7b5eb261",
              "name": "resources.rules.return-not-in-function",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.return-not-in-function"
              },
              "fullDescription": {
                "text": "`return` only makes sense inside a function"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "help": {
                "text": "`return` only makes sense inside a function\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "`return` only makes sense inside a function\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.return-not-in-function"
                ]
              }
            },
            {
              "id": "4eeb9899-4ed8-3f39-b288-94a1a54b0fb9",
              "name": "resources.rules.return-not-in-function",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.return-not-in-function"
              },
              "fullDescription": {
                "text": "`return` only makes sense inside a function"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "help": {
                "text": "`return` only makes sense inside a function\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "`return` only makes sense inside a function\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.return-not-in-function"
                ]
              }
            },
            {
              "id": "a1bccfd2-57dd-3d1b-bc50-1a77c71f57a5",
              "name": "resources.rules.return-not-in-function",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.return-not-in-function"
              },
              "fullDescription": {
                "text": "`return` only makes sense inside a function"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "help": {
                "text": "`return` only makes sense inside a function\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "`return` only makes sense inside a function\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.return-not-in-function"
                ]
              }
            },
            {
              "id": "06119f56-611a-3f45-8921-201a47d493d9",
              "name": "resources.rules.return-not-in-function",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.return-not-in-function"
              },
              "fullDescription": {
                "text": "`return` only makes sense inside a function"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "help": {
                "text": "`return` only makes sense inside a function\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "`return` only makes sense inside a function\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.return-not-in-function"
                ]
              }
            },
            {
              "id": "17f7bf2d-dec8-3a9d-b518-fced30ecfda0",
              "name": "resources.rules.return-not-in-function",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.return-not-in-function"
              },
              "fullDescription": {
                "text": "`return` only makes sense inside a function"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "help": {
                "text": "`return` only makes sense inside a function\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "`return` only makes sense inside a function\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.return-not-in-function"
                ]
              }
            },
            {
              "id": "80fce39b-37f9-360f-b9ad-d23a1dfe188e",
              "name": "resources.rules.return-not-in-function",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.return-not-in-function"
              },
              "fullDescription": {
                "text": "`return` only makes sense inside a function"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "help": {
                "text": "`return` only makes sense inside a function\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "`return` only makes sense inside a function\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.return-not-in-function"
                ]
              }
            },
            {
              "id": "78771338-6a8e-31f2-b04a-10242d986a97",
              "name": "resources.rules.return-not-in-function",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.return-not-in-function"
              },
              "fullDescription": {
                "text": "`return` only makes sense inside a function"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "help": {
                "text": "`return` only makes sense inside a function\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "`return` only makes sense inside a function\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.return-not-in-function"
                ]
              }
            },
            {
              "id": "0e1653e1-7e89-3a79-a3bf-50ab08241e28",
              "name": "resources.rules.return-not-in-function",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.return-not-in-function"
              },
              "fullDescription": {
                "text": "`return` only makes sense inside a function"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "help": {
                "text": "`return` only makes sense inside a function\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "`return` only makes sense inside a function\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.return-not-in-function"
                ]
              }
            },
            {
              "id": "07c99fe2-0c00-3c7c-b41e-027a1d6cdf2f",
              "name": "resources.rules.return-not-in-function",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.return-not-in-function"
              },
              "fullDescription": {
                "text": "`return` only makes sense inside a function"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "help": {
                "text": "`return` only makes sense inside a function\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "`return` only makes sense inside a function\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.return-not-in-function"
                ]
              }
            },
            {
              "id": "fc7e58c0-4b64-3cfe-adda-d0910c362ca8",
              "name": "resources.rules.return-not-in-function",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.return-not-in-function"
              },
              "fullDescription": {
                "text": "`return` only makes sense inside a function"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "help": {
                "text": "`return` only makes sense inside a function\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "`return` only makes sense inside a function\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.return-not-in-function"
                ]
              }
            },
            {
              "id": "8b5a5401-2c51-31ff-8ea3-5f7a1748b25f",
              "name": "resources.rules.return-not-in-function",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.return-not-in-function"
              },
              "fullDescription": {
                "text": "`return` only makes sense inside a function"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "help": {
                "text": "`return` only makes sense inside a function\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "`return` only makes sense inside a function\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.return-not-in-function"
                ]
              }
            },
            {
              "id": "950d7d69-9ebd-3b04-b505-734905f84226",
              "name": "resources.rules.return-not-in-function",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.return-not-in-function"
              },
              "fullDescription": {
                "text": "`return` only makes sense inside a function"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "help": {
                "text": "`return` only makes sense inside a function\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "`return` only makes sense inside a function\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.return-not-in-function"
                ]
              }
            },
            {
              "id": "d6924030-d1ce-30bc-aca4-e387838973a7",
              "name": "resources.rules.return-not-in-function",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.return-not-in-function"
              },
              "fullDescription": {
                "text": "`return` only makes sense inside a function"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "help": {
                "text": "`return` only makes sense inside a function\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "`return` only makes sense inside a function\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.return-not-in-function"
                ]
              }
            },
            {
              "id": "0f9d3f21-b033-39c3-b6ac-7b3cb40bdde6",
              "name": "resources.rules.return-not-in-function",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.return-not-in-function"
              },
              "fullDescription": {
                "text": "`return` only makes sense inside a function"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "help": {
                "text": "`return` only makes sense inside a function\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "`return` only makes sense inside a function\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.return-not-in-function"
                ]
              }
            },
            {
              "id": "f4743764-0cb3-302f-926c-1499479d51f6",
              "name": "resources.rules.useless-literal-dict",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.useless-literal-dict"
              },
              "fullDescription": {
                "text": "key `$X` is uselessly assigned twice"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "help": {
                "text": "key `$X` is uselessly assigned twice\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "key `$X` is uselessly assigned twice\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.useless-literal-dict"
                ]
              }
            },
            {
              "id": "a946df2b-22fd-30da-a3c4-d888aeb4b059",
              "name": "resources.rules.useless-literal-dict",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.useless-literal-dict"
              },
              "fullDescription": {
                "text": "key `$X` is uselessly assigned twice"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "help": {
                "text": "key `$X` is uselessly assigned twice\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "key `$X` is uselessly assigned twice\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.useless-literal-dict"
                ]
              }
            },
            {
              "id": "9e36e292-32b8-38c5-8367-1fcf1945c56d",
              "name": "resources.rules.useless-literal-dict",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.useless-literal-dict"
              },
              "fullDescription": {
                "text": "key `$X` is uselessly assigned twice"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "help": {
                "text": "key `$X` is uselessly assigned twice\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "key `$X` is uselessly assigned twice\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.useless-literal-dict"
                ]
              }
            },
            {
              "id": "93cd8fa2-bd3b-3f80-b9ca-350986befcc4",
              "name": "resources.rules.useless-literal-dict",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.useless-literal-dict"
              },
              "fullDescription": {
                "text": "key `$X` is uselessly assigned twice"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "help": {
                "text": "key `$X` is uselessly assigned twice\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "key `$X` is uselessly assigned twice\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.useless-literal-dict"
                ]
              }
            },
            {
              "id": "e8703c60-b44e-3d29-9d12-6c91f178372f",
              "name": "resources.rules.useless-literal-dict",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.useless-literal-dict"
              },
              "fullDescription": {
                "text": "key `$X` is uselessly assigned twice"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "help": {
                "text": "key `$X` is uselessly assigned twice\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "key `$X` is uselessly assigned twice\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.useless-literal-dict"
                ]
              }
            },
            {
              "id": "bdcd40b4-b2e7-3af0-9ca4-9584ac24f3d5",
              "name": "resources.rules.useless-literal-dict",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.useless-literal-dict"
              },
              "fullDescription": {
                "text": "key `$X` is uselessly assigned twice"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "help": {
                "text": "key `$X` is uselessly assigned twice\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "key `$X` is uselessly assigned twice\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.useless-literal-dict"
                ]
              }
            },
            {
              "id": "d5ef2c50-a454-3ef2-a294-b9b4465a3d9f",
              "name": "resources.rules.useless-literal-dict",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.useless-literal-dict"
              },
              "fullDescription": {
                "text": "key `$X` is uselessly assigned twice"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "help": {
                "text": "key `$X` is uselessly assigned twice\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "key `$X` is uselessly assigned twice\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.useless-literal-dict"
                ]
              }
            },
            {
              "id": "ea63207c-b989-3755-b6b4-16a2cab8efe6",
              "name": "resources.rules.useless-literal-dict",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.useless-literal-dict"
              },
              "fullDescription": {
                "text": "key `$X` is uselessly assigned twice"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "help": {
                "text": "key `$X` is uselessly assigned twice\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "key `$X` is uselessly assigned twice\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.useless-literal-dict"
                ]
              }
            },
            {
              "id": "181f5224-7685-3b96-8df7-acfca344de06",
              "name": "resources.rules.useless-literal-dict",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.useless-literal-dict"
              },
              "fullDescription": {
                "text": "key `$X` is uselessly assigned twice"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "help": {
                "text": "key `$X` is uselessly assigned twice\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "key `$X` is uselessly assigned twice\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.useless-literal-dict"
                ]
              }
            },
            {
              "id": "a818b5b4-683e-32d5-aeb6-dc9faae55487",
              "name": "resources.rules.useless-literal-dict",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.useless-literal-dict"
              },
              "fullDescription": {
                "text": "key `$X` is uselessly assigned twice"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "help": {
                "text": "key `$X` is uselessly assigned twice\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "key `$X` is uselessly assigned twice\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.useless-literal-dict"
                ]
              }
            },
            {
              "id": "5e25c592-7270-3236-9294-7ab5c6f5ea1f",
              "name": "resources.rules.useless-literal-dict",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.useless-literal-dict"
              },
              "fullDescription": {
                "text": "key `$X` is uselessly assigned twice"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "help": {
                "text": "key `$X` is uselessly assigned twice\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "key `$X` is uselessly assigned twice\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.useless-literal-dict"
                ]
              }
            },
            {
              "id": "bf01ac21-ceb1-3958-bd0d-f8b199a30d70",
              "name": "resources.rules.useless-literal-dict",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.useless-literal-dict"
              },
              "fullDescription": {
                "text": "key `$X` is uselessly assigned twice"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "help": {
                "text": "key `$X` is uselessly assigned twice\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "key `$X` is uselessly assigned twice\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.useless-literal-dict"
                ]
              }
            },
            {
              "id": "d3a9b0b5-e733-363e-aa6a-57778db1d311",
              "name": "resources.rules.useless-literal-dict",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.useless-literal-dict"
              },
              "fullDescription": {
                "text": "key `$X` is uselessly assigned twice"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "help": {
                "text": "key `$X` is uselessly assigned twice\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "key `$X` is uselessly assigned twice\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.useless-literal-dict"
                ]
              }
            },
            {
              "id": "1814db5f-07ba-31ab-85d7-f12b57390724",
              "name": "resources.rules.useless-literal-dict",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.useless-literal-dict"
              },
              "fullDescription": {
                "text": "key `$X` is uselessly assigned twice"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "help": {
                "text": "key `$X` is uselessly assigned twice\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "key `$X` is uselessly assigned twice\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.useless-literal-dict"
                ]
              }
            },
            {
              "id": "aa19ef5f-eab8-3b42-ba89-f00f1f01b311",
              "name": "resources.rules.useless-literal-dict",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.useless-literal-dict"
              },
              "fullDescription": {
                "text": "key `$X` is uselessly assigned twice"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "help": {
                "text": "key `$X` is uselessly assigned twice\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "key `$X` is uselessly assigned twice\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.useless-literal-dict"
                ]
              }
            },
            {
              "id": "5bc5e67f-373c-38ad-bec5-9fbb9fe1fe1b",
              "name": "resources.rules.useless-literal-dict",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.useless-literal-dict"
              },
              "fullDescription": {
                "text": "key `$X` is uselessly assigned twice"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "help": {
                "text": "key `$X` is uselessly assigned twice\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "key `$X` is uselessly assigned twice\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.useless-literal-dict"
                ]
              }
            },
            {
              "id": "cdd59526-2b1a-3604-915f-d117a630e4a2",
              "name": "resources.rules.useless-literal-dict",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.useless-literal-dict"
              },
              "fullDescription": {
                "text": "key `$X` is uselessly assigned twice"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "help": {
                "text": "key `$X` is uselessly assigned twice\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "key `$X` is uselessly assigned twice\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.useless-literal-dict"
                ]
              }
            },
            {
              "id": "0003e19f-1870-3cb0-a348-5ffb59975451",
              "name": "resources.rules.useless-literal-dict",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.useless-literal-dict"
              },
              "fullDescription": {
                "text": "key `$X` is uselessly assigned twice"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "help": {
                "text": "key `$X` is uselessly assigned twice\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "key `$X` is uselessly assigned twice\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.useless-literal-dict"
                ]
              }
            },
            {
              "id": "bf46b9e4-3a0e-304b-a791-d453aa9c089f",
              "name": "resources.rules.return-in-init",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.return-in-init"
              },
              "fullDescription": {
                "text": "`return` should never appear inside a class __init__ function. This will cause a runtime error."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "error"
              },
              "help": {
                "text": "`return` should never appear inside a class __init__ function. This will cause a runtime error.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "`return` should never appear inside a class __init__ function. This will cause a runtime error.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.return-in-init"
                ]
              }
            },
            {
              "id": "8c584bda-9112-3b5c-b2f0-e8799a943361",
              "name": "resources.rules.return-in-init",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.return-in-init"
              },
              "fullDescription": {
                "text": "`return` should never appear inside a class __init__ function. This will cause a runtime error."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "error"
              },
              "help": {
                "text": "`return` should never appear inside a class __init__ function. This will cause a runtime error.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "`return` should never appear inside a class __init__ function. This will cause a runtime error.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.return-in-init"
                ]
              }
            },
            {
              "id": "c3a3c8f4-fc40-3964-b54e-3258a1b361f4",
              "name": "resources.rules.return-in-init",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.return-in-init"
              },
              "fullDescription": {
                "text": "`return` should never appear inside a class __init__ function. This will cause a runtime error."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "error"
              },
              "help": {
                "text": "`return` should never appear inside a class __init__ function. This will cause a runtime error.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "`return` should never appear inside a class __init__ function. This will cause a runtime error.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.return-in-init"
                ]
              }
            },
            {
              "id": "072f7e05-3d8a-324b-ad46-bd8758165262",
              "name": "resources.rules.return-in-init",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.return-in-init"
              },
              "fullDescription": {
                "text": "`return` should never appear inside a class __init__ function. This will cause a runtime error."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "error"
              },
              "help": {
                "text": "`return` should never appear inside a class __init__ function. This will cause a runtime error.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "`return` should never appear inside a class __init__ function. This will cause a runtime error.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.return-in-init"
                ]
              }
            },
            {
              "id": "d810cf53-234b-3721-8688-c235f3ebe443",
              "name": "resources.rules.dlint-catastrophic-redos",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.dlint-catastrophic-redos"
              },
              "fullDescription": {
                "text": "Regex `$X` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "error"
              },
              "help": {
                "text": "Regex `$X` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Regex `$X` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [https://r2c.dev/blog/2020/finding-python-redos-bugs-at-scale-using-dlint-and-r2c/](https://r2c.dev/blog/2020/finding-python-redos-bugs-at-scale-using-dlint-and-r2c/)\n - [https://r2c.dev/blog/2020/improving-redos-detection-with-dlint-and-r2c/](https://r2c.dev/blog/2020/improving-redos-detection-with-dlint-and-r2c/)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.dlint-catastrophic-redos"
                ]
              }
            },
            {
              "id": "a8a9e473-27e9-3d79-acd4-d1bba363e3de",
              "name": "resources.rules.tempfile-without-flush",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.tempfile-without-flush"
              },
              "fullDescription": {
                "text": "Using '$F.name' without '.flush()' or '.close()' may cause an error because the file may not exist when '$F.name' is used. Use '.flush()' or close the file before using '$F.name'."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "error"
              },
              "help": {
                "text": "Using '$F.name' without '.flush()' or '.close()' may cause an error because the file may not exist when '$F.name' is used. Use '.flush()' or close the file before using '$F.name'.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Using '$F.name' without '.flush()' or '.close()' may cause an error because the file may not exist when '$F.name' is used. Use '.flush()' or close the file before using '$F.name'.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.tempfile-without-flush"
                ]
              }
            },
            {
              "id": "57605913-21e0-3fee-8db4-92afbc20f917",
              "name": "resources.rules.tempfile-without-flush",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.tempfile-without-flush"
              },
              "fullDescription": {
                "text": "Using '$F.name' without '.flush()' or '.close()' may cause an error because the file may not exist when '$F.name' is used. Use '.flush()' or close the file before using '$F.name'."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "error"
              },
              "help": {
                "text": "Using '$F.name' without '.flush()' or '.close()' may cause an error because the file may not exist when '$F.name' is used. Use '.flush()' or close the file before using '$F.name'.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Using '$F.name' without '.flush()' or '.close()' may cause an error because the file may not exist when '$F.name' is used. Use '.flush()' or close the file before using '$F.name'.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.tempfile-without-flush"
                ]
              }
            },
            {
              "id": "686bbfb6-bb88-3463-a879-5d64c8ae24ac",
              "name": "resources.rules.tempfile-without-flush",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.tempfile-without-flush"
              },
              "fullDescription": {
                "text": "Using '$F.name' without '.flush()' or '.close()' may cause an error because the file may not exist when '$F.name' is used. Use '.flush()' or close the file before using '$F.name'."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "error"
              },
              "help": {
                "text": "Using '$F.name' without '.flush()' or '.close()' may cause an error because the file may not exist when '$F.name' is used. Use '.flush()' or close the file before using '$F.name'.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Using '$F.name' without '.flush()' or '.close()' may cause an error because the file may not exist when '$F.name' is used. Use '.flush()' or close the file before using '$F.name'.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.tempfile-without-flush"
                ]
              }
            },
            {
              "id": "6f38f8a8-cd32-3af1-a0f9-0c08a811b155",
              "name": "resources.rules.tempfile-without-flush",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.tempfile-without-flush"
              },
              "fullDescription": {
                "text": "Using '$F.name' without '.flush()' or '.close()' may cause an error because the file may not exist when '$F.name' is used. Use '.flush()' or close the file before using '$F.name'."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "error"
              },
              "help": {
                "text": "Using '$F.name' without '.flush()' or '.close()' may cause an error because the file may not exist when '$F.name' is used. Use '.flush()' or close the file before using '$F.name'.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Using '$F.name' without '.flush()' or '.close()' may cause an error because the file may not exist when '$F.name' is used. Use '.flush()' or close the file before using '$F.name'.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.tempfile-without-flush"
                ]
              }
            },
            {
              "id": "a4c3c2fa-470a-3852-a151-8633fc55596d",
              "name": "resources.rules.dlint-catastrophic-redos",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.dlint-catastrophic-redos"
              },
              "fullDescription": {
                "text": "Regex `$X` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "error"
              },
              "help": {
                "text": "Regex `$X` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Regex `$X` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [https://r2c.dev/blog/2020/finding-python-redos-bugs-at-scale-using-dlint-and-r2c/](https://r2c.dev/blog/2020/finding-python-redos-bugs-at-scale-using-dlint-and-r2c/)\n - [https://r2c.dev/blog/2020/improving-redos-detection-with-dlint-and-r2c/](https://r2c.dev/blog/2020/improving-redos-detection-with-dlint-and-r2c/)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.dlint-catastrophic-redos"
                ]
              }
            },
            {
              "id": "19badc14-fc57-30e1-aced-d2367d696fc3",
              "name": "resources.rules.dlint-catastrophic-redos",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.dlint-catastrophic-redos"
              },
              "fullDescription": {
                "text": "Regex `$X` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "error"
              },
              "help": {
                "text": "Regex `$X` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Regex `$X` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [https://r2c.dev/blog/2020/finding-python-redos-bugs-at-scale-using-dlint-and-r2c/](https://r2c.dev/blog/2020/finding-python-redos-bugs-at-scale-using-dlint-and-r2c/)\n - [https://r2c.dev/blog/2020/improving-redos-detection-with-dlint-and-r2c/](https://r2c.dev/blog/2020/improving-redos-detection-with-dlint-and-r2c/)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.dlint-catastrophic-redos"
                ]
              }
            },
            {
              "id": "58889dcb-8bcd-34b5-af8e-afba8a66e6a0",
              "name": "resources.rules.dlint-catastrophic-redos",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.dlint-catastrophic-redos"
              },
              "fullDescription": {
                "text": "Regex `$X` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "error"
              },
              "help": {
                "text": "Regex `$X` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Regex `$X` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [https://r2c.dev/blog/2020/finding-python-redos-bugs-at-scale-using-dlint-and-r2c/](https://r2c.dev/blog/2020/finding-python-redos-bugs-at-scale-using-dlint-and-r2c/)\n - [https://r2c.dev/blog/2020/improving-redos-detection-with-dlint-and-r2c/](https://r2c.dev/blog/2020/improving-redos-detection-with-dlint-and-r2c/)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.dlint-catastrophic-redos"
                ]
              }
            },
            {
              "id": "7e152d95-7b50-3951-97e7-d1032416502f",
              "name": "resources.rules.dlint-catastrophic-redos",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.dlint-catastrophic-redos"
              },
              "fullDescription": {
                "text": "Regex `$X` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "error"
              },
              "help": {
                "text": "Regex `$X` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Regex `$X` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [https://r2c.dev/blog/2020/finding-python-redos-bugs-at-scale-using-dlint-and-r2c/](https://r2c.dev/blog/2020/finding-python-redos-bugs-at-scale-using-dlint-and-r2c/)\n - [https://r2c.dev/blog/2020/improving-redos-detection-with-dlint-and-r2c/](https://r2c.dev/blog/2020/improving-redos-detection-with-dlint-and-r2c/)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.dlint-catastrophic-redos"
                ]
              }
            },
            {
              "id": "8253b8fd-91ea-3ece-b983-d86728852689",
              "name": "resources.rules.dlint-catastrophic-redos",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.dlint-catastrophic-redos"
              },
              "fullDescription": {
                "text": "Regex `$X` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "error"
              },
              "help": {
                "text": "Regex `$X` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Regex `$X` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [https://r2c.dev/blog/2020/finding-python-redos-bugs-at-scale-using-dlint-and-r2c/](https://r2c.dev/blog/2020/finding-python-redos-bugs-at-scale-using-dlint-and-r2c/)\n - [https://r2c.dev/blog/2020/improving-redos-detection-with-dlint-and-r2c/](https://r2c.dev/blog/2020/improving-redos-detection-with-dlint-and-r2c/)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.dlint-catastrophic-redos"
                ]
              }
            },
            {
              "id": "1af983de-efa3-351c-b52d-a1ef65ac0ebe",
              "name": "resources.rules.dlint-catastrophic-redos",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.dlint-catastrophic-redos"
              },
              "fullDescription": {
                "text": "Regex `$X` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "error"
              },
              "help": {
                "text": "Regex `$X` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Regex `$X` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [https://r2c.dev/blog/2020/finding-python-redos-bugs-at-scale-using-dlint-and-r2c/](https://r2c.dev/blog/2020/finding-python-redos-bugs-at-scale-using-dlint-and-r2c/)\n - [https://r2c.dev/blog/2020/improving-redos-detection-with-dlint-and-r2c/](https://r2c.dev/blog/2020/improving-redos-detection-with-dlint-and-r2c/)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.dlint-catastrophic-redos"
                ]
              }
            },
            {
              "id": "900ccc2d-743f-3223-9a13-ae3b82a8829a",
              "name": "resources.rules.return-not-in-function",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.return-not-in-function"
              },
              "fullDescription": {
                "text": "`return` only makes sense inside a function"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "help": {
                "text": "`return` only makes sense inside a function\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "`return` only makes sense inside a function\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.return-not-in-function"
                ]
              }
            },
            {
              "id": "36ab5527-2987-3062-a89f-1ca6c1f4f2ca",
              "name": "resources.rules.insecure-hash-algorithm-md5",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.insecure-hash-algorithm-md5"
              },
              "fullDescription": {
                "text": "Detected MD5 hash algorithm which is considered insecure. MD5 is not\ncollision resistant and is therefore not suitable as a cryptographic\nsignature. Use SHA256 or SHA3 instead.\n"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "help": {
                "text": "Detected MD5 hash algorithm which is considered insecure. MD5 is not\ncollision resistant and is therefore not suitable as a cryptographic\nsignature. Use SHA256 or SHA3 instead.\n\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Detected MD5 hash algorithm which is considered insecure. MD5 is not\ncollision resistant and is therefore not suitable as a cryptographic\nsignature. Use SHA256 or SHA3 instead.\n\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [https://tools.ietf.org/html/rfc6151](https://tools.ietf.org/html/rfc6151)\n - [https://crypto.stackexchange.com/questions/44151/how-does-the-flame-malware-take-advantage-of-md5-collision](https://crypto.stackexchange.com/questions/44151/how-does-the-flame-malware-take-advantage-of-md5-collision)\n - [https://pycryptodome.readthedocs.io/en/latest/src/hash/sha3_256.html](https://pycryptodome.readthedocs.io/en/latest/src/hash/sha3_256.html)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.insecure-hash-algorithm-md5"
                ]
              }
            },
            {
              "id": "03a1cf33-3652-33ef-9580-3ccc6b50ef49",
              "name": "resources.rules.return-in-init",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.return-in-init"
              },
              "fullDescription": {
                "text": "`return` should never appear inside a class __init__ function. This will cause a runtime error."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "error"
              },
              "help": {
                "text": "`return` should never appear inside a class __init__ function. This will cause a runtime error.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "`return` should never appear inside a class __init__ function. This will cause a runtime error.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.return-in-init"
                ]
              }
            },
            {
              "id": "b6f4b6f2-d534-380f-ac25-2dbfc59a4e0e",
              "name": "resources.rules.return-in-init",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.return-in-init"
              },
              "fullDescription": {
                "text": "`return` should never appear inside a class __init__ function. This will cause a runtime error."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "error"
              },
              "help": {
                "text": "`return` should never appear inside a class __init__ function. This will cause a runtime error.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "`return` should never appear inside a class __init__ function. This will cause a runtime error.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.return-in-init"
                ]
              }
            },
            {
              "id": "b44657b3-248e-3216-b015-bef48c47dca5",
              "name": "resources.rules.return-in-init",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.return-in-init"
              },
              "fullDescription": {
                "text": "`return` should never appear inside a class __init__ function. This will cause a runtime error."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "error"
              },
              "help": {
                "text": "`return` should never appear inside a class __init__ function. This will cause a runtime error.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "`return` should never appear inside a class __init__ function. This will cause a runtime error.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.return-in-init"
                ]
              }
            },
            {
              "id": "3f8058d7-afdf-3174-9626-e09955c396af",
              "name": "resources.rules.insecure-hash-algorithm-md5",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.insecure-hash-algorithm-md5"
              },
              "fullDescription": {
                "text": "Detected MD5 hash algorithm which is considered insecure. MD5 is not\ncollision resistant and is therefore not suitable as a cryptographic\nsignature. Use SHA256 or SHA3 instead.\n"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "help": {
                "text": "Detected MD5 hash algorithm which is considered insecure. MD5 is not\ncollision resistant and is therefore not suitable as a cryptographic\nsignature. Use SHA256 or SHA3 instead.\n\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Detected MD5 hash algorithm which is considered insecure. MD5 is not\ncollision resistant and is therefore not suitable as a cryptographic\nsignature. Use SHA256 or SHA3 instead.\n\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [https://tools.ietf.org/html/rfc6151](https://tools.ietf.org/html/rfc6151)\n - [https://crypto.stackexchange.com/questions/44151/how-does-the-flame-malware-take-advantage-of-md5-collision](https://crypto.stackexchange.com/questions/44151/how-does-the-flame-malware-take-advantage-of-md5-collision)\n - [https://pycryptodome.readthedocs.io/en/latest/src/hash/sha3_256.html](https://pycryptodome.readthedocs.io/en/latest/src/hash/sha3_256.html)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.insecure-hash-algorithm-md5"
                ]
              }
            },
            {
              "id": "dabe961d-c9ca-3a51-912c-4517d84514e9",
              "name": "resources.rules.return-in-init",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.return-in-init"
              },
              "fullDescription": {
                "text": "`return` should never appear inside a class __init__ function. This will cause a runtime error."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "error"
              },
              "help": {
                "text": "`return` should never appear inside a class __init__ function. This will cause a runtime error.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "`return` should never appear inside a class __init__ function. This will cause a runtime error.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.return-in-init"
                ]
              }
            },
            {
              "id": "55a37a52-e229-3142-aa78-8b1054088fb5",
              "name": "resources.rules.return-in-init",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.return-in-init"
              },
              "fullDescription": {
                "text": "`return` should never appear inside a class __init__ function. This will cause a runtime error."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "error"
              },
              "help": {
                "text": "`return` should never appear inside a class __init__ function. This will cause a runtime error.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "`return` should never appear inside a class __init__ function. This will cause a runtime error.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.return-in-init"
                ]
              }
            },
            {
              "id": "0db64735-0837-3f47-ba63-3a5dd3704bf2",
              "name": "resources.rules.return-in-init",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.return-in-init"
              },
              "fullDescription": {
                "text": "`return` should never appear inside a class __init__ function. This will cause a runtime error."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "error"
              },
              "help": {
                "text": "`return` should never appear inside a class __init__ function. This will cause a runtime error.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "`return` should never appear inside a class __init__ function. This will cause a runtime error.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.return-in-init"
                ]
              }
            },
            {
              "id": "cdb61223-10e3-3b44-bfb1-fb929f4f35c7",
              "name": "resources.rules.return-in-init",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.return-in-init"
              },
              "fullDescription": {
                "text": "`return` should never appear inside a class __init__ function. This will cause a runtime error."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "error"
              },
              "help": {
                "text": "`return` should never appear inside a class __init__ function. This will cause a runtime error.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "`return` should never appear inside a class __init__ function. This will cause a runtime error.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.return-in-init"
                ]
              }
            },
            {
              "id": "fc9cff88-957e-3e09-b77f-cbd133040ed2",
              "name": "resources.rules.return-in-init",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.return-in-init"
              },
              "fullDescription": {
                "text": "`return` should never appear inside a class __init__ function. This will cause a runtime error."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "error"
              },
              "help": {
                "text": "`return` should never appear inside a class __init__ function. This will cause a runtime error.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "`return` should never appear inside a class __init__ function. This will cause a runtime error.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.return-in-init"
                ]
              }
            },
            {
              "id": "a2383e02-4760-30ed-9bd8-dd6c2ffc7faf",
              "name": "resources.rules.return-in-init",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.return-in-init"
              },
              "fullDescription": {
                "text": "`return` should never appear inside a class __init__ function. This will cause a runtime error."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "error"
              },
              "help": {
                "text": "`return` should never appear inside a class __init__ function. This will cause a runtime error.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "`return` should never appear inside a class __init__ function. This will cause a runtime error.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.return-in-init"
                ]
              }
            },
            {
              "id": "a22d324f-8129-31c9-a2a8-e8b7ebdfc7a2",
              "name": "resources.rules.return-in-init",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.return-in-init"
              },
              "fullDescription": {
                "text": "`return` should never appear inside a class __init__ function. This will cause a runtime error."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "error"
              },
              "help": {
                "text": "`return` should never appear inside a class __init__ function. This will cause a runtime error.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "`return` should never appear inside a class __init__ function. This will cause a runtime error.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.return-in-init"
                ]
              }
            },
            {
              "id": "871328de-dc82-372e-8c81-54944a98ef24",
              "name": "resources.rules.return-in-init",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.return-in-init"
              },
              "fullDescription": {
                "text": "`return` should never appear inside a class __init__ function. This will cause a runtime error."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "error"
              },
              "help": {
                "text": "`return` should never appear inside a class __init__ function. This will cause a runtime error.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "`return` should never appear inside a class __init__ function. This will cause a runtime error.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.return-in-init"
                ]
              }
            },
            {
              "id": "7d31b4e3-d5ac-3c9f-b33d-1cd2c19de787",
              "name": "resources.rules.dangerous-system-call",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.dangerous-system-call"
              },
              "fullDescription": {
                "text": "Found dynamic content used in a system call. This is dangerous if external data can reach this function call because it allows a malicious actor to execute commands. Use the 'subprocess' module instead, which is easier to use without accidentally exposing a command injection vulnerability."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "help": {
                "text": "Found dynamic content used in a system call. This is dangerous if external data can reach this function call because it allows a malicious actor to execute commands. Use the 'subprocess' module instead, which is easier to use without accidentally exposing a command injection vulnerability.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Found dynamic content used in a system call. This is dangerous if external data can reach this function call because it allows a malicious actor to execute commands. Use the 'subprocess' module instead, which is easier to use without accidentally exposing a command injection vulnerability.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.dangerous-system-call"
                ]
              }
            },
            {
              "id": "347fd815-a97d-395f-8148-9760a7522f2e",
              "name": "resources.rules.insecure-hash-algorithm-md5",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.insecure-hash-algorithm-md5"
              },
              "fullDescription": {
                "text": "Detected MD5 hash algorithm which is considered insecure. MD5 is not\ncollision resistant and is therefore not suitable as a cryptographic\nsignature. Use SHA256 or SHA3 instead.\n"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "help": {
                "text": "Detected MD5 hash algorithm which is considered insecure. MD5 is not\ncollision resistant and is therefore not suitable as a cryptographic\nsignature. Use SHA256 or SHA3 instead.\n\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Detected MD5 hash algorithm which is considered insecure. MD5 is not\ncollision resistant and is therefore not suitable as a cryptographic\nsignature. Use SHA256 or SHA3 instead.\n\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [https://tools.ietf.org/html/rfc6151](https://tools.ietf.org/html/rfc6151)\n - [https://crypto.stackexchange.com/questions/44151/how-does-the-flame-malware-take-advantage-of-md5-collision](https://crypto.stackexchange.com/questions/44151/how-does-the-flame-malware-take-advantage-of-md5-collision)\n - [https://pycryptodome.readthedocs.io/en/latest/src/hash/sha3_256.html](https://pycryptodome.readthedocs.io/en/latest/src/hash/sha3_256.html)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.insecure-hash-algorithm-md5"
                ]
              }
            },
            {
              "id": "989f18d5-b1eb-34d0-87af-1c374707b095",
              "name": "python.lang.security.deserialization.pickle.avoid-pickle",
              "shortDescription": {
                "text": "Opengrep Finding: python.lang.security.deserialization.pickle.avoid-pickle"
              },
              "fullDescription": {
                "text": "Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://semgrep.dev/r/python.lang.security.deserialization.pickle.avoid-pickle",
              "help": {
                "text": "Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/python.lang.security.deserialization.pickle.avoid-pickle)\n - [https://docs.python.org/3/library/pickle.html](https://docs.python.org/3/library/pickle.html)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "python.lang.security.deserialization.pickle.avoid-pickle"
                ]
              }
            },
            {
              "id": "b1379111-86b9-3856-9fa6-ba6d6633c705",
              "name": "resources.rules.dlint-catastrophic-redos",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.dlint-catastrophic-redos"
              },
              "fullDescription": {
                "text": "Regex `$X` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "error"
              },
              "help": {
                "text": "Regex `$X` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Regex `$X` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [https://r2c.dev/blog/2020/finding-python-redos-bugs-at-scale-using-dlint-and-r2c/](https://r2c.dev/blog/2020/finding-python-redos-bugs-at-scale-using-dlint-and-r2c/)\n - [https://r2c.dev/blog/2020/improving-redos-detection-with-dlint-and-r2c/](https://r2c.dev/blog/2020/improving-redos-detection-with-dlint-and-r2c/)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.dlint-catastrophic-redos"
                ]
              }
            },
            {
              "id": "df39b683-3a43-3d6b-b1bf-08fcce8b8615",
              "name": "python.lang.security.deserialization.pickle.avoid-pickle",
              "shortDescription": {
                "text": "Opengrep Finding: python.lang.security.deserialization.pickle.avoid-pickle"
              },
              "fullDescription": {
                "text": "Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://semgrep.dev/r/python.lang.security.deserialization.pickle.avoid-pickle",
              "help": {
                "text": "Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/python.lang.security.deserialization.pickle.avoid-pickle)\n - [https://docs.python.org/3/library/pickle.html](https://docs.python.org/3/library/pickle.html)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "python.lang.security.deserialization.pickle.avoid-pickle"
                ]
              }
            }
          ],
          "language": "en-US",
          "contents": [
            "localizedData",
            "nonLocalizedData"
          ],
          "isComprehensive": false
        }
      },
      "language": "en-US",
      "results": [
        {
          "ruleId": "74a9a005-5371-361b-b8ee-b6332f0f5440",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Found dynamic content used in a system call. This is dangerous if external data can reach this function call because it allows a malicious actor to execute commands. Use the 'subprocess' module instead, which is easier to use without accidentally exposing a command injection vulnerability."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "disassemblers/adreno/__init__.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 12,
                  "startColumn": 7,
                  "endLine": 12,
                  "endColumn": 97,
                  "snippet": {
                    "text": "      os.system(f'cd {pathlib.Path(__file__).parent} && gcc -shared disasm-a3xx.c -o disasm.so')"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "0b7756ecb521583b90988fa78fe053b469add811bb4e70dfef18516159789d8b60b3f419011e2ae1cc25459626146ab9bc11385473a7c4a65a460da186c57b9c_0"
          },
          "properties": {}
        },
        {
          "ruleId": "4364ff3c-2dbc-3880-b160-ecc7b3ab6116",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "The software generates an error message that includes sensitive information about its environment, users, or associated data. In particular, exposure of memory addresses might defeat ASLR."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "disassemblers/adreno/disasm-a3xx.c",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 233,
                  "startColumn": 7,
                  "endLine": 234,
                  "endColumn": 34,
                  "snippet": {
                    "text": "      fprintf(ctx->out, \" %sp0.%c,\", cat0->inv0 ? \"!\" : \"\",\n          component[cat0->comp0]);"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "25c482d04c5e1ec149efad1ac024323ae57f00611906735fd3e6f4051e0b2c13c072227140da890cd81e0bee138d14af19380f91a368aaf2158c9d397b24aee2_0"
          },
          "properties": {}
        },
        {
          "ruleId": "4602bdc3-ff8d-314d-8d29-17584e7e3aa1",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "The software generates an error message that includes sensitive information about its environment, users, or associated data. In particular, exposure of memory addresses might defeat ASLR."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "disassemblers/adreno/disasm-a3xx.c",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 224,
                  "startColumn": 5,
                  "endLine": 225,
                  "endColumn": 32,
                  "snippet": {
                    "text": "    fprintf(ctx->out, \" %sp0.%c\", cat0->inv0 ? \"!\" : \"\",\n        component[cat0->comp0]);"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "92927855d31c5d40bebae92c34a92e2e45a6577708ed5d3ae05688cc8925849278172e64d85114d6d69f4908b74125a522fe389e362e3420e21d11dd6baa52fb_0"
          },
          "properties": {}
        },
        {
          "ruleId": "def12a7c-1ee6-391f-aafb-14835c143bba",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "The software generates an error message that includes sensitive information about its environment, users, or associated data. In particular, exposure of memory addresses might defeat ASLR."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "disassemblers/adreno/disasm-a3xx.c",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 237,
                  "startColumn": 7,
                  "endLine": 238,
                  "endColumn": 34,
                  "snippet": {
                    "text": "      fprintf(ctx->out, \" %sp0.%c,\", cat0->inv1 ? \"!\" : \"\",\n          component[cat0->comp1]);"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "25c482d04c5e1ec149efad1ac024323ae57f00611906735fd3e6f4051e0b2c13c072227140da890cd81e0bee138d14af19380f91a368aaf2158c9d397b24aee2_1"
          },
          "properties": {}
        },
        {
          "ruleId": "ec9842eb-3e96-3e49-b0a3-51c88299a5ef",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "The software generates an error message that includes sensitive information about its environment, users, or associated data. In particular, exposure of memory addresses might defeat ASLR."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "disassemblers/adreno/disasm-a3xx.c",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 291,
                  "startColumn": 7,
                  "endLine": 291,
                  "endColumn": 49,
                  "snippet": {
                    "text": "      fprintf(ctx->out, \"0x%08x\", cat1->uim_val);"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "902c7049f6e60b93443adc763be5588b06e6c63373b139fb1768344678f2617b7fe5ca935f0df7940a746968cedfc9c0f290557fb7d50ffe8ad32f6ae3afc185_0"
          },
          "properties": {}
        },
        {
          "ruleId": "f21a41ac-a1bc-3e39-873e-107e8f9a6448",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "The software generates an error message that includes sensitive information about its environment, users, or associated data. In particular, exposure of memory addresses might defeat ASLR."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "disassemblers/adreno/disasm-a3xx.c",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 252,
                  "startColumn": 5,
                  "endLine": 252,
                  "endColumn": 66,
                  "snippet": {
                    "text": "    fprintf(ctx->out, \"\\t{0: %x,%x}\", cat0->dummy3, cat0->dummy4);"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "69110d62e9ee6d2ee7f2d31273cfe979ff853f0df0b87c211cf9fc58af77b6c25e9b434b22f382e3f1732690f396683d3a7f9a06670aad7c96e69ed14a27b508_0"
          },
          "properties": {}
        },
        {
          "ruleId": "e839c464-5912-3275-90f3-2923315a821b",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "The software generates an error message that includes sensitive information about its environment, users, or associated data. In particular, exposure of memory addresses might defeat ASLR."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "disassemblers/adreno/disasm-a3xx.c",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 498,
                  "startColumn": 5,
                  "endLine": 498,
                  "endColumn": 66,
                  "snippet": {
                    "text": "    fprintf(ctx->out, \"\\t{4: %x,%x}\", cat4->dummy1, cat4->dummy2);"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "a4177f3d2b0617abd4f90f331b68779d574857fcc27cea8067cde08cc0eecd3a470e36d5234b1a4567ac8744fb9cc67715bbb870d2528bd0e230562cdc0f7114_0"
          },
          "properties": {}
        },
        {
          "ruleId": "a6f78e54-fd34-339c-92c6-10c68d87e979",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "The software generates an error message that includes sensitive information about its environment, users, or associated data. In particular, exposure of memory addresses might defeat ASLR."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "disassemblers/adreno/disasm-a3xx.c",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 318,
                  "startColumn": 5,
                  "endLine": 318,
                  "endColumn": 52,
                  "snippet": {
                    "text": "    fprintf(ctx->out, \"\\t{1: %x}\", cat1->must_be_0);"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "7336b864c7643c88167d580e2b425ff95305f01bd6d3e6baded3efcb04444a30cbbe53a016138e7aa93bc6207293149ed54502f49b8f0a8e149b2a396e5875ae_0"
          },
          "properties": {}
        },
        {
          "ruleId": "b04e13a4-d243-3ff8-9e7f-7811e6cdae80",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "The software generates an error message that includes sensitive information about its environment, users, or associated data. In particular, exposure of memory addresses might defeat ASLR."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "disassemblers/adreno/disasm-a3xx.c",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 665,
                  "startColumn": 9,
                  "endLine": 665,
                  "endColumn": 58,
                  "snippet": {
                    "text": "        fprintf(ctx->out, \"\\t{5: %x}\", cat5->norm.dummy1);"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "d4814469eaf23f593f566f634b42df37fbd3c81e764be4a2c3a706d49c2dffb20c5d4bbc0ac2ae183857f143192fec0a1ca8b49245a95cf0f504390e2b107b7d_1"
          },
          "properties": {}
        },
        {
          "ruleId": "916d78a5-24e4-3087-b21a-7ff1f0062e63",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "The software generates an error message that includes sensitive information about its environment, users, or associated data. In particular, exposure of memory addresses might defeat ASLR."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "disassemblers/adreno/disasm-a3xx.c",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 662,
                  "startColumn": 9,
                  "endLine": 662,
                  "endColumn": 67,
                  "snippet": {
                    "text": "        fprintf(ctx->out, \"\\t{5: %x}\", cat5->s2en_bindless.dummy1);"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "d4814469eaf23f593f566f634b42df37fbd3c81e764be4a2c3a706d49c2dffb20c5d4bbc0ac2ae183857f143192fec0a1ca8b49245a95cf0f504390e2b107b7d_0"
          },
          "properties": {}
        },
        {
          "ruleId": "f518c57e-069c-3c1a-8302-e6de6f411919",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "The software generates an error message that includes sensitive information about its environment, users, or associated data. In particular, exposure of memory addresses might defeat ASLR."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "disassemblers/adreno/disasm-a3xx.c",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 816,
                  "startColumn": 7,
                  "endLine": 816,
                  "endColumn": 81,
                  "snippet": {
                    "text": "      fprintf(ctx->out, \" (pad0=%x, pad3=%x)\", cat6->stgb.pad0, cat6->stgb.pad3);"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "429489b4c7090847779cd68c33526a329c02f719921a0443a8fd06ee386bf0acefdf58dbe89c8f7e861eefce36bfd5ec447397c046f3da72b4cdb7b44fb86841_0"
          },
          "properties": {}
        },
        {
          "ruleId": "5cbd9348-a7f2-3d7f-a641-ca425e6b883c",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "disassemblers/adreno/disasm-a3xx.c",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 596,
                  "startColumn": 14,
                  "endLine": 596,
                  "endColumn": 71,
                  "snippet": {
                    "text": "    unsigned base = (cat5->s2en_bindless.base_hi << 1) | cat5->base_lo;"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "f3854549703a061b1b9dc43a3b101458de54b34cdec241f7b54192e39ee8231569d19eda48b9e837030d48364ffadc7ca9da8c551a796b801c215755b8545130_0"
          },
          "properties": {}
        },
        {
          "ruleId": "c4cfba39-bc2c-3f62-a966-2c8e417fa15a",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "The software generates an error message that includes sensitive information about its environment, users, or associated data. In particular, exposure of memory addresses might defeat ASLR."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "disassemblers/adreno/disasm-a3xx.c",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 854,
                  "startColumn": 9,
                  "endLine": 855,
                  "endColumn": 49,
                  "snippet": {
                    "text": "        fprintf(ctx->out, \" (pad0=%x, pad3=%x, mustbe0=%x)\", cat6->ldgb.pad0,\n            cat6->ldgb.pad3, cat6->ldgb.mustbe0);"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "8c51577b148bcb937b1b85308af03b705c896b509cd9b4a534b4536a42beabbadf28afcad4bd0fa7661f551f854b420e0cdf66d9a362f961ce81bd48ae2e5d8f_0"
          },
          "properties": {}
        },
        {
          "ruleId": "fc6dbac5-0712-3f4a-ae2e-ff9d27a60605",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "The software generates an error message that includes sensitive information about its environment, users, or associated data. In particular, exposure of memory addresses might defeat ASLR."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "disassemblers/adreno/disasm-a3xx.c",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 864,
                  "startColumn": 9,
                  "endLine": 866,
                  "endColumn": 49,
                  "snippet": {
                    "text": "        fprintf(ctx->out, \" (src3=%x, pad0=%x, pad3=%x, mustbe0=%x)\",\n            cat6->ldgb.src3, cat6->ldgb.pad0,\n            cat6->ldgb.pad3, cat6->ldgb.mustbe0);"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "07141a42619240080cdd8fc9599fcb780ef9f1beafb60a83f7e245a72a239897c5d816dc4849161e5e6d12ca1c2c2f627b3bc6812278b51ebd7bb45a8f38d59d_0"
          },
          "properties": {}
        },
        {
          "ruleId": "4f8621b3-6741-3716-a7a6-2cc3e5351f92",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "The software generates an error message that includes sensitive information about its environment, users, or associated data. In particular, exposure of memory addresses might defeat ASLR."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "disassemblers/adreno/disasm-a3xx.c",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 895,
                  "startColumn": 7,
                  "endLine": 895,
                  "endColumn": 113,
                  "snippet": {
                    "text": "      fprintf(ctx->out, \" (pad0=%x, pad3=%x, mustbe0=%x)\", cat6->ldgb.pad0, cat6->ldgb.pad3, cat6->ldgb.mustbe0);"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "8c51577b148bcb937b1b85308af03b705c896b509cd9b4a534b4536a42beabbadf28afcad4bd0fa7661f551f854b420e0cdf66d9a362f961ce81bd48ae2e5d8f_1"
          },
          "properties": {}
        },
        {
          "ruleId": "d5fea778-d19b-39f6-85b7-5c35ab9f5631",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "The software generates an error message that includes sensitive information about its environment, users, or associated data. In particular, exposure of memory addresses might defeat ASLR."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "disassemblers/adreno/disasm-a3xx.c",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 1061,
                  "startColumn": 5,
                  "endLine": 1062,
                  "endColumn": 68,
                  "snippet": {
                    "text": "    fprintf(ctx->out, \" (pad1=%x, pad2=%x, pad3=%x, pad4=%x, pad5=%x)\",\n        cat6->pad1, cat6->pad2, cat6->pad3, cat6->pad4, cat6->pad5);"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "4b8d80d614beb526cde407d87b076a711b69409f604c4c934b96809df746ffbf606229c6d962aeb8c40a9f6f63ca2f0543fb0619a16a9f5a9a113bd322bddb5b_0"
          },
          "properties": {}
        },
        {
          "ruleId": "ed6a18e8-553c-30c5-b28b-35fc150ba380",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "disassemblers/adreno/disasm-a3xx.c",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 1350,
                  "startColumn": 5,
                  "endLine": 1350,
                  "endColumn": 56,
                  "snippet": {
                    "text": "    nop = (instr->cat2.src2_r * 2) + instr->cat2.src1_r;"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "f594c4c1a4f8bcdf8919822ccdb719103e9f89985c672e81106d0764fbb2a131fd84b9f1793697bda4c4ab5465450a21628d05c8bf9099cd8cc0f5402e641607_0"
          },
          "properties": {}
        },
        {
          "ruleId": "dd13f50b-b45e-35dc-9527-0964c6a18027",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "disassemblers/adreno/disasm-a3xx.c",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 1319,
                  "startColumn": 12,
                  "endLine": 1319,
                  "endColumn": 19,
                  "snippet": {
                    "text": "  unsigned nop = 0;"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "acfce8ffa2b4d6c727fced1eb28c10d0fa1b0a73d9ea571f592425fa8f3c4957c025bdabe371fb0605f30d0c7d1e34684816088ca6601ac90ba892e208ab6be0_0"
          },
          "properties": {}
        },
        {
          "ruleId": "31c47575-718d-3dbb-bee2-0293b3af3655",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "The software generates an error message that includes sensitive information about its environment, users, or associated data. In particular, exposure of memory addresses might defeat ASLR."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "disassemblers/adreno/disasm-a3xx.c",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 1323,
                  "startColumn": 5,
                  "endLine": 1324,
                  "endColumn": 43,
                  "snippet": {
                    "text": "    fprintf(ctx->out, \"%s%04d:%04d[%08xx_%08xx] \", levels[ctx->level],\n        n, cycles++, dwords[1], dwords[0]);"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "88eb553e29987038e71403d14c65f61de5fc2a6e5a971669fd2246d21536912bfe01e19969ed02e3defc724720a3e6f2b0284290ad5977b22ae5810e411b6adb_0"
          },
          "properties": {}
        },
        {
          "ruleId": "0a0807db-0c0e-313d-b853-88eba4f7254b",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "disassemblers/adreno/disasm-a3xx.c",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 1352,
                  "startColumn": 5,
                  "endLine": 1352,
                  "endColumn": 56,
                  "snippet": {
                    "text": "    nop = (instr->cat3.src2_r * 2) + instr->cat3.src1_r;"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "f594c4c1a4f8bcdf8919822ccdb719103e9f89985c672e81106d0764fbb2a131fd84b9f1793697bda4c4ab5465450a21628d05c8bf9099cd8cc0f5402e641607_1"
          },
          "properties": {}
        },
        {
          "ruleId": "ac0a0bb3-f545-301b-a4a9-1f5c991baf94",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Most codebases define assertion macros which compile to a no-op on non-debug builds. If assertions are the only line of defense against untrusted input, the software may be exposed to attacks that leverage the lack of proper input checks."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "disassemblers/adreno/instr-a3xx.h",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 982,
                  "startColumn": 3,
                  "endLine": 982,
                  "endColumn": 24,
                  "snippet": {
                    "text": "\t\tassert(gpu_id >= 600);"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "a8c3185cee27759514078127a3e53aa6ed6a309ec9a59b696d6b6fa7eb70ced5d2b6939e32dc5c743216983004d3360cb188bb2369d4875cd5ef1a21c6248541_0"
          },
          "properties": {}
        },
        {
          "ruleId": "a00190fd-17e3-3c1a-8b37-c14b327c5e19",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "disassemblers/adreno/ir3.h",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 978,
                  "startColumn": 24,
                  "endLine": 978,
                  "endColumn": 39,
                  "snippet": {
                    "text": "static inline unsigned ir3_cat2_absneg(opc_t opc)"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "9bb1fce585c69febfcb71078602dd6c3e2e15dabddb573ed6c8944006d08f9eba2a7414df9cc4d33c5ea97d91d519f28586c2df8851507387f460f6928f17ce3_0"
          },
          "properties": {}
        },
        {
          "ruleId": "b60fb930-c06a-3cc6-8ad6-98674d1e4bbb",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "disassemblers/adreno/ir3.h",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 844,
                  "startColumn": 24,
                  "endLine": 844,
                  "endColumn": 33,
                  "snippet": {
                    "text": "static inline unsigned dest_regs(struct ir3_instruction *instr)"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "f8d8fe1bbc4cae31ba2de48deddb70a81b007fd027e9d3c59fd520f84397174ae535c1fcd3d7d03978b59003cc71b29269c2f2ca30a5422b84a1fc5eb7a8d17e_0"
          },
          "properties": {}
        },
        {
          "ruleId": "ebba3743-ec29-3671-83ac-e458a2a5219a",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "disassemblers/adreno/ir3.h",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 1038,
                  "startColumn": 24,
                  "endLine": 1038,
                  "endColumn": 39,
                  "snippet": {
                    "text": "static inline unsigned ir3_cat3_absneg(opc_t opc)"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "e7df65e4b8f5ad5e67454e230ac77e466d4d8e002d03970d8c24d0dc968236b9f1e09ffb45e87aace7cee8cae490f462a1229b91732d3e6e249aa38f1785cd29_0"
          },
          "properties": {}
        },
        {
          "ruleId": "ad5bd98a-2e87-327b-bda5-f52d4da7e000",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "disassemblers/adreno/ir3.h",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 1310,
                  "startColumn": 11,
                  "endLine": 1310,
                  "endColumn": 60,
                  "snippet": {
                    "text": "\tunsigned flags = (type_size(type) < 32) ? IR3_REG_HALF : 0;"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "1220a394fbceee4d6ca2734b60ab7a00d95c298ef5a1b2b54509062934ece7bfb57228a0c513c39a34836e1f8bd0ea6820acc5d1a9d756eff495bf347f13b9e9_1"
          },
          "properties": {}
        },
        {
          "ruleId": "39dcc581-0463-31ed-aa02-71b2149358b9",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "disassemblers/adreno/ir3.h",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 1366,
                  "startColumn": 11,
                  "endLine": 1366,
                  "endColumn": 68,
                  "snippet": {
                    "text": "\tunsigned dst_flags = (type_size(dst_type) < 32) ? IR3_REG_HALF : 0;"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "b5c5624effacc687dc981bc54bd01ce911097c8de95d900453c167bad5099b72262eb3588f1aac2d51f58527f90385e53c54cfd7010a1e89ca278d1ac009649f_0"
          },
          "properties": {}
        },
        {
          "ruleId": "6e2738ee-c061-3b5e-aed8-5cfa89656172",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "disassemblers/adreno/ir3.h",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 1289,
                  "startColumn": 11,
                  "endLine": 1289,
                  "endColumn": 60,
                  "snippet": {
                    "text": "\tunsigned flags = (type_size(type) < 32) ? IR3_REG_HALF : 0;"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "1220a394fbceee4d6ca2734b60ab7a00d95c298ef5a1b2b54509062934ece7bfb57228a0c513c39a34836e1f8bd0ea6820acc5d1a9d756eff495bf347f13b9e9_0"
          },
          "properties": {}
        },
        {
          "ruleId": "d15e20c5-9140-3250-a5a7-26197edd4d98",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "disassemblers/adreno/ir3.h",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 1367,
                  "startColumn": 11,
                  "endLine": 1367,
                  "endColumn": 68,
                  "snippet": {
                    "text": "\tunsigned src_flags = (type_size(src_type) < 32) ? IR3_REG_HALF : 0;"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "17e66562c6eb73fb2ddb64302d6221984d7eadf481a81a422b83f0f4334656217c798677723bb307431f88f6df2d3343fa7bf2c6a1d4b838ee9adc0922c5bb7a_0"
          },
          "properties": {}
        },
        {
          "ruleId": "13119517-369c-3787-a577-45b656ef5be0",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "disassemblers/adreno/util/bitscan.h",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 208,
                  "startColumn": 1,
                  "endLine": 208,
                  "endColumn": 14,
                  "snippet": {
                    "text": "util_last_bit(unsigned u)"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "2bbecdc7f6ed8ea8dd49fc6e2011213a215432c6f4509cdfa795268f8f28effd8b5fea26b2a8d1eb12b4cf659b4acfe4cadb170e8462013b2396151d586beb83_0"
          },
          "properties": {}
        },
        {
          "ruleId": "306e534c-58c8-39ee-ac51-5621db696466",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "disassemblers/adreno/ir3.h",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 1735,
                  "startColumn": 7,
                  "endLine": 1735,
                  "endColumn": 12,
                  "snippet": {
                    "text": "\tfor (i = 0; i < ARRAY_SIZE(*dst); i++)"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "ac9dfce059dc67c4b62dcdca647a9122783b771081445db7652ed24f3f49f096f793b1234b2af5b6e58ac38b6c66718a2e64d92e19e870ca63db2b3d9ce879f4_0"
          },
          "properties": {}
        },
        {
          "ruleId": "d3088307-9d21-39a8-8713-25b7a7751626",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "disassemblers/adreno/util/bitscan.h",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 219,
                  "startColumn": 13,
                  "endLine": 219,
                  "endColumn": 18,
                  "snippet": {
                    "text": "   unsigned r = 0;"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "cb5c10af9c6e7e5785321b1ac36ef5fc8f340a3f1574faf9faeee7e69ce6873e11361e2d78c4ca00098aa8086626ae09539c32053fbbe8c2cbef9091b7018de0_0"
          },
          "properties": {}
        },
        {
          "ruleId": "35c5e84d-a17d-38c9-aeaa-6370086978b2",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "disassemblers/adreno/util/bitscan.h",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 234,
                  "startColumn": 1,
                  "endLine": 234,
                  "endColumn": 16,
                  "snippet": {
                    "text": "util_last_bit64(uint64_t u)"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "f652783f931af0b2430f0785082d9cad39216412909e95f0794f14a93c53f56807872a3f02ea87daf2b29c7fb41d9de63a5ee5dfd50aeae081b0d65d0a480426_0"
          },
          "properties": {}
        },
        {
          "ruleId": "ce79a96b-6a75-3d78-ab04-2e7c1a231196",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "disassemblers/adreno/util/bitscan.h",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 245,
                  "startColumn": 13,
                  "endLine": 245,
                  "endColumn": 18,
                  "snippet": {
                    "text": "   unsigned r = 0;"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "cb5c10af9c6e7e5785321b1ac36ef5fc8f340a3f1574faf9faeee7e69ce6873e11361e2d78c4ca00098aa8086626ae09539c32053fbbe8c2cbef9091b7018de0_1"
          },
          "properties": {}
        },
        {
          "ruleId": "d7ed3405-c517-3e68-ad06-f30411f7bab5",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Most codebases define assertion macros which compile to a no-op on non-debug builds. If assertions are the only line of defense against untrusted input, the software may be exposed to attacks that leverage the lack of proper input checks."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "disassemblers/adreno/util/bitscan.h",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 283,
                  "startColumn": 4,
                  "endLine": 283,
                  "endColumn": 31,
                  "snippet": {
                    "text": "   assert(start + count <= 64);"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "ffbae75fcf13ed7d6c756481b3183bdfc205c8917b89e9ae80cda2e8776879cd1e5027c4e607a757a7161f9e3b06051c41c1100d8b3e2caaa9516da4d5e68f0c_0"
          },
          "properties": {}
        },
        {
          "ruleId": "8c644cf4-4526-335f-b858-d8b2c84e4f0b",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Most codebases define assertion macros which compile to a no-op on non-debug builds. If assertions are the only line of defense against untrusted input, the software may be exposed to attacks that leverage the lack of proper input checks."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "disassemblers/adreno/util/bitscan.h",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 274,
                  "startColumn": 4,
                  "endLine": 274,
                  "endColumn": 31,
                  "snippet": {
                    "text": "   assert(start + count <= 32);"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "8f2b9887dc31d7c233cf1d444658d52a9a3f946d6a6b45e2d4e4b61839a7fb021c1899c0ce1370e7f48577b776e3868f7a8961602fcfa608209858b81e53eedc_0"
          },
          "properties": {}
        },
        {
          "ruleId": "51640982-3f38-38b6-a9d5-9b7d774d4e68",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "disassemblers/adreno/util/bitscan.h",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 305,
                  "startColumn": 9,
                  "endLine": 305,
                  "endColumn": 17,
                  "snippet": {
                    "text": "   for (bits = 0; n; bits++) {"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "728f166fc4e5030e6fc1a5743af23e6d6647a38c4551c2110e41845ca6d9ff88e71704ad64b0d90034efe8e0576ca1a7a9186fa7af20d15ebc152f448bb10dc8_0"
          },
          "properties": {}
        },
        {
          "ruleId": "367368be-b946-39c2-81ad-7a15c08d7097",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "disassemblers/adreno/util/list.h",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 124,
                  "startColumn": 13,
                  "endLine": 124,
                  "endColumn": 23,
                  "snippet": {
                    "text": "   unsigned length = 0;"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "73887b9f28fcbc2e7af4e0dec73f1fce73c41654efa16aebe219786c56dc9bb6822592fda73c8ee85043a536b7fa23a116c74fab7ad8c4b829c83b6986851b98_0"
          },
          "properties": {}
        },
        {
          "ruleId": "27da65d9-f4b5-31ee-bc5e-287ff83f644e",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "`return` should never appear inside a class __init__ function. This will cause a runtime error."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "examples/beautiful_mnist.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 17,
                  "startColumn": 17,
                  "endLine": 17,
                  "endColumn": 29,
                  "snippet": {
                    "text": "      lambda x: x.flatten(1), nn.Linear(576, 10)]"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "304d967c8d25acc267c3f04b92b98bf4687b80a9c284236eb703e927bce5dbfcb3e104a507af6fba5e6fcff97f1971ff9762207455b8e17b2442ce7b3ce7d531_0"
          },
          "properties": {}
        },
        {
          "ruleId": "2b3d4794-31ef-3956-91b7-3a9194796740",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "disassemblers/adreno/util/bitset.h",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 124,
                  "startColumn": 4,
                  "endLine": 124,
                  "endColumn": 23,
                  "snippet": {
                    "text": "   bit = ffs(*tmp) - 1;"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "b6903fbcc7cae422ddf19839349929c7e32716164b491b6065c5353af7c442892a3c61af3f40628ac0b484d4913c86f5b5833e33dd905eb04f47a77139d85a9c_0"
          },
          "properties": {}
        },
        {
          "ruleId": "9f28feff-723d-3cf7-b973-ace33704dbad",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "`return` should never appear inside a class __init__ function. This will cause a runtime error."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "examples/beautiful_mnist_multigpu.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 19,
                  "startColumn": 17,
                  "endLine": 19,
                  "endColumn": 29,
                  "snippet": {
                    "text": "      lambda x: x.flatten(1), nn.Linear(576, 10)]"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "bd868a2709d03e59967d15533a458793e4d0abc6db33f4a7419a8a594a157270812869f9eaf4087a6b1f60a9fbb872a6267795e372aed5c01ca693de66cc8663_0"
          },
          "properties": {}
        },
        {
          "ruleId": "21ebd432-9594-3c8d-97ac-45bf731f3a56",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Detected the use of exec(). exec() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "examples/coder.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 88,
                  "startColumn": 46,
                  "endLine": 88,
                  "endColumn": 63,
                  "snippet": {
                    "text": "            with redirect_stdout(my_stdout): exec(python_code)"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "35384fd30a01077713633d561d60a1d83a9fb4945ae7edbef9afe6ee1fbc21d4621b27f159cae4b7f37a9581d3e02f434a1bf499ca01e91f6b5573cefbd5baaf_0"
          },
          "properties": {}
        },
        {
          "ruleId": "ccbd7de8-346d-3348-986d-540e246b2a85",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Detected hardcoded temp directory. Consider using 'tempfile.TemporaryFile' instead.\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "examples/compile_tensorflow.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 54,
                  "startColumn": 8,
                  "endLine": 54,
                  "endColumn": 37,
                  "snippet": {
                    "text": "  with open(\"/tmp/tf_weights\", \"wb\") as f:"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "cc46e955c099309efbb520674f69b4a818163f998332034db4b3facd7e326c9be0dd04f119fe14ba78302aeb0dab4c372c3a2f7ebc0c56c4b61b3bb89f898ef3_0"
          },
          "properties": {}
        },
        {
          "ruleId": "0b4a8580-69fd-3e79-b2b9-744309027005",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Regex `r\"^\\([\\w+ ]+\\)$\"` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "examples/conversation.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 311,
                  "startColumn": 38,
                  "endLine": 311,
                  "endColumn": 77,
                  "snippet": {
                    "text": "        if txt == \"[BLANK_AUDIO]\" or re.match(r\"^\\([\\w+ ]+\\)$\", txt.strip()): continue"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "b49e0cf22ed70c06a0441456200ea23b62f53ca4e39b5d3067c22a667c85865754314a9145c3b6386442f00ee84e7806a16082569641f23a8f32d0df325863aa_0"
          },
          "properties": {}
        },
        {
          "ruleId": "4caf5963-f789-32aa-959e-1d79633ecbd2",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "`return` only makes sense inside a function"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "examples/handcode_resnet50_opt.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 82,
                  "startColumn": 53,
                  "endLine": 82,
                  "endColumn": 57,
                  "snippet": {
                    "text": "    tm, gflops, lin = sorted(choices, key=lambda x: x[0])[0]"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "e0b87a88a39a64da19146cae2c41a8785a840820fc7007caf024caafdfaf3cecbbd4a376060779b851acfbc2605297b57e7e65608e344eefd6fa556ea6a210e4_0"
          },
          "properties": {}
        },
        {
          "ruleId": "02bf8a6b-5b2d-38b7-969a-b6140be2152a",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "`return` should never appear inside a class __init__ function. This will cause a runtime error."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "examples/hlb_cifar10.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 103,
                  "startColumn": 17,
                  "endLine": 103,
                  "endColumn": 31,
                  "snippet": {
                    "text": "      lambda x: x.quick_gelu(),"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "138097fbe96ce8142fa8b54f1e2b4fb2717d055b73d29133a60f9b923165b38a98b91d569a650ebdda4e27cbc354cde72f1d7f6d724d0c80fc2f0f69b73ad41b_0"
          },
          "properties": {}
        },
        {
          "ruleId": "867e7997-6fc8-3af3-aa76-72ca90edf76a",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "`return` should never appear inside a class __init__ function. This will cause a runtime error."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "examples/hlb_cifar10.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 107,
                  "startColumn": 17,
                  "endLine": 107,
                  "endColumn": 29,
                  "snippet": {
                    "text": "      lambda x: x.max((2,3)),"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "138097fbe96ce8142fa8b54f1e2b4fb2717d055b73d29133a60f9b923165b38a98b91d569a650ebdda4e27cbc354cde72f1d7f6d724d0c80fc2f0f69b73ad41b_1"
          },
          "properties": {}
        },
        {
          "ruleId": "d7bfa525-9665-3d53-bc2d-94a88f47bd23",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "`return` should never appear inside a class __init__ function. This will cause a runtime error."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "examples/hlb_cifar10.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 109,
                  "startColumn": 17,
                  "endLine": 109,
                  "endColumn": 23,
                  "snippet": {
                    "text": "      lambda x: x / 9.,"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "138097fbe96ce8142fa8b54f1e2b4fb2717d055b73d29133a60f9b923165b38a98b91d569a650ebdda4e27cbc354cde72f1d7f6d724d0c80fc2f0f69b73ad41b_2"
          },
          "properties": {}
        },
        {
          "ruleId": "da4f3c8e-dd8b-3e92-a972-999fc243bf0a",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "This tag is missing an 'integrity' subresource integrity attribute. The 'integrity' attribute allows for the browser to verify that externally hosted files (for example from a CDN) are delivered without unexpected manipulation. Without this attribute, if an attacker can modify the externally hosted resource, this could lead to XSS and other types of attacks. To prevent this, include the base64-encoded cryptographic hash of the resource (file) youâ€™re telling the browser to fetch in the 'integrity' attribute for all externally hosted files."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "examples/index.html",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 21,
                  "startColumn": 1,
                  "endLine": 21,
                  "endColumn": 118,
                  "snippet": {
                    "text": "<link rel=\"icon\" type=\"image/x-icon\" href=\"https://raw.githubusercontent.com/tinygrad/tinygrad/master/docs/logo.png\">"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "de6a6b78666a21b4cb1a62e115279d8502d98ba2e6c90be3829c23d7b847451c1723841d5b20499044feda465268959e3ee9c14f691eb0099ef70b702d3a1c2b_0"
          },
          "properties": {}
        },
        {
          "ruleId": "cedcab19-4d38-3f44-83d8-54f8f4372e5a",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "`return` only makes sense inside a function"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "examples/llama.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 479,
                  "startColumn": 58,
                  "endLine": 481,
                  "endColumn": 188,
                  "snippet": {
                    "text": "          with Timing(\"enqueue in \", on_exit=(lambda et: (f\", {(GlobalCounters.time_sum_s-st)*1e3:.2f} ms on GPU\" if DEBUG>=2 else \"\")+\n                      f\", {GlobalCounters.global_ops*1e-9:.2f} GOPS, {GlobalCounters.global_mem*1e-9:.2f} GB\"+\n                      (f\", {GlobalCounters.global_mem*1e-9/(GlobalCounters.time_sum_s-st):.2f} GB/s, param {param_bytes*1e-9/(GlobalCounters.time_sum_s-st):.2f} GB/s\" if DEBUG>=2 else \"\")) if DEBUG else None, enabled=args.timing):"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "b7f03bc1efeea4bb5f6bd5bdecc0778d0b798a05f179578ceff3e3faeaf2159a71a58bf6cafe6d15d2a0fd770c557617f00d5c16b1562a8e204bdba131f4f307_0"
          },
          "properties": {}
        },
        {
          "ruleId": "a5c9a8aa-2407-38ff-81e5-c352f700620f",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "`return` only makes sense inside a function"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "examples/llm.c/train_gpt2.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 132,
                  "startColumn": 22,
                  "endLine": 132,
                  "endColumn": 70,
                  "snippet": {
                    "text": "  encode = lambda s: enc.encode(s, allowed_special={\"<|endoftext|>\"})"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "3084fe9932d044cd65030891dd6dcec49a1ae5f98e1c14c4559ef089893660d58086c7c3fc7b454e73c251b41ce3e49f51f1bad76678ef8ebf3698647b88acd7_0"
          },
          "properties": {}
        },
        {
          "ruleId": "9307f797-a81e-3f37-b088-825b6407777c",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "`return` only makes sense inside a function"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "examples/mask_rcnn.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 66,
                  "startColumn": 33,
                  "endLine": 74,
                  "endColumn": 2,
                  "snippet": {
                    "text": "transforms = lambda size_scale: T.Compose(\n  [\n    Resize(int(800*size_scale), int(1333*size_scale)),\n    T.ToTensor(),\n    Normalize(\n      mean=[102.9801, 115.9465, 122.7717], std=[1., 1., 1.], to_bgr255=True\n    ),\n  ]\n)"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "d89afa5cb1cccbdb68b8400234860d981eb306259fa11bfe6aba7be2af51e371a4b1552178857677354c7168d9a093b25f5109fccc44a56d12b70259bc37d5fe_0"
          },
          "properties": {}
        },
        {
          "ruleId": "7d646895-88d4-3745-a2c5-dde10aa8f638",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "`return` only makes sense inside a function"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "examples/llm.c/train_gpt2.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 133,
                  "startColumn": 22,
                  "endLine": 133,
                  "endColumn": 35,
                  "snippet": {
                    "text": "  decode = lambda l: enc.decode(l)"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "3084fe9932d044cd65030891dd6dcec49a1ae5f98e1c14c4559ef089893660d58086c7c3fc7b454e73c251b41ce3e49f51f1bad76678ef8ebf3698647b88acd7_1"
          },
          "properties": {}
        },
        {
          "ruleId": "1fecd904-e44e-36ba-b3cc-e58bd1b46424",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "examples/mlperf/dataloader.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 19,
                  "startColumn": 11,
                  "endLine": 19,
                  "endColumn": 50,
                  "snippet": {
                    "text": "    ret = pickle.loads(self._reader.recv_bytes())"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "9b4dce911e99dde24dbc7539681de4272b1cb798474e38c8c0ed6ea1f9573ed7fbc0c9663cb936464bbe3741941d09ee6a86dd0d4d300a183884db548ee610e6_0"
          },
          "properties": {}
        },
        {
          "ruleId": "c14ba698-8ff0-3e70-be7a-51e4a4e8a182",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "examples/mlperf/dataloader.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 24,
                  "startColumn": 29,
                  "endLine": 24,
                  "endColumn": 46,
                  "snippet": {
                    "text": "    self._writer.send_bytes(pickle.dumps(obj))"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "c17c71ca7b5b9d1c737aa6831defe22b2eddfc54fadd9d10a367160f0192d9aed2332108f32bb3bca195992d30590e15c43bfd7a6b9c3eb43475efa4cc13bc0c_0"
          },
          "properties": {}
        },
        {
          "ruleId": "466f707f-ead6-3f47-8383-94eb32a39e3a",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Use `sys.exit` over the python shell `exit` built-in. `exit` is a helper for the interactive shell and may not be available on all Python implementations. https://stackoverflow.com/questions/6501121/difference-between-exit-and-sys-exit-in-python"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "examples/mlperf/dataloader.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 40,
                  "startColumn": 46,
                  "endLine": 40,
                  "endColumn": 53,
                  "snippet": {
                    "text": "  signal.signal(signal.SIGINT, lambda _, __: exit(0))"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "b01ee1dd335c2cf617844090cba3078d57392e3ac115859be571e70fc42a226c4b4dda8bacc57d22d77a0d3e26ad8540b8a75dd3c7316fd1661a1ce065ed3df0_0"
          },
          "properties": {}
        },
        {
          "ruleId": "087974e4-10cc-3afe-bb68-df3274e0465c",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "examples/mlperf/dataloader.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 170,
                  "startColumn": 36,
                  "endLine": 170,
                  "endColumn": 50,
                  "snippet": {
                    "text": "  with open(fn, \"rb\") as f: data = pickle.load(f)"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "3621b1ac1e1e97500633dae911f514616a65cf9c83bdbbddf8bb81d85662876acdc7f047a9942e4ec01b25d6f7cbf85a26251a43caa31813f43b0c5fa76cc988_0"
          },
          "properties": {}
        },
        {
          "ruleId": "b4d28c24-8ad5-3185-b15d-cbc528f00d56",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Regex `r'\\b(a|an|the)\\b'` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "examples/mlperf/metrics.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 50,
                  "startColumn": 7,
                  "endLine": 50,
                  "endColumn": 40,
                  "snippet": {
                    "text": "  s = re.sub(r'\\b(a|an|the)\\b', ' ', s)"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "17a184ec26529f0ebef89aef1250455ae7610affb67dcaae0891ab18ec084e5264013d7c7fed12842220e88d61103222ef9a16716d66ec498e0ef8da47d9e72b_0"
          },
          "properties": {}
        },
        {
          "ruleId": "6de61cfa-2e19-39e0-81d4-faca9165366b",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "`pass` is the body of function train_retinanet. Consider removing this or raise NotImplementedError() if this is a TODO"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "examples/mlperf/model_train.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 321,
                  "startColumn": 1,
                  "endLine": 323,
                  "endColumn": 7,
                  "snippet": {
                    "text": "def train_retinanet():\n  # TODO: Retinanet\n  pass"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "56c6021aaa47e60d39cb0a21b11222e05fc2c44cb4e4f1dac04a2df67837e5922071b912c04e9bdd27ef60bf9fde8faf519f017ffadd4d9564fe6678cd8c886b_0"
          },
          "properties": {}
        },
        {
          "ruleId": "ec8f086b-4118-3520-b88e-37ed57a55a8c",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Found non static data as an index to 'globals()'. This is extremely dangerous because it allows an attacker to execute arbitrary code on the system. Refactor your code not to use 'globals()'."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "examples/mlperf/model_eval.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 252,
                  "startColumn": 7,
                  "endLine": 252,
                  "endColumn": 20,
                  "snippet": {
                    "text": "      globals()[nm]()"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "c4f97ebe2bdc5ebcfe4146181aced2f53fcdd316630260520ef306f29446c18ba46ba391c17188e7780a1c99d6c7fbabab7acb01abad8f719ca2479d5cee0ccc_0"
          },
          "properties": {}
        },
        {
          "ruleId": "31c72bfb-b552-30f5-a19e-0d57db791445",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Found non static data as an index to 'globals()'. This is extremely dangerous because it allows an attacker to execute arbitrary code on the system. Refactor your code not to use 'globals()'."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "examples/mlperf/model_spec.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 69,
                  "startColumn": 7,
                  "endLine": 69,
                  "endColumn": 20,
                  "snippet": {
                    "text": "      globals()[nm]()"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "2ef64daab071619ddb86eb88d80eb33772a3e03182fff5068086a56df4204df0a1e9c5e456c080ae637c21540591f33a7e4e1a9a2e997616facc6fcdb535f8b6_0"
          },
          "properties": {}
        },
        {
          "ruleId": "9db78396-728e-3b60-9b82-a2a72de1ca85",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "`pass` is the body of function train_unet3d. Consider removing this or raise NotImplementedError() if this is a TODO"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "examples/mlperf/model_train.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 325,
                  "startColumn": 1,
                  "endLine": 327,
                  "endColumn": 7,
                  "snippet": {
                    "text": "def train_unet3d():\n  # TODO: Unet3d\n  pass"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "94a58291fcf27f55d3361ebd2f635f8874ee71f7965dbe605c45d25fe75a897875dd49572b327ef4a74294be799df0a6e97259607666ce4a0c0db9fe83907cee_0"
          },
          "properties": {}
        },
        {
          "ruleId": "5a2870e9-491b-3560-b071-1527a5b812d2",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "`pass` is the body of function train_maskrcnn. Consider removing this or raise NotImplementedError() if this is a TODO"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "examples/mlperf/model_train.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 567,
                  "startColumn": 1,
                  "endLine": 569,
                  "endColumn": 7,
                  "snippet": {
                    "text": "def train_maskrcnn():\n  # TODO: Mask RCNN\n  pass"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "7348c252f9380ad9fbea0a59ddfd2488cd163ba06c37dade8e41312f91adce8e6aaaf5ed69193ba32ec42169a8f0686cbe57c4c1ee2443ef27d76c30b541c32d_0"
          },
          "properties": {}
        },
        {
          "ruleId": "2e04e563-0c84-3f68-8ac5-87cae8f6cd33",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "`pass` is the body of function train_rnnt. Consider removing this or raise NotImplementedError() if this is a TODO"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "examples/mlperf/model_train.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 329,
                  "startColumn": 1,
                  "endLine": 331,
                  "endColumn": 7,
                  "snippet": {
                    "text": "def train_rnnt():\n  # TODO: RNN-T\n  pass"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "44b6d993f7ca11c15842fb96a8cb2466f2512bc11d1de530b8086ac7e86a24a8eee7325f2ec8601cffffd9506def8b5278a50b87df08bfebd8f050633a87bc89_0"
          },
          "properties": {}
        },
        {
          "ruleId": "225873b7-c5eb-30db-b411-8295dd56a265",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Found non static data as an index to 'globals()'. This is extremely dangerous because it allows an attacker to execute arbitrary code on the system. Refactor your code not to use 'globals()'."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "examples/mlperf/model_train.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 578,
                  "startColumn": 9,
                  "endLine": 578,
                  "endColumn": 22,
                  "snippet": {
                    "text": "        globals()[nm]()"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "856e6292dc60e5795376097463935226d79dd954138365bb035f2d8454bf1d8d2d013b95016b59168082c4a7447a4a556ebf348918d944307477cb4b0778496a_0"
          },
          "properties": {}
        },
        {
          "ruleId": "8b43d953-43f2-302f-ab0b-ea03a9061e4b",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "`return` only makes sense inside a function"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "examples/serious_mnist.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 105,
                  "startColumn": 26,
                  "endLine": 105,
                  "endColumn": 121,
                  "snippet": {
                    "text": "  lossfn = lambda out,y: out.sparse_categorical_crossentropy(y) + lmbd*(model.weight1.abs() + model.weight2.abs()).sum()"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "59d7424d7a919d5e6b72346554f8ea04e5ea5c8fd6beb1c4a2f3b79894d17680624d1555fe7e80043509e0788bb323156d5460b872415a2fd42e9a914377ebb4_0"
          },
          "properties": {}
        },
        {
          "ruleId": "b52aadc7-76d1-32c0-aa78-d74c69f3faf0",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "`return` should never appear inside a class __init__ function. This will cause a runtime error."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "examples/so_vits_svc.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 114,
                  "startColumn": 7,
                  "endLine": 114,
                  "endColumn": 19,
                  "snippet": {
                    "text": "      return layer"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "2a53b2dca4a039153410396ce7f1199f70da4c8a40c745c9aa6673ed5a83e2db4a569278a57e76e928bac5b414f789d600290ee4d28e6dcf2b86a2164cf5f4d9_0"
          },
          "properties": {}
        },
        {
          "ruleId": "fdb3b3e3-fbf9-3998-a974-0b3f0599039d",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Detected the use of eval(). eval() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "examples/so_vits_svc.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 65,
                  "startColumn": 26,
                  "endLine": 65,
                  "endColumn": 55,
                  "snippet": {
                    "text": "    feature_enc_layers = eval(cfg.conv_feature_layers)"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "8465044a750cd1d43f52e8d0b11146bd746a5e8247e5e823466927225fd0914d2b94a4a96ca1116bcebbbaf3f77a1037aaf67ee011f62eed04499325e9b01224_0"
          },
          "properties": {}
        },
        {
          "ruleId": "2c1853bd-d1fa-3a41-ba07-fde119b2f406",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "`return` should never appear inside a class __init__ function. This will cause a runtime error."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "examples/so_vits_svc.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 166,
                  "startColumn": 32,
                  "endLine": 166,
                  "endColumn": 50,
                  "snippet": {
                    "text": "      if activation == \"relu\": return Tensor.relu"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "fa11b5272b06b48ca4adaaee27d68927aa156033909d8c5cfaa9018560acfd1c9ddbf446b4ab808054978dc3aeb302c8af05b8b6831fbaeaeadb43e5b33ee918_0"
          },
          "properties": {}
        },
        {
          "ruleId": "c9a3fd2d-5291-3f13-9bc5-f01ed9c53df4",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "`return` should never appear inside a class __init__ function. This will cause a runtime error."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "examples/so_vits_svc.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 167,
                  "startColumn": 32,
                  "endLine": 167,
                  "endColumn": 50,
                  "snippet": {
                    "text": "      if activation == \"gelu\": return Tensor.gelu"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "fa11b5272b06b48ca4adaaee27d68927aa156033909d8c5cfaa9018560acfd1c9ddbf446b4ab808054978dc3aeb302c8af05b8b6831fbaeaeadb43e5b33ee918_1"
          },
          "properties": {}
        },
        {
          "ruleId": "e3f0b744-6b0b-3910-bf4d-76b0d73413d5",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "`return` should never appear inside a class __init__ function. This will cause a runtime error."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "examples/so_vits_svc.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 226,
                  "startColumn": 9,
                  "endLine": 226,
                  "endColumn": 209,
                  "snippet": {
                    "text": "        return [make_conv(), partial(Tensor.dropout, p=dropout),[partial(Tensor.transpose, ax1=-2, ax2=-1), nn.LayerNorm(dim, elementwise_affine=True), partial(Tensor.transpose, ax1=-2, ax2=-1)], Tensor.gelu]"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "4a8cd6331106903000e49b504d97496df10e4273eb4cb3b6efc10794973cf8801dec65b8d60fd4f9baf2d45aa32125e0be6a0c648096cfb3f8008ffa8f5ac064_1"
          },
          "properties": {}
        },
        {
          "ruleId": "43de6b89-aa4d-3e5a-9b8d-9f5ea5aa3a55",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "`return` should never appear inside a class __init__ function. This will cause a runtime error."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "examples/so_vits_svc.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 223,
                  "startColumn": 9,
                  "endLine": 223,
                  "endColumn": 20,
                  "snippet": {
                    "text": "        return conv"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "4a8cd6331106903000e49b504d97496df10e4273eb4cb3b6efc10794973cf8801dec65b8d60fd4f9baf2d45aa32125e0be6a0c648096cfb3f8008ffa8f5ac064_0"
          },
          "properties": {}
        },
        {
          "ruleId": "ed872d09-5ba0-364b-822e-5a48d1be5070",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "`return` should never appear inside a class __init__ function. This will cause a runtime error."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "examples/so_vits_svc.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 228,
                  "startColumn": 9,
                  "endLine": 228,
                  "endColumn": 115,
                  "snippet": {
                    "text": "        return [make_conv(), partial(Tensor.dropout, p=dropout), nn.GroupNorm(dim, dim, affine=True), Tensor.gelu]"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "4a8cd6331106903000e49b504d97496df10e4273eb4cb3b6efc10794973cf8801dec65b8d60fd4f9baf2d45aa32125e0be6a0c648096cfb3f8008ffa8f5ac064_2"
          },
          "properties": {}
        },
        {
          "ruleId": "03da0479-17de-319d-a0c2-afaf3db47947",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "`return` should never appear inside a class __init__ function. This will cause a runtime error."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "examples/so_vits_svc.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 230,
                  "startColumn": 9,
                  "endLine": 230,
                  "endColumn": 118,
                  "snippet": {
                    "text": "        return [make_conv(), partial(Tensor.dropout, p=dropout), GroupNormMasked(dim, dim, affine=True), Tensor.gelu]"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "4a8cd6331106903000e49b504d97496df10e4273eb4cb3b6efc10794973cf8801dec65b8d60fd4f9baf2d45aa32125e0be6a0c648096cfb3f8008ffa8f5ac064_3"
          },
          "properties": {}
        },
        {
          "ruleId": "7bcf681a-fbb2-3010-9bad-5b0194733eae",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "`return` should never appear inside a class __init__ function. This will cause a runtime error."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "examples/so_vits_svc.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 232,
                  "startColumn": 9,
                  "endLine": 232,
                  "endColumn": 78,
                  "snippet": {
                    "text": "        return [make_conv(), partial(Tensor.dropout, p=dropout), Tensor.gelu]"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "4a8cd6331106903000e49b504d97496df10e4273eb4cb3b6efc10794973cf8801dec65b8d60fd4f9baf2d45aa32125e0be6a0c648096cfb3f8008ffa8f5ac064_4"
          },
          "properties": {}
        },
        {
          "ruleId": "961616e1-6adc-3ee1-bdd4-2de95253b489",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "`return` should never appear inside a class __init__ function. This will cause a runtime error."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "examples/stable_diffusion.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 42,
                  "startColumn": 108,
                  "endLine": 42,
                  "endColumn": 109,
                  "snippet": {
                    "text": "    self.nin_shortcut = Conv2d(in_channels, out_channels, 1) if in_channels != out_channels else lambda x: x"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "16c6a478aa87f3c435519e4dbca9804c80924f00e485e47d33ac82d26cdae0e8e75eb58eb2ba57a26065dba3f6ac433289ef149db0394582acb6f3db1367c517_0"
          },
          "properties": {}
        },
        {
          "ruleId": "a907eb9a-1015-3d0e-b762-e1c18c474aec",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "`return` should never appear inside a class __init__ function. This will cause a runtime error."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "examples/stable_diffusion.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 150,
                  "startColumn": 17,
                  "endLine": 150,
                  "endColumn": 18,
                  "snippet": {
                    "text": "      lambda x: x,  # needed for weights loading code to work"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "8af355ef7041abad0bd9a04f08739b8d39d9295d140e90fb7a4b43a407f1742163bcad18558f765e39e9b7b7e31fd396894a8e43afe8defb14d4c5efdd0dc924_0"
          },
          "properties": {}
        },
        {
          "ruleId": "c7eee1ec-9d3f-3f5b-8ee8-eb4afe43b92c",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "`return` should never appear inside a class __init__ function. This will cause a runtime error."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "examples/stable_diffusion.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 153,
                  "startColumn": 105,
                  "endLine": 153,
                  "endColumn": 106,
                  "snippet": {
                    "text": "    self.skip_connection = Conv2d(channels, out_channels, 1) if channels != out_channels else lambda x: x"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "8af355ef7041abad0bd9a04f08739b8d39d9295d140e90fb7a4b43a407f1742163bcad18558f765e39e9b7b7e31fd396894a8e43afe8defb14d4c5efdd0dc924_1"
          },
          "properties": {}
        },
        {
          "ruleId": "95aed026-c0fc-38c1-888c-9612d520167a",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "`return` should never appear inside a class __init__ function. This will cause a runtime error."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "examples/stable_diffusion.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 193,
                  "startColumn": 17,
                  "endLine": 193,
                  "endColumn": 18,
                  "snippet": {
                    "text": "      lambda x: x,  # needed for weights loading code to work"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "776c3bd46dacbb8eefd02f91056fe64ce38a51984bbb52d60aff4597fe61c4c04d300714956ab8a68b9c29d9dd1789f8bee4c8b6ec3561c19e69fa3ee880cd60_0"
          },
          "properties": {}
        },
        {
          "ruleId": "741db45c-113f-3c8c-89de-d53562e5ea38",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Regex `r'\\s+'` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "examples/stable_diffusion.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 421,
                  "startColumn": 10,
                  "endLine": 421,
                  "endColumn": 35,
                  "snippet": {
                    "text": "  text = re.sub(r'\\s+', ' ', text)"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "4978bb0cfa8becb36e003f6a328e9b0813c3c9392f98afdca513e2177d4aeb58576d8b8ff5889d086bd13f0ed06fdf0f6e987fbd8c18ae052dcad641713d0a3e_0"
          },
          "properties": {}
        },
        {
          "ruleId": "df3f0d0c-a04f-3302-977b-4b826f9742bc",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Regex `r\"\"\"<\\|startoftext\\|>|<\\|endoftext\\|>|'s|'t|'re|'ve|'m|'ll|'d|[^\\s]+\"\"\"` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "examples/stable_diffusion.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 460,
                  "startColumn": 16,
                  "endLine": 460,
                  "endColumn": 114,
                  "snippet": {
                    "text": "    self.pat = re.compile(r\"\"\"<\\|startoftext\\|>|<\\|endoftext\\|>|'s|'t|'re|'ve|'m|'ll|'d|[^\\s]+\"\"\", re.IGNORECASE)"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "9bd7f5a95038eb956b69d8ad732cf905e7f6b3d2648b5cd768383d93e93f56017b556bc43cc77a646b36901773bc5ee355fb65afde3c2ebdaa7c39b7fd1c2d14_0"
          },
          "properties": {}
        },
        {
          "ruleId": "ee5d609c-906a-351a-8791-c1f76cc95481",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Regex `self.pat` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "examples/stable_diffusion.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 505,
                  "startColumn": 18,
                  "endLine": 505,
                  "endColumn": 44,
                  "snippet": {
                    "text": "    for token in re.findall(self.pat, text):"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "60b4c1c17a638fbce24856f42c15ec7107a25099d67904b03b8f37d0e791efa202082e0d2b89377d0ae0998b093dcf16f807f3d855bdd90286964dca8e79d003_0"
          },
          "properties": {}
        },
        {
          "ruleId": "897617bd-b923-338c-9815-258b6f2e1b18",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "`return` only makes sense inside a function"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "examples/train_resnet.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 36,
                  "startColumn": 15,
                  "endLine": 36,
                  "endColumn": 56,
                  "snippet": {
                    "text": "    lambda x: np.stack([np.asarray(xx) for xx in x], 0),"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "e1175a5b5cf370a10392ccefef0190acd1cffa4b8d17cf952779b162084f4fbf00d2b5fb959ff18895df4eb46ed94cdd8348f3f28518e929aa769cca52f43c90_0"
          },
          "properties": {}
        },
        {
          "ruleId": "1b3f0e86-23b1-3e13-9684-484b8eed8c10",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "`return` only makes sense inside a function"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "examples/train_resnet.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 37,
                  "startColumn": 15,
                  "endLine": 37,
                  "endColumn": 24,
                  "snippet": {
                    "text": "    lambda x: x / 255.0,"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "e1175a5b5cf370a10392ccefef0190acd1cffa4b8d17cf952779b162084f4fbf00d2b5fb959ff18895df4eb46ed94cdd8348f3f28518e929aa769cca52f43c90_1"
          },
          "properties": {}
        },
        {
          "ruleId": "3ac244f4-364e-3377-9401-cd0a220b6f44",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "`return` only makes sense inside a function"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "examples/train_resnet.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 38,
                  "startColumn": 15,
                  "endLine": 38,
                  "endColumn": 77,
                  "snippet": {
                    "text": "    lambda x: np.tile(np.expand_dims(x, 1), (1, 3, 1, 1)).astype(np.float32),"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "e1175a5b5cf370a10392ccefef0190acd1cffa4b8d17cf952779b162084f4fbf00d2b5fb959ff18895df4eb46ed94cdd8348f3f28518e929aa769cca52f43c90_2"
          },
          "properties": {}
        },
        {
          "ruleId": "dac0cb09-803e-38b7-94fe-3460a72dd30c",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Regex `'%s' % x[0]` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "examples/vits.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 603,
                  "startColumn": 22,
                  "endLine": 603,
                  "endColumn": 45,
                  "snippet": {
                    "text": "    _ipa_to_ipa2 = [(re.compile('%s' % x[0]), x[1]) for x in [ ('r', 'É¹'), ('Ê¤', 'dÊ’'), ('Ê§', 'tÊƒ')]]"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "35ba80bb76057583d66b97f5d3ea21e098421fe7020644bf67b5cf40b77f078ae4fe8990fa3179e2bb18fb49ce96073cb43ca94a689356b981ea453979af53c3_0"
          },
          "properties": {}
        },
        {
          "ruleId": "5716e0ef-393d-3d42-a9dd-715f408bd608",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Regex `rx[0]` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "examples/vits.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 604,
                  "startColumn": 33,
                  "endLine": 604,
                  "endColumn": 56,
                  "snippet": {
                    "text": "    return reduce(lambda t, rx: re.sub(rx[0], rx[1], t), _ipa_to_ipa2, self.mark_dark_l(self.english_to_ipa(text))).replace('...', 'â€¦')"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "850fa714b9d9ac87ce26706e2a5aba299847ffb4da481f51179bc985a624850aaf0a4dcf1e50d59ca871c5af55f65fe714b58e9af220f391dd9dea5431995fcf_0"
          },
          "properties": {}
        },
        {
          "ruleId": "bb301043-1d20-39b6-90b7-e8945be3e468",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Regex `r'l([^aeiouÃ¦É‘É”É™É›ÉªÊŠ ]*(?: |$))'` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "examples/vits.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 605,
                  "startColumn": 39,
                  "endLine": 605,
                  "endColumn": 119,
                  "snippet": {
                    "text": "  def mark_dark_l(self, text): return re.sub(r'l([^aeiouÃ¦É‘É”É™É›ÉªÊŠ ]*(?: |$))', lambda x: 'É«' + x.group(1), text)"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "da243487f5b0cdbad724f9a2babc252fffe43addabf78535fcf895acc4870d80f72a041edcd60a519f2564f2bc0349f8c48e7f8744656ba3537db4446bdd1991_0"
          },
          "properties": {}
        },
        {
          "ruleId": "26f9c058-9cb8-319b-b40a-e9f5c72d1156",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Regex `'%s' % x[0]` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "examples/vits.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 610,
                  "startColumn": 19,
                  "endLine": 610,
                  "endColumn": 42,
                  "snippet": {
                    "text": "    _lazy_ipa = [(re.compile('%s' % x[0]), x[1]) for x in [('r', 'É¹'), ('Ã¦', 'e'), ('É‘', 'a'), ('É”', 'o'), ('Ã°', 'z'), ('Î¸', 's'), ('É›', 'e'), ('Éª', 'i'), ('ÊŠ', 'u'), ('Ê’', 'Ê¥'), ('Ê¤', 'Ê¥'), ('Ëˆ', 'â†“')]]"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "35ba80bb76057583d66b97f5d3ea21e098421fe7020644bf67b5cf40b77f078ae4fe8990fa3179e2bb18fb49ce96073cb43ca94a689356b981ea453979af53c3_1"
          },
          "properties": {}
        },
        {
          "ruleId": "c939ec6a-4f00-31b2-b076-e99f2e2490af",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Regex `rx[0]` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "examples/vits.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 611,
                  "startColumn": 33,
                  "endLine": 611,
                  "endColumn": 56,
                  "snippet": {
                    "text": "    return reduce(lambda t, rx: re.sub(rx[0], rx[1], t), _lazy_ipa, self.english_to_ipa(text))"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "850fa714b9d9ac87ce26706e2a5aba299847ffb4da481f51179bc985a624850aaf0a4dcf1e50d59ca871c5af55f65fe714b58e9af220f391dd9dea5431995fcf_1"
          },
          "properties": {}
        },
        {
          "ruleId": "51fe07e6-0273-35e2-ad0d-25844e6dacdd",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Regex `abbr[0]` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "examples/vits.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 612,
                  "startColumn": 71,
                  "endLine": 612,
                  "endColumn": 98,
                  "snippet": {
                    "text": "  def expand_abbreviations(self, text): return reduce(lambda t, abbr: re.sub(abbr[0], abbr[1], t), self._abbreviations, text)"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "253c492f55d9174925fa397887e4f514800bc65856940542295c37e38227a6bdd30d42ba3423242aeb6f936ddfeb574e48fd10073f2a2c8cbfc89c94c04f064c_0"
          },
          "properties": {}
        },
        {
          "ruleId": "13c11e0b-9dcb-3b47-9fd1-54241d30bf4d",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Regex `self._whitespace_re` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "examples/vits.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 613,
                  "startColumn": 47,
                  "endLine": 613,
                  "endColumn": 85,
                  "snippet": {
                    "text": "  def collapse_whitespace(self, text): return re.sub(self._whitespace_re, ' ', text)"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "cec75fcf3c142f91ce2b0129d10dcc0500b9a77dbdb9fdbb5a2deced09a0951b9456444bdd8f04b61aa39525489f46095f920ce8fd3f0f7b405f7a17d1642334_0"
          },
          "properties": {}
        },
        {
          "ruleId": "62c608f8-d7d5-33f1-a49b-a2e73a560014",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "This anchor tag with 'target=\"_blank\"' is missing 'noopener'. A page opened with 'target=\"_blank\"' can access the window object of the origin page. This means it can manipulate the 'window.opener' property, which could redirect the origin page to a malicious URL. This is called reverse tabnabbing. To prevent this, include 'rel=noopener' on this tag"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "examples/webgpu/stable_diffusion/index.html",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 77,
                  "startColumn": 37,
                  "endLine": 77,
                  "endColumn": 100,
                  "snippet": {
                    "text": "<h1 id=\"sdTitle\">StableDiffusion by <a href=\"https://github.com/tinygrad/tinygrad\" target=\"_blank\">tinygrad</a> WebGPU</h1>"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "ca3450028c6543e08043ab1518aab1d067af006d0cf3b0c144d94c5db16469f5b690541189816d478a49d6b436910dfdc2c3bb0ce15ea37b39fac0512bf84a82_0"
          },
          "properties": {}
        },
        {
          "ruleId": "762d4113-1096-35a8-aa72-1899d5133df4",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "`return` should never appear inside a class __init__ function. This will cause a runtime error."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "examples/yolov8.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 285,
                  "startColumn": 31,
                  "endLine": 285,
                  "endColumn": 108,
                  "snippet": {
                    "text": "    self.maxpool = lambda x : x.pad2d((k // 2, k // 2, k // 2, k // 2)).max_pool2d(kernel_size=k, stride=1)"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "ec215bf737fda905ec2de3094d0f7a88fe629afa93ebf9dee01e857ab6ece4258e465c5f33faec099d999c7e28c8a7894415622d29626a32682efe7dcff370ab_0"
          },
          "properties": {}
        },
        {
          "ruleId": "024e246b-2b99-353f-b044-37cdcd799f4e",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Found dynamic content used in a system call. This is dangerous if external data can reach this function call because it allows a malicious actor to execute commands. Use the 'subprocess' module instead, which is easier to use without accidentally exposing a command injection vulnerability."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "extra/accel/ane/2_compile/dcompile.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 8,
                  "startColumn": 7,
                  "endLine": 8,
                  "endColumn": 49,
                  "snippet": {
                    "text": "ret = os.system(\"./a.out \"+sys.argv[1]+\" debug\")"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "128fcdfbb1b61ea1238ae83aba032f41a3a2835a47deedb6ba314b9fc96e64e8f8ab154727aa6d9f123b02334cf1757b875dfd0307e7c420e41700dfecbe90b9_0"
          },
          "properties": {}
        },
        {
          "ruleId": "f674a1be-1323-3ad0-8bf0-ccba65663fd7",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "extra/accel/intel/joint_matrix_bfloat16.cpp",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 43,
                  "startColumn": 10,
                  "endLine": 43,
                  "endColumn": 27,
                  "snippet": {
                    "text": "  size_t NDRangeM = M / TM;"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "d3f2cdcf3b385b5a75fc5e59b2b18a296f9115fd4b529e561f98ad326d33d6b0349e651e91ca6249bb38cec66a17168585b31d60a1d70ec330270b9795cea9f8_0"
          },
          "properties": {}
        },
        {
          "ruleId": "cc7088be-64f2-34e5-9827-554bb16ad4e7",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "extra/accel/intel/joint_matrix_bfloat16.cpp",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 97,
                  "startColumn": 25,
                  "endLine": 97,
                  "endColumn": 46,
                  "snippet": {
                    "text": "static constexpr size_t MATRIX_M = TM * SCALE;"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "91d4dda277b771fdfc6b9034befab04c0cc56034cfda356699b2a2a7f6849d8d43759e1167cac0c53ff971c8bd9373299a33e065b2b702351bea3cfe11448031_0"
          },
          "properties": {}
        },
        {
          "ruleId": "cb16855d-8e26-33b8-863c-6d9d7ab8657a",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "extra/accel/intel/joint_matrix_bfloat16.cpp",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 98,
                  "startColumn": 25,
                  "endLine": 98,
                  "endColumn": 46,
                  "snippet": {
                    "text": "static constexpr size_t MATRIX_N = TN * SCALE;"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "c5cf0433dd79fa07847226ab6f04c492c5ac4c61f20876917901b547063926392039a6bdff9bd05d0a2a3cc04061b34764d5c6abd3e0ece771d4935a8ff2362e_0"
          },
          "properties": {}
        },
        {
          "ruleId": "9f117ca6-ac1f-3323-b5f1-1cba7110053a",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "extra/accel/intel/joint_matrix_bfloat16.cpp",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 99,
                  "startColumn": 25,
                  "endLine": 99,
                  "endColumn": 46,
                  "snippet": {
                    "text": "static constexpr size_t MATRIX_K = TK * SCALE;"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "a0a49d30c7564dca18118f13e8ce421a383bbeaa7e0444e013d247cd62c0291c7b283435d6df4724b2b1c3a5211ca6e8d394b31e4c7a789406043cb3061a32e8_0"
          },
          "properties": {}
        },
        {
          "ruleId": "049b9fbd-15b0-365e-9c23-a37a25814cfe",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "extra/accel/intel/joint_matrix_bfloat16.cpp",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 107,
                  "startColumn": 3,
                  "endLine": 107,
                  "endColumn": 14,
                  "snippet": {
                    "text": "  y = y << 16;"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "a438ce52503609d4167b7ee40401b1ea6f07804dafa60556e6037bac8287d6406c0c49ccc4344f8a4d752a2821f2386fee8aba0388d32d1cb31e77eb9e0d023f_0"
          },
          "properties": {}
        },
        {
          "ruleId": "440a2396-eccf-374b-861c-8b45ba9b9e2b",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "`return` only makes sense inside a function"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "extra/assembly/assembly.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 70,
                  "startColumn": 50,
                  "endLine": 70,
                  "endColumn": 112,
                  "snippet": {
                    "text": "                 MulNode: lambda self, ops, ctx: ctx.render_alu(BinaryOps.MUL, self.a.render(ops, ctx), self.b),"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "7203a38efe9bdb8f9aa18fdcb20b49136b4fa521c6898070dbde5370fe8cc1cca207f9e946c61d52e7716b9c9d08da1ee2535fbfe5aff43086dcf64c7859bd3a_2"
          },
          "properties": {}
        },
        {
          "ruleId": "81e1b57c-863a-37ee-9fa9-b7933a4318dd",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "`return` only makes sense inside a function"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "extra/assembly/assembly.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 71,
                  "startColumn": 50,
                  "endLine": 71,
                  "endColumn": 112,
                  "snippet": {
                    "text": "                 DivNode: lambda self, ops, ctx: ctx.render_alu(BinaryOps.DIV, self.a.render(ops, ctx), self.b),"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "7203a38efe9bdb8f9aa18fdcb20b49136b4fa521c6898070dbde5370fe8cc1cca207f9e946c61d52e7716b9c9d08da1ee2535fbfe5aff43086dcf64c7859bd3a_3"
          },
          "properties": {}
        },
        {
          "ruleId": "ba56d593-785e-3f1b-9247-bc00387b0275",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "`return` only makes sense inside a function"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "extra/assembly/assembly.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 72,
                  "startColumn": 50,
                  "endLine": 72,
                  "endColumn": 112,
                  "snippet": {
                    "text": "                 ModNode: lambda self, ops, ctx: ctx.render_alu(BinaryOps.MOD, self.a.render(ops, ctx), self.b),"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "7203a38efe9bdb8f9aa18fdcb20b49136b4fa521c6898070dbde5370fe8cc1cca207f9e946c61d52e7716b9c9d08da1ee2535fbfe5aff43086dcf64c7859bd3a_4"
          },
          "properties": {}
        },
        {
          "ruleId": "0078f444-3539-3e36-bb95-90e2dad19f6c",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "`return` only makes sense inside a function"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "extra/assembly/assembly.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 73,
                  "startColumn": 49,
                  "endLine": 73,
                  "endColumn": 132,
                  "snippet": {
                    "text": "                 LtNode: lambda self, ops, ctx: ctx.render_alu(BinaryOps.CMPLT, self.a.render(ops, ctx), self.b, dtype=dtypes.bool),"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "7203a38efe9bdb8f9aa18fdcb20b49136b4fa521c6898070dbde5370fe8cc1cca207f9e946c61d52e7716b9c9d08da1ee2535fbfe5aff43086dcf64c7859bd3a_5"
          },
          "properties": {}
        },
        {
          "ruleId": "65c9fa44-b02b-3e76-a926-31e788c53eba",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Detected hardcoded temp directory. Consider using 'tempfile.TemporaryFile' instead.\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "extra/assembly/rocm/rdna3/asm.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 20,
                  "startColumn": 8,
                  "endLine": 20,
                  "endColumn": 33,
                  "snippet": {
                    "text": "  with open(\"/tmp/cc.elf\", \"wb\") as f:"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "47a476ab8db6fb5860aed2c7381b4d2ca2c2a444184eb401d6e76d383ad22b5dd973feecf9aff27517380cfc0fd84328694b1167065f6cb7ab61bf5b323d54d8_0"
          },
          "properties": {}
        },
        {
          "ruleId": "fe691fef-893f-3e37-9e36-15a4c3b8527d",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Detected hardcoded temp directory. Consider using 'tempfile.TemporaryFile' instead.\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "extra/assembly/rocm/rdna3/asm.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 64,
                  "startColumn": 6,
                  "endLine": 64,
                  "endColumn": 30,
                  "snippet": {
                    "text": "with open(\"/tmp/cc2.o\", \"wb\") as f:"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "47a476ab8db6fb5860aed2c7381b4d2ca2c2a444184eb401d6e76d383ad22b5dd973feecf9aff27517380cfc0fd84328694b1167065f6cb7ab61bf5b323d54d8_1"
          },
          "properties": {}
        },
        {
          "ruleId": "5b677208-b447-3fdd-8722-f448082ecbb4",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Detected hardcoded temp directory. Consider using 'tempfile.TemporaryFile' instead.\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "extra/assembly/rocm/rdna3/asm.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 66,
                  "startColumn": 6,
                  "endLine": 66,
                  "endColumn": 32,
                  "snippet": {
                    "text": "with open(\"/tmp/cc2.elf\", \"wb\") as f:"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "47a476ab8db6fb5860aed2c7381b4d2ca2c2a444184eb401d6e76d383ad22b5dd973feecf9aff27517380cfc0fd84328694b1167065f6cb7ab61bf5b323d54d8_2"
          },
          "properties": {}
        },
        {
          "ruleId": "468ea742-ca7c-3825-84c8-fe8376ce79b4",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "The software generates an error message that includes sensitive information about its environment, users, or associated data. In particular, exposure of memory addresses might defeat ASLR."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "extra/assembly/rocm/sniffer/sniff.cc",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 33,
                  "startColumn": 22,
                  "endLine": 33,
                  "endColumn": 40,
                  "snippet": {
                    "text": "    if (i%0x10 == 0) printf(\"%8X: \", i);"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "d26bee0f6a5b444ea790060f3764d2181e61016833205ae36cb798ee8c6f16f1dc8d1f30aad94b14d4c8c2bb9b0ec8de533d27ad892b73f1ffe854c837fb7a5c_0"
          },
          "properties": {}
        },
        {
          "ruleId": "6e208bd5-ba8b-3f86-bd1c-00477286e5d8",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "extra/assembly/rocm/sniffer/sniff.cc",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 168,
                  "startColumn": 13,
                  "endLine": 168,
                  "endColumn": 43,
                  "snippet": {
                    "text": "  int ret = my_open(pathname, flags, mode);"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "5c4068308737ad30e79cec67fa909756a9c38f25e38ec7d87f77ca1c9276a0c93d9352e8edad50aafaa3753271d2a175c07f6050e02268995299caed9a0fc8e4_0"
          },
          "properties": {}
        },
        {
          "ruleId": "1ca27c79-5bb5-39d6-ac79-034ef6583f5c",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "extra/assembly/rocm/sniffer/sniff.cc",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 179,
                  "startColumn": 13,
                  "endLine": 179,
                  "endColumn": 45,
                  "snippet": {
                    "text": "  int ret = my_open64(pathname, flags, mode);"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "a3cd01846df88268b6a7ca4fb361ca11bc90293f19d4fda5c148c2ca1265235fae929b239c54855943ee2245946c42de61999d1a553aeed45831e6440fae1f11_0"
          },
          "properties": {}
        },
        {
          "ruleId": "4e52ff20-f480-3d1a-a531-c6e9cc59b882",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Truncation errors occur when a primitive is cast to a primitive of a  smaller size and data is lost in the conversion. The value cannot be  trusted and the application will be in an undefined state."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "extra/assembly/rocm/sniffer/sniff.cc",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 211,
                  "startColumn": 3,
                  "endLine": 211,
                  "endColumn": 41,
                  "snippet": {
                    "text": "  ret = my_ioctl(filedes, request, argp);"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "d000f69e00d79176269fc689ca59aca1d1d309f4840c5297c7f1ac43b465bb2986e1b4b5dc61258abaee23f3b0f9d2d102eb942fce5263257e114e7c1b606ec6_0"
          },
          "properties": {}
        },
        {
          "ruleId": "14b307a7-f7e1-3ad6-8fc9-f46537b5a188",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "`return` should never appear inside a class __init__ function. This will cause a runtime error."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "extra/backends/ops_hip.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 38,
                  "startColumn": 59,
                  "endLine": 38,
                  "endColumn": 109,
                  "snippet": {
                    "text": "    self.module = init_c_var(hip.hipModule_t(), lambda x: check(hip.hipModuleLoadData(ctypes.byref(x), lib)))"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "67b680b12d6a1dcf20d42281779c58e9b0cb46f52e9e01ca614fb8023348cc8b323285521ccd30e44ae432e19838428e92f885c04922d2144b0cf4b90b47ab84_0"
          },
          "properties": {}
        },
        {
          "ruleId": "d2ddd085-3fad-341d-a035-af3e17179d9f",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "`return` should never appear inside a class __init__ function. This will cause a runtime error."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "extra/backends/ops_hip.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 39,
                  "startColumn": 58,
                  "endLine": 39,
                  "endColumn": 141,
                  "snippet": {
                    "text": "    self.prg = init_c_var(hip.hipFunction_t(), lambda x: check(hip.hipModuleGetFunction(ctypes.byref(x), self.module, name.encode(\"utf-8\"))))"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "67b680b12d6a1dcf20d42281779c58e9b0cb46f52e9e01ca614fb8023348cc8b323285521ccd30e44ae432e19838428e92f885c04922d2144b0cf4b90b47ab84_1"
          },
          "properties": {}
        },
        {
          "ruleId": "365a1497-6bfb-35b9-af99-805962712334",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "`return` should never appear inside a class __init__ function. This will cause a runtime error."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "extra/backends/ops_hip.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 170,
                  "startColumn": 63,
                  "endLine": 170,
                  "endColumn": 112,
                  "snippet": {
                    "text": "      self.arch = init_c_var(hip.hipDeviceProp_t(), lambda x: check(hip.hipGetDeviceProperties(x, self.device))).gcnArchName.decode()"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "75e6a9798b93e208b23bfc8eed88cb1bc421410e30aeefe1957dac95feeda8118b60ac1d23d98579bb7051d058e6849eb86a24f17aa1d6ca04ba09d5245c3eab_0"
          },
          "properties": {}
        },
        {
          "ruleId": "36f4a8c5-29d9-3ef9-9fda-8fe618125291",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "`return` should never appear inside a class __init__ function. This will cause a runtime error."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "extra/backends/ops_webgl.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 52,
                  "startColumn": 68,
                  "endLine": 52,
                  "endColumn": 69,
                  "snippet": {
                    "text": "      functools.partial(uops_to_cstyle, GLSLLanguage()), lambda x: x, WebGLProgram)"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "1b1f33a987b7172da2afe517b7c34121d8f8934d304cd7c1a48877742a19be7b372821d64e19afc2dbb54693038bdf80956becb960c72344b353f13058ac67e9_0"
          },
          "properties": {}
        },
        {
          "ruleId": "8296cc61-d75a-3fc1-944e-2db1e7b757d6",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "`return` should never appear inside a class __init__ function. This will cause a runtime error."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "extra/backends/ops_webgpu.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 40,
                  "startColumn": 118,
                  "endLine": 40,
                  "endColumn": 119,
                  "snippet": {
                    "text": "                                                          global_max=[65535, 65535, 65535]), WGSLRenderer, lambda x: x, WebGPUProgram)"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "23b33bc09ca6f6fd9768a9a7e414209fe98a59e9a668633d4c15111ad1a1df825ef57ff087ab7fbb24c01af5ffc4cb390e5b9dfb7fad560e038fabc26c3a54dd_0"
          },
          "properties": {}
        },
        {
          "ruleId": "1d492b92-bc5d-3a62-9b88-29747a6034f1",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Regex `r'\\[(.*?)\\]'` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "extra/backends/triton.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 26,
                  "startColumn": 10,
                  "endLine": 26,
                  "endColumn": 44,
                  "snippet": {
                    "text": "  return re.sub(r'\\[(.*?)\\]', '', str(var))[1:-1]"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "000f76c248fdd8044aeab4ecace6894a94b7750f30ad5f96720e878328780deb60fb019ceb1701d1da19fc906d369f4d475ebe9f28e6dc6b4aae7f74115ed5aa_0"
          },
          "properties": {}
        },
        {
          "ruleId": "58a047bd-74bd-3282-aa9c-f0fd6e17bc68",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Regex `r'\\{\\s*(%\\w+)\\s*\\}'` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "extra/backends/triton.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 30,
                  "startColumn": 21,
                  "endLine": 30,
                  "endColumn": 61,
                  "snippet": {
                    "text": "  return '\\n'.join([re.sub(r'\\{\\s*(%\\w+)\\s*\\}', r'\\1', line) for line in ptx_code.split('\\n')])"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "b58bd7d1cfc58eb693f853ef26c64dc00204f3ec9deb36d07fa200162aa6e63f03e4aa1a90a1075fbecf1e38c326042821e75c1b803933cbe6a8307b8dbd177f_0"
          },
          "properties": {}
        },
        {
          "ruleId": "32bb6c1e-6db5-3e6e-bc40-43251d8d3d25",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Found non static data as an index to 'globals()'. This is extremely dangerous because it allows an attacker to execute arbitrary code on the system. Refactor your code not to use 'globals()'."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "extra/backends/triton.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 126,
                  "startColumn": 29,
                  "endLine": 126,
                  "endColumn": 53,
                  "snippet": {
                    "text": "  compiled = triton_compile(globals()[function_name], signature=\",\".join(signatures), device_type=\"cuda\", debug=False, cc=(35 if getenv(\"CUDACPU\", 0) else None))"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "2d535ec6d7c7848ed74460453cf53cd02f8dbecc520c09b20b3e39bfa44fda5dc361a127d04607c0d9ae3dcc85f2df376d04b79e6d574ba02fb260cb75fc758e_0"
          },
          "properties": {}
        },
        {
          "ruleId": "5cf3f41b-ba08-3991-a08f-9319184d76dc",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "file object opened without corresponding close"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "extra/datasets/__init__.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 38,
                  "startColumn": 5,
                  "endLine": 38,
                  "endColumn": 39,
                  "snippet": {
                    "text": "    tt = tarfile.open(fn, mode='r:gz')"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "963d8b9cbce56b2ef4bb57f012b615fe799f75508b6f4ecd9ddff3a8ad606a506ab58f42f73551a9372516b9c1e1ee0f54e74e5f04bcb37712293ea28b6aa598_0"
          },
          "properties": {}
        },
        {
          "ruleId": "26d73781-7633-3159-9e57-1584d7997ec5",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "extra/datasets/__init__.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 39,
                  "startColumn": 42,
                  "endLine": 39,
                  "endColumn": 126,
                  "snippet": {
                    "text": "    _load_disk_tensor(X_train, Y_train, [pickle.load(tt.extractfile(f'cifar-10-batches-py/data_batch_{i}'), encoding=\"bytes\") for i in range(1,6)])"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "74ecd729137cbb35f4e050d9408a78b4ef4d1117e75f487687ba01298a38537172ac9b09eee254bf5f534c1fdf9ddd55b6a39c144761e26797ef43a88887bf01_0"
          },
          "properties": {}
        },
        {
          "ruleId": "bfb5132b-5a22-3cc5-9893-6637393e2842",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "extra/datasets/__init__.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 40,
                  "startColumn": 40,
                  "endLine": 40,
                  "endColumn": 119,
                  "snippet": {
                    "text": "    _load_disk_tensor(X_test, Y_test, [pickle.load(tt.extractfile('cifar-10-batches-py/test_batch'), encoding=\"bytes\")])"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "74ecd729137cbb35f4e050d9408a78b4ef4d1117e75f487687ba01298a38537172ac9b09eee254bf5f534c1fdf9ddd55b6a39c144761e26797ef43a88887bf01_1"
          },
          "properties": {}
        },
        {
          "ruleId": "c20dad82-585e-3f9c-a369-5fb166d64989",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Detected hardcoded temp directory. Consider using 'tempfile.TemporaryFile' instead.\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "extra/datasets/__init__.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 41,
                  "startColumn": 5,
                  "endLine": 41,
                  "endColumn": 39,
                  "snippet": {
                    "text": "    open(\"/tmp/cifar_extracted\", \"wb\").close()"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "aaab21afeda197e572c9f98bd90f283cf435e7097faca0d43b4c3183a8675103c3764bbb6d806a745615b220711e8320dd9feef9416236e60d221c967d9c4da8_0"
          },
          "properties": {}
        },
        {
          "ruleId": "1750f7d8-40e7-383c-9c9d-5920f4467bc6",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "`pass` is the body of for _ in p.imap_unordered(act, gen(True)). Consider removing this or raise NotImplementedError() if this is a TODO"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "extra/datasets/fake_imagenet_from_mnist.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 37,
                  "startColumn": 5,
                  "endLine": 37,
                  "endColumn": 52,
                  "snippet": {
                    "text": "    for _ in p.imap_unordered(act, gen(True)): pass"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "c03b94779e0c2b8559e129871e71e51aa187068764ef1b64839c818737e694745235939cb63ad5cd5448aa6d1a2f34d39f0f10af5f117603b9bf75bb63b0c36b_0"
          },
          "properties": {}
        },
        {
          "ruleId": "ff62ca1f-446e-3e7e-8e83-8c9d87d2ebc9",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "`pass` is the body of for _ in p.imap_unordered(act, gen(False)). Consider removing this or raise NotImplementedError() if this is a TODO"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "extra/datasets/fake_imagenet_from_mnist.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 38,
                  "startColumn": 5,
                  "endLine": 38,
                  "endColumn": 53,
                  "snippet": {
                    "text": "    for _ in p.imap_unordered(act, gen(False)): pass"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "f9885d4c6f9ba5360059b0a2b17445292dd78620c945e222999dd9a4ca59f13b9d4342d343d4b387ed7c8531c3ca02bb20ec3c0e449993b700ed858aff4eab40_0"
          },
          "properties": {}
        },
        {
          "ruleId": "6f51d769-8e36-3cec-9840-b1ae04e34ed9",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "The Python 'tarfile' extract|extractall functions are vulnerable to arbitrary file overwrites"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "extra/datasets/imagenet_download.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 8,
                  "startColumn": 8,
                  "endLine": 13,
                  "endColumn": 16,
                  "snippet": {
                    "text": "  with tarfile.open(name=file) as tar:\n    if small: # Show progressbar only for big files\n      for member in tar.getmembers(): tar.extract(path=path, member=member)\n    else:\n      for member in tqdm(iterable=tar.getmembers(), total=len(tar.getmembers())): tar.extract(path=path, member=member)\n    tar.close()"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "e920214fa951bb67f13b0fa95622115438f7f2db679dbf9959ba6270914f3be14da7b526c7272d5da3b6c267c25d40d1a2e2325277c7fc52e1c7fb2971eef6d0_0"
          },
          "properties": {}
        },
        {
          "ruleId": "a399b98b-4095-3df9-b84f-a9be1d8c6518",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "extra/datasets/wikipedia.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 357,
                  "startColumn": 7,
                  "endLine": 357,
                  "endColumn": 36,
                  "snippet": {
                    "text": "      pickle.dump(feature_batch, f)"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "8ea86872b9889bb5c5f4ef4a18b0cdd4fe75f1f076208fc25909de14eb4c69a8729ee83aac1a1eabb4d8aa4bad3ba0253d40c005869a607136c5fbf5f3741995_0"
          },
          "properties": {}
        },
        {
          "ruleId": "3459d2f2-86ab-35f3-924d-6965dba5ce2d",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "extra/datasets/wikipedia.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 401,
                  "startColumn": 9,
                  "endLine": 401,
                  "endColumn": 38,
                  "snippet": {
                    "text": "        pickle.dump(feature_batch, f)"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "8ea86872b9889bb5c5f4ef4a18b0cdd4fe75f1f076208fc25909de14eb4c69a8729ee83aac1a1eabb4d8aa4bad3ba0253d40c005869a607136c5fbf5f3741995_1"
          },
          "properties": {}
        },
        {
          "ruleId": "328558a9-c8d6-3faf-b276-36bad525cac6",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "extra/datasets/wikipedia.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 411,
                  "startColumn": 11,
                  "endLine": 411,
                  "endColumn": 40,
                  "snippet": {
                    "text": "          pickle.dump(feature_batch, f)"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "8ea86872b9889bb5c5f4ef4a18b0cdd4fe75f1f076208fc25909de14eb4c69a8729ee83aac1a1eabb4d8aa4bad3ba0253d40c005869a607136c5fbf5f3741995_2"
          },
          "properties": {}
        },
        {
          "ruleId": "f65391ed-dfb4-3531-bcbc-0ed92beabdfe",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "The Python 'tarfile' extract|extractall functions are vulnerable to arbitrary file overwrites"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "extra/datasets/wikipedia_download.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 16,
                  "startColumn": 10,
                  "endLine": 22,
                  "endColumn": 122,
                  "snippet": {
                    "text": "    with tarfile.open(file, 'r:gz') as tar:\n      tar.extractall(path=path)\n      os.remove(file)\n      if small:\n        for member in tar.getmembers(): tar.extract(path=path, member=member)\n      else:\n        for member in tqdm(iterable=tar.getmembers(), total=len(tar.getmembers())): tar.extract(path=path, member=member)"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "8e7691a80c3bdedb575db0b68b5ff6193816dd1ab46c16a090faf2aadba4dc5398829d05c0da694ce67e12a1db3158eb4c199c95729bd3c197bf79a9492317f8_0"
          },
          "properties": {}
        },
        {
          "ruleId": "e35699bf-23e4-3a15-85ad-d25b403377c7",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Detected MD5 hash algorithm which is considered insecure. MD5 is not\ncollision resistant and is therefore not suitable as a cryptographic\nsignature. Use SHA256 or SHA3 instead.\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "extra/datasets/wikipedia_download.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 30,
                  "startColumn": 16,
                  "endLine": 30,
                  "endColumn": 29,
                  "snippet": {
                    "text": "      hasher = hashlib.md5()"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "858717d22b8b28889759e23cdd199bab60edaf9e1666b466ba932233e5cc2c265e628643cfb9affc5491d58630e871ae5ff7f17537e7ae7a8b35d3053d998ba2_0"
          },
          "properties": {}
        },
        {
          "ruleId": "5deeacd2-5683-3c16-8121-268b2a11dedc",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Use `sys.exit` over the python shell `exit` built-in. `exit` is a helper for the interactive shell and may not be available on all Python implementations. https://stackoverflow.com/questions/6501121/difference-between-exit-and-sys-exit-in-python"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "extra/disk_read_speed.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 90,
                  "startColumn": 3,
                  "endLine": 90,
                  "endColumn": 10,
                  "snippet": {
                    "text": "  exit(0)"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "f37e20da4d80c27a840771f7e7199ed040de9d2779b8bc1f7c5ede1c39096be636eba105a7cba430f2eb5c981ad52e44a9ba72c22a21363d7bed390341dacc06_0"
          },
          "properties": {}
        },
        {
          "ruleId": "a7108619-24c4-3231-a6fa-bc5a5b84b961",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Use `sys.exit` over the python shell `exit` built-in. `exit` is a helper for the interactive shell and may not be available on all Python implementations. https://stackoverflow.com/questions/6501121/difference-between-exit-and-sys-exit-in-python"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "extra/disk_read_speed.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 107,
                  "startColumn": 3,
                  "endLine": 107,
                  "endColumn": 10,
                  "snippet": {
                    "text": "  exit(0)"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "f37e20da4d80c27a840771f7e7199ed040de9d2779b8bc1f7c5ede1c39096be636eba105a7cba430f2eb5c981ad52e44a9ba72c22a21363d7bed390341dacc06_1"
          },
          "properties": {}
        },
        {
          "ruleId": "36350bd2-753e-3dbe-aac2-3c9112b617f9",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Detected possible formatted SQL query. Use parameterized queries instead."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "extra/dump_cache.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 12,
                  "startColumn": 5,
                  "endLine": 12,
                  "endColumn": 50,
                  "snippet": {
                    "text": "    cur2.execute(f\"SELECT COUNT(*) FROM {table}\")"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "04f6284c01256cd356b8a10570b59403aa37bae31ded37cb98117045ec5bd072a34accfc77acb88d3922d183677ecfa2c8382e30ebd877ceaa8c4f34346da42e_0"
          },
          "properties": {}
        },
        {
          "ruleId": "b334b3eb-6141-35b8-8259-94f64a620d51",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Detected possible formatted SQL query. Use parameterized queries instead."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "extra/dump_cache.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 17,
                  "startColumn": 5,
                  "endLine": 17,
                  "endColumn": 52,
                  "snippet": {
                    "text": "    cur3.execute(f\"SELECT * FROM {table} LIMIT 10\")"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "06ace74a31809bc71283a0edbbb50622f9763509af86e4583fc182b152527cf11e2d1e0ce28af3eff178720d391fb1c5dca81d8b5097e9dddb5394f2b0a6c0d4_0"
          },
          "properties": {}
        },
        {
          "ruleId": "aaa12889-72fd-32af-825d-1d22f502fab7",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "extra/dump_cache.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 19,
                  "startColumn": 11,
                  "endLine": 19,
                  "endColumn": 30,
                  "snippet": {
                    "text": "      v = pickle.loads(f[-1])"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "24f39df8b6d11e1b8a8b2b4739465b0a5cc72e77740aa4ef88f6196acc447b54b7729e01bf430157f759d5a04f0cc044b6b259726776dae9540a7a6d70385c00_0"
          },
          "properties": {}
        },
        {
          "ruleId": "0a9042ef-d8cb-3b8f-8026-48e280506afb",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "`return` only makes sense inside a function"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "extra/gemm/amx.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 173,
                  "startColumn": 26,
                  "endLine": 173,
                  "endColumn": 45,
                  "snippet": {
                    "text": "tm = min([timeit(lambda: prog(a, b, c, N**2)) for _ in range(20)])"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "85ead91e7f66bec8b3397fca946d9910ae9ab419bc0ed6ebf987913723ca6f41beec2b29b2204d07fd8ca06b795a82a39ff3372705c1ad75500ba3b5a0bb87fd_0"
          },
          "properties": {}
        },
        {
          "ruleId": "d175a391-b061-3126-b214-1127d533effb",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "extra/gemm/gemm.c",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 119,
                  "startColumn": 13,
                  "endLine": 119,
                  "endColumn": 39,
                  "snippet": {
                    "text": "  FILE *f = fopen(\"/tmp/matmul\", \"rb\");"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "ffbac5ace26916a568d3e3515669f4af16920776fda3e954ffb5f8dea326b7775626e3060c653f53280b2f2f0fbe9f49dc32eb8b6601d00f1b7880f7dffa0996_0"
          },
          "properties": {}
        },
        {
          "ruleId": "e742a749-6851-367a-9c1b-f90e17b03046",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "extra/gemm/gemm.c",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 124,
                  "startColumn": 3,
                  "endLine": 124,
                  "endColumn": 36,
                  "snippet": {
                    "text": "  fread(A, 1, sizeof(float)*N*N, f);"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "2fc917427dc220d6704f6c4cde890cbbc5e427853c3cafa66e45e9140203ddd4c8efbd154ebdf669c38c218016d9a2cba8eef5f16930603843db2ce80d7cfbc4_0"
          },
          "properties": {}
        },
        {
          "ruleId": "953488b6-4f6e-38df-8ff8-3cb061a020ac",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "extra/gemm/gemm.c",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 125,
                  "startColumn": 3,
                  "endLine": 125,
                  "endColumn": 36,
                  "snippet": {
                    "text": "  fread(B, 1, sizeof(float)*N*N, f);"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "2fc917427dc220d6704f6c4cde890cbbc5e427853c3cafa66e45e9140203ddd4c8efbd154ebdf669c38c218016d9a2cba8eef5f16930603843db2ce80d7cfbc4_1"
          },
          "properties": {}
        },
        {
          "ruleId": "21e9e36d-6ea9-36f3-b876-aca2bddb14d6",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "extra/gemm/gemm.c",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 126,
                  "startColumn": 3,
                  "endLine": 126,
                  "endColumn": 38,
                  "snippet": {
                    "text": "  fread(val, 1, sizeof(float)*N*N, f);"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "2fc917427dc220d6704f6c4cde890cbbc5e427853c3cafa66e45e9140203ddd4c8efbd154ebdf669c38c218016d9a2cba8eef5f16930603843db2ce80d7cfbc4_2"
          },
          "properties": {}
        },
        {
          "ruleId": "05d41032-34bc-3e28-a16c-ffadd2bade8b",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "The software directly writes into a stack buffer. This might lead to a stack-based buffer overflow."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "extra/gemm/gemm.c",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 140,
                  "startColumn": 5,
                  "endLine": 140,
                  "endColumn": 36,
                  "snippet": {
                    "text": "    memset(C, 0, N*N*sizeof(float));"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "42bf2c0d63c68eceec103cdddcf130425a0e0397fdee57b6dc0f543931cb21ba13cfbe135dd1d971da67392e47e8bb477c0999c3190acc65a630598f732e14aa_0"
          },
          "properties": {}
        },
        {
          "ruleId": "1f4d8778-9aa9-396b-9c09-df47a266be8e",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Detected hardcoded temp directory. Consider using 'tempfile.TemporaryFile' instead.\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "extra/gemm/gemm.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 25,
                  "startColumn": 8,
                  "endLine": 25,
                  "endColumn": 33,
                  "snippet": {
                    "text": "  with open(\"/tmp/matmul\", \"wb\") as f:"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "cc75e9cf3d8cda3069df11140bf9afe8f4127336138ffaa1b9e76732036dffbb9614692d8a79fefa936de9599ee40994a2d26bcb0a6aeae0e81dfc3248e04757_0"
          },
          "properties": {}
        },
        {
          "ruleId": "a201ab28-82ec-3f91-b073-e852f777ef39",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "`return` only makes sense inside a function"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "extra/gemm/hip_matmul.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 134,
                  "startColumn": 26,
                  "endLine": 134,
                  "endColumn": 98,
                  "snippet": {
                    "text": "tm = min([timeit(lambda: prog(a, b, c, global_size=global_size, local_size=local_size, wait=True)) for _ in range(CNT)])"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "8fec0aea21749503d285d611b4f002439c0c3b72e23fdb1074af202a17b6f7362a2bcd0deb746dc536cbbfc338d602de197b0c950e04f7ca2e68d9320a858d42_0"
          },
          "properties": {}
        },
        {
          "ruleId": "f189ab78-6ea6-3eb7-a221-1e67180b99fb",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "`return` only makes sense inside a function"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "extra/gemm/metal_matmul.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 97,
                  "startColumn": 26,
                  "endLine": 97,
                  "endColumn": 116,
                  "snippet": {
                    "text": "tm = min([timeit(lambda: prog(a, b, c, global_size=[N//(8*4), N//(8*4*LID), 1], local_size=[32, LID, 1], wait=True)) for _ in range(20)])"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "d789a7f3e84ad5a64b8233c1eef78802fba0db2ea26e0d121a052ccb0c5438e31df302ff371159e2b07f919ceea17e41b0412e596342ac2d45a84cb740a462b3_0"
          },
          "properties": {}
        },
        {
          "ruleId": "aef62f53-e51a-344c-823a-713412092791",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "`return` only makes sense inside a function"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "extra/gemm/tvm_gemm.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 17,
                  "startColumn": 39,
                  "endLine": 17,
                  "endColumn": 72,
                  "snippet": {
                    "text": "  C = te.compute((M, N), lambda x, y: te.sum(A[x, k] * B[k, y], axis=k), name=\"C\")"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "6512c2ff882f8bcee22541de8033458c0ab6a91d4072567989baae1c1239fb2ea0fc68eb837606442f33bfcd5d190ea40cdd701f7290b0824f1c8c45dd7f56a0_0"
          },
          "properties": {}
        },
        {
          "ruleId": "b277da45-ded2-380d-b8d7-6e3d74caa6c7",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "`return` only makes sense inside a function"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "extra/hip_events.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 8,
                  "startColumn": 48,
                  "endLine": 8,
                  "endColumn": 90,
                  "snippet": {
                    "text": "  evt = init_c_var(hip.hipEvent_t(), lambda x: check(hip.hipEventCreate(ctypes.byref(x))))"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "69dee88b18d71b8604eac6f8330e6cdc048bd6444e39170d79e111369df1eb70bbe1ed678bbd657d24b87752b0a8a7e0e27aa688e3356cda78a54d0f0483e3cb_0"
          },
          "properties": {}
        },
        {
          "ruleId": "a0e7a235-d8a3-335c-84ad-883c2869c351",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Regex `pattern` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "extra/hip_gpu_driver/hip_ioctl.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 51,
                  "startColumn": 13,
                  "endLine": 51,
                  "endColumn": 51,
                  "snippet": {
                    "text": "  matches = re.findall(pattern, hdr, re.MULTILINE)"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "16db1d456bf3a6b35b0bfead21575953d9f1219ef20b642ba0c4a21fa0d4d49a372a124b8ee3ab0e508f8840d4b020d1ee79e12240806e7039c14549baf1469e_0"
          },
          "properties": {}
        },
        {
          "ruleId": "a4d21c95-abc0-31d0-b90c-658a9bc87f3f",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Function 'ioctl' is missing a rate-limiting decorator.\nHigh volume traffic to this function could starve application\nresources. Consider adding rate limiting from a library such\nas 'django-ratelimit'.\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "extra/hip_gpu_driver/hip_ioctl.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 55,
                  "startColumn": 1,
                  "endLine": 72,
                  "endColumn": 13,
                  "snippet": {
                    "text": "@ctypes.CFUNCTYPE(ctypes.c_int, ctypes.c_int, ctypes.c_ulong, ctypes.c_void_p)\ndef ioctl(fd, request, argp):\n  st = time.perf_counter()\n  ret = libc.syscall(IOCTL_SYSCALL, ctypes.c_int(fd), ctypes.c_ulong(request), ctypes.c_void_p(argp))\n  et = time.perf_counter()-st\n  idir, size, itype, nr = (request>>30), (request>>16)&0x3FFF, (request>>8)&0xFF, request&0xFF\n  if nr in nrs and itype == 75:\n    # /dev/kfd\n    name, stype = nrs[nr]\n    s = get_struct(argp, stype)\n    print(f\"{(st-start)*1000:7.2f} ms +{et*1000.:7.2f} ms : {ret:2d} = {name:40s}\", ' '.join(format_struct(s)))\n    if name == \"AMDKFD_IOC_SVM\":\n      out = ctypes.cast(s.attrs, ctypes.POINTER(kfd_ioctl.struct_kfd_ioctl_svm_attribute))\n      for i in range(s.nattr): print(f\"{i}: {kfd_ioctl.kfd_ioctl_svm_attr_type__enumvalues[out[i].type]:40s}: {out[i].value:#x}\")\n  else:\n    print(f\"{(st-start)*1000:7.2f} ms +{et*1000.:7.2f} ms : ioctl\",\n          f\"{idir=} {size=} {itype=} {nr=} {fd=} {ret=}\", os.readlink(f\"/proc/self/fd/{fd}\") if fd >= 0 else \"\")\n  return ret"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "126948ffb6333be2fc00a9131aeba64512de45adb4d442be22073b7135a59c50ab018ccf58672c4d9543014e7d60970efc5b1a74975118a238e2c27ad2977f0b_0"
          },
          "properties": {}
        },
        {
          "ruleId": "b21275ff-27eb-3824-80ca-2940da54cf06",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "extra/hip_gpu_driver/sdma_registers.h",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 55,
                  "startColumn": 20,
                  "endLine": 55,
                  "endColumn": 36,
                  "snippet": {
                    "text": "const unsigned int SDMA_OP_COPY = 1;"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "a588aa05e8f3aa8587e41899319b17cf2825acb46adba673e0bc1441e16b720614ff1b0acb86ef50b25ee35c2b9bd496358e8587951ff35d7457c363f2e57077_0"
          },
          "properties": {}
        },
        {
          "ruleId": "7d634454-576c-38a5-89b4-cbf2c2817c20",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "extra/hip_gpu_driver/sdma_registers.h",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 56,
                  "startColumn": 20,
                  "endLine": 56,
                  "endColumn": 37,
                  "snippet": {
                    "text": "const unsigned int SDMA_OP_FENCE = 5;"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "292d4b6ef821663996a1a848623eac791e359609d1e5b2b3cb021350646d9d1ffd5adbc479e62e0a6b4a4f7834885e494bc725bc28f77a95f00f2ff5afc8277c_0"
          },
          "properties": {}
        },
        {
          "ruleId": "5fb7fd06-28cf-3491-ab2f-2842b0ffcfad",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "extra/hip_gpu_driver/sdma_registers.h",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 57,
                  "startColumn": 20,
                  "endLine": 57,
                  "endColumn": 36,
                  "snippet": {
                    "text": "const unsigned int SDMA_OP_TRAP = 6;"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "5b07618827952f90189059a67e6f2d5442108f49a4a48edc2d74268cf4565fd44cc1842812b712bea0ece0564d66bd7853d59f75ce0fa31e469dcaef73434ae0_0"
          },
          "properties": {}
        },
        {
          "ruleId": "5e3f484d-0679-372d-8f2a-30a5036ee320",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "extra/hip_gpu_driver/sdma_registers.h",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 58,
                  "startColumn": 20,
                  "endLine": 58,
                  "endColumn": 43,
                  "snippet": {
                    "text": "const unsigned int SDMA_OP_POLL_REGMEM = 8;"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "924ad3c87ab602061badce5648e4f0a5cd848057bc116755e4b805d2db82a3c65a0f82a596eef8b58512cc7e261566c9483e812740af42da48eb11cfb2c24d2b_0"
          },
          "properties": {}
        },
        {
          "ruleId": "9a88a4be-07d9-30e3-9f6a-1f60dfc30931",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "extra/hip_gpu_driver/sdma_registers.h",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 59,
                  "startColumn": 20,
                  "endLine": 59,
                  "endColumn": 39,
                  "snippet": {
                    "text": "const unsigned int SDMA_OP_ATOMIC = 10;"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "df80118bdf3a889fe2fcd97fdc144c4bfca7fbbd107edba6e88f89b6931ad348b8f39f919c4171e05a87167c8160374051f28379b32c782dc0a1c5cceb34bca7_0"
          },
          "properties": {}
        },
        {
          "ruleId": "2e465ec7-b31e-3601-96ac-a43a9f087ed7",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "extra/hip_gpu_driver/sdma_registers.h",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 60,
                  "startColumn": 20,
                  "endLine": 60,
                  "endColumn": 43,
                  "snippet": {
                    "text": "const unsigned int SDMA_OP_CONST_FILL = 11;"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "fc0b716c788da03679296abcb79f3722193016c5853387b3b299b38ad10690d22cf5392bf3524ca80efcf6f5e40f70f6e0569a5b708fc7868442ad36f046a13d_0"
          },
          "properties": {}
        },
        {
          "ruleId": "ffa2b6bf-be3f-381b-a82a-c2ea3726a226",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "extra/hip_gpu_driver/sdma_registers.h",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 61,
                  "startColumn": 20,
                  "endLine": 61,
                  "endColumn": 42,
                  "snippet": {
                    "text": "const unsigned int SDMA_OP_TIMESTAMP = 13;"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "8b3ef87b647d1a2b6decd10f041ada89001e99228359b5cacb257ac346535f5b3af4ad5a94933974650123b3c0fd3f7fceb2e86bd50d9379016a02ba6c4b1efa_0"
          },
          "properties": {}
        },
        {
          "ruleId": "3b8b8d26-d774-3eeb-9b8e-4bc723090b08",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "extra/hip_gpu_driver/sdma_registers.h",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 62,
                  "startColumn": 20,
                  "endLine": 62,
                  "endColumn": 36,
                  "snippet": {
                    "text": "const unsigned int SDMA_OP_GCR = 17;"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "778d2d5f34235f71be3526bbd3d0295b624c650625176fcb0f611322e9fc9d0e5016549fc851426f5258546f6f4098c869a14f02a75c7e44b4b09da14f0f6573_0"
          },
          "properties": {}
        },
        {
          "ruleId": "3411cbb4-907f-3e96-bf27-eab851e1b139",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "extra/hip_gpu_driver/sdma_registers.h",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 63,
                  "startColumn": 20,
                  "endLine": 63,
                  "endColumn": 46,
                  "snippet": {
                    "text": "const unsigned int SDMA_SUBOP_COPY_LINEAR = 0;"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "99ad0b2a5fceec8e806fa8ca43968d9367a5d2cc39490420c3e412df29af912bca30a8c2e210d2018eb9d5a48545b8cb46a6223c234c27d998a94aa0eff02e80_0"
          },
          "properties": {}
        },
        {
          "ruleId": "61ea94a8-0602-3314-b6fd-f9a85ba5eca4",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "extra/hip_gpu_driver/sdma_registers.h",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 64,
                  "startColumn": 20,
                  "endLine": 64,
                  "endColumn": 51,
                  "snippet": {
                    "text": "const unsigned int SDMA_SUBOP_COPY_LINEAR_RECT = 4;"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "cfb18a24d9c54bd21467eb6fa7675f4bc8c43edce918da52059bcd6ab7eeb093a56670e0ad6ef0272ed1d63653af6a2ac01b5895f45ac6479cb9a891f4bd500e_0"
          },
          "properties": {}
        },
        {
          "ruleId": "fce7dcb8-56c6-3291-b6d2-7a9330e9eb2e",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "extra/hip_gpu_driver/sdma_registers.h",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 65,
                  "startColumn": 20,
                  "endLine": 65,
                  "endColumn": 55,
                  "snippet": {
                    "text": "const unsigned int SDMA_SUBOP_TIMESTAMP_GET_GLOBAL = 2;"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "cd9bda79d0c152099618bc1f20be2956b094dca5e59a5479c7525a9e52fdf193d0d9d66fe7c2bb928ff260e7a5aae3338d8dcb3a4afb9890b4f6ce32d889cbc3_0"
          },
          "properties": {}
        },
        {
          "ruleId": "3705b3c4-d3d2-3196-b82b-bdfce8fff38e",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "extra/hip_gpu_driver/sdma_registers.h",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 66,
                  "startColumn": 20,
                  "endLine": 66,
                  "endColumn": 43,
                  "snippet": {
                    "text": "const unsigned int SDMA_SUBOP_USER_GCR = 1;"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "17406c0791f40405ba582ef431dc0db2f60fc4125706279f1f4db3c133de89d349d00b5c3561c5b724beec0a42baee781a6f9c1445195f85893d756763cb36a3_0"
          },
          "properties": {}
        },
        {
          "ruleId": "866d00a5-f9a5-30cc-83e9-4b32bdfa9612",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "extra/hip_gpu_driver/sdma_registers.h",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 67,
                  "startColumn": 20,
                  "endLine": 67,
                  "endColumn": 42,
                  "snippet": {
                    "text": "const unsigned int SDMA_ATOMIC_ADD64 = 47;"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "d147fb8c199fe221337d422c55c2b74c82e5e3e61c264f62374be9002492915041f1fc222a999ba383e467c69cf4f9d5232cc93234ff2d1937fab0a72cc31079_0"
          },
          "properties": {}
        },
        {
          "ruleId": "43e3b6a1-a094-388e-90a3-ef7b456f2fb2",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Regex `pattern` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "extra/hip_gpu_driver/test_kfd_2.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 33,
                  "startColumn": 13,
                  "endLine": 33,
                  "endColumn": 51,
                  "snippet": {
                    "text": "  matches = re.findall(pattern, hdr, re.MULTILINE)"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "7941dd6eba79271838b7cbe72bbaaa8238f4fbf543b19b065434f9797aa86afbbf42f94c3a6bea493e12b43fdc7b6f5e8da39b6c4ae5b0d29567d7dbb3d416cc_0"
          },
          "properties": {}
        },
        {
          "ruleId": "b59c380a-0899-3841-9000-5940ed3f30b9",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "time.sleep() call; did you mean to leave this in?"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "extra/hip_gpu_driver/test_pm4.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 133,
                  "startColumn": 7,
                  "endLine": 133,
                  "endColumn": 23,
                  "snippet": {
                    "text": "      time.sleep(0.01)"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "0e9ea5a986dbc93ac8688a47fa9117b7ba8cefec068294750a105855c85b24f54ccda96dcbbd42a9b70128141e4859af228ac28ee1d88762add1d301c7b81653_0"
          },
          "properties": {}
        },
        {
          "ruleId": "249c4b30-4ea8-31a1-95e7-fe5441ef11a8",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Use `sys.exit` over the python shell `exit` built-in. `exit` is a helper for the interactive shell and may not be available on all Python implementations. https://stackoverflow.com/questions/6501121/difference-between-exit-and-sys-exit-in-python"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "extra/hip_gpu_driver/test_pm4.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 145,
                  "startColumn": 3,
                  "endLine": 145,
                  "endColumn": 10,
                  "snippet": {
                    "text": "  exit(0)"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "501d6de4bc4a3dace5a9ef3ee442eba23e6201ff8b3d3228bf881f2a3b8bfdc7745fb63077ad65adc309ce581e9453fd9a8339a2b8a51cc6bb059887f633a43e_0"
          },
          "properties": {}
        },
        {
          "ruleId": "639ec970-8346-3ccf-bd8b-4fcb2f87effb",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "time.sleep() call; did you mean to leave this in?"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "extra/hip_gpu_driver/test_sdma_fun.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 39,
                  "startColumn": 5,
                  "endLine": 39,
                  "endColumn": 21,
                  "snippet": {
                    "text": "    time.sleep(0.01)"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "a23cce52c3b19b7c4e1f611318dc9539744a29bbac46c840b5ba9452e02686c67e5b5043324262ffd8a7fe852f2af890b5d287dcdd580bca76e669b882270ba4_0"
          },
          "properties": {}
        },
        {
          "ruleId": "1cf05756-91d9-3357-96d5-0624c520704f",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Functions reliant on pickle can result in arbitrary code execution.  Consider loading from `state_dict`, using fickling, or switching to a safer serialization method like ONNX"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "extra/models/bert.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 26,
                  "startColumn": 20,
                  "endLine": 26,
                  "endColumn": 53,
                  "snippet": {
                    "text": "      state_dict = torch.load(f, map_location=\"cpu\")"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "6148151f50a399b4050b42f96d19d237db266e6f957f048f86fca619c6da5ac6b0f657c3d4ad7c4bea081baf79fb8a35313b50962f40cdc3b3f16b1ee36899e3_0"
          },
          "properties": {}
        },
        {
          "ruleId": "c839a7cd-ea81-3173-acc1-df5bc3d93f30",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "`return` should never appear inside a class __init__ function. This will cause a runtime error."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "extra/models/efficientnet.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 78,
                  "startColumn": 7,
                  "endLine": 78,
                  "endColumn": 30,
                  "snippet": {
                    "text": "      return int(new_filters)"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "03473996594046a787876c8a7a7c58b1cc092c18989d330c2a787c8f036543e30ab66182e241fa59f1998a55380789dbe7011d79bfe3158ab193a224cd26605c_0"
          },
          "properties": {}
        },
        {
          "ruleId": "508ba444-99ca-3bd7-b39d-1648fd1b3e55",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "`return` should never appear inside a class __init__ function. This will cause a runtime error."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "extra/models/efficientnet.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 81,
                  "startColumn": 7,
                  "endLine": 81,
                  "endColumn": 56,
                  "snippet": {
                    "text": "      return int(math.ceil(global_params[1] * repeats))"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "03473996594046a787876c8a7a7c58b1cc092c18989d330c2a787c8f036543e30ab66182e241fa59f1998a55380789dbe7011d79bfe3158ab193a224cd26605c_1"
          },
          "properties": {}
        },
        {
          "ruleId": "b5c22e1f-c984-35aa-bbea-8e005187a2be",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Facebook OAuth detected"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "extra/models/llama.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 22,
                  "endLine": 5,
                  "endColumn": 90,
                  "snippet": {
                    "text": "# https://github.com/facebookresearch/llama/blob/1076b9c51c77ad06e9d7ba8a4c6df775741732bd/llama/model.py#L47"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "e0bc3ab9e0e331be35efd9d5eb7909794fe8a77c58c899fcc95a8d25d498087f7bef5e8d7f209f9ad0d59fce062171436a826f230f78894b1a7233034c01aa82_0"
          },
          "properties": {}
        },
        {
          "ruleId": "8c7093e3-5c9f-3cfb-895c-fa59587e8997",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Regex `r\"fpn_inner(\\d+)\"` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "extra/models/mask_rcnn.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 1250,
                  "startColumn": 27,
                  "endLine": 1250,
                  "endColumn": 58,
                  "snippet": {
                    "text": "        block_index = int(re.search(r\"fpn_inner(\\d+)\", k).group(1))"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "fe7ab5986db9dcb25ff587697256fe7390a443a12332f548ed5ee1e3e9769968d453fa24178407582b8412532fcbe611fa44c86a543c16cde5b36b67abd2aa6b_0"
          },
          "properties": {}
        },
        {
          "ruleId": "e02ef670-e975-3c54-9ec5-980db72c050b",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Regex `r\"fpn_inner\\d+\"` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "extra/models/mask_rcnn.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 1251,
                  "startColumn": 13,
                  "endLine": 1251,
                  "endColumn": 74,
                  "snippet": {
                    "text": "        k = re.sub(r\"fpn_inner\\d+\", f\"inner_blocks.{block_index - 1}\", k)"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "d09f73ebba2a504065c85b8cd98748b40393a5bcbae982c60767ab38775f5f0e1e98910f328a9c18da71c7eabdb61725826d6a5f970a5bb084b0c3a94784ae7c_0"
          },
          "properties": {}
        },
        {
          "ruleId": "9fba8483-0c6c-344f-85d4-108758509ca5",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Regex `r\"fpn_layer(\\d+)\"` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "extra/models/mask_rcnn.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 1253,
                  "startColumn": 27,
                  "endLine": 1253,
                  "endColumn": 58,
                  "snippet": {
                    "text": "        block_index = int(re.search(r\"fpn_layer(\\d+)\", k).group(1))"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "9cd1258d95d575c1d78adbba8d04ef0b21131d1619352545b0bdb9515dff35c7d65c2d46ccf31765f2f24526f28f8a9bdcd59ab55035266e39cabb959a59eaeb_0"
          },
          "properties": {}
        },
        {
          "ruleId": "f8541ac1-357a-3190-90d6-2f32a5a4a935",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Regex `r\"fpn_layer\\d+\"` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "extra/models/mask_rcnn.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 1254,
                  "startColumn": 13,
                  "endLine": 1254,
                  "endColumn": 74,
                  "snippet": {
                    "text": "        k = re.sub(r\"fpn_layer\\d+\", f\"layer_blocks.{block_index - 1}\", k)"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "bbfea91857fc139ad1d2d35619b3448c27905316c275cbf3a022c68f1e05753494f4182ff910fa3138fbec9be6182b58f95d252998860f4cb29e7c154f62c664_0"
          },
          "properties": {}
        },
        {
          "ruleId": "503bca0b-68cb-32eb-84ec-12aaac12029e",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "`return` only makes sense inside a function"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "extra/models/resnet.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 153,
                  "startColumn": 37,
                  "endLine": 153,
                  "endColumn": 72,
                  "snippet": {
                    "text": "ResNet18 = lambda num_classes=1000: ResNet(18, num_classes=num_classes)"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "73757e2135a1f249e9fac4fcef9585458c8adab5daeaa234e947c8820ab0d86ed14aecbc9aa42f6ba9577b70a42ebba65eddb8d0963908c825f4788dabde04bf_0"
          },
          "properties": {}
        },
        {
          "ruleId": "5a23e375-4dbf-39e3-9837-8d44f69d42bd",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "`return` only makes sense inside a function"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "extra/models/resnet.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 154,
                  "startColumn": 37,
                  "endLine": 154,
                  "endColumn": 72,
                  "snippet": {
                    "text": "ResNet34 = lambda num_classes=1000: ResNet(34, num_classes=num_classes)"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "73757e2135a1f249e9fac4fcef9585458c8adab5daeaa234e947c8820ab0d86ed14aecbc9aa42f6ba9577b70a42ebba65eddb8d0963908c825f4788dabde04bf_1"
          },
          "properties": {}
        },
        {
          "ruleId": "940bc7b1-6220-357f-81dd-94bbd7c9587c",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "`return` only makes sense inside a function"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "extra/models/resnet.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 155,
                  "startColumn": 37,
                  "endLine": 155,
                  "endColumn": 72,
                  "snippet": {
                    "text": "ResNet50 = lambda num_classes=1000: ResNet(50, num_classes=num_classes)"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "73757e2135a1f249e9fac4fcef9585458c8adab5daeaa234e947c8820ab0d86ed14aecbc9aa42f6ba9577b70a42ebba65eddb8d0963908c825f4788dabde04bf_2"
          },
          "properties": {}
        },
        {
          "ruleId": "1f0926f1-a553-33b7-ae74-f0d6973d6dab",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "`return` only makes sense inside a function"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "extra/models/resnet.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 156,
                  "startColumn": 38,
                  "endLine": 156,
                  "endColumn": 74,
                  "snippet": {
                    "text": "ResNet101 = lambda num_classes=1000: ResNet(101, num_classes=num_classes)"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "73757e2135a1f249e9fac4fcef9585458c8adab5daeaa234e947c8820ab0d86ed14aecbc9aa42f6ba9577b70a42ebba65eddb8d0963908c825f4788dabde04bf_3"
          },
          "properties": {}
        },
        {
          "ruleId": "32ffea9f-6e0c-39a1-84dc-9ec1481787e9",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "`return` only makes sense inside a function"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "extra/models/resnet.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 157,
                  "startColumn": 38,
                  "endLine": 157,
                  "endColumn": 74,
                  "snippet": {
                    "text": "ResNet152 = lambda num_classes=1000: ResNet(152, num_classes=num_classes)"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "73757e2135a1f249e9fac4fcef9585458c8adab5daeaa234e947c8820ab0d86ed14aecbc9aa42f6ba9577b70a42ebba65eddb8d0963908c825f4788dabde04bf_4"
          },
          "properties": {}
        },
        {
          "ruleId": "24990133-d4e0-35e0-a8cd-ace2c393a060",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "`return` only makes sense inside a function"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "extra/models/resnet.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 158,
                  "startColumn": 44,
                  "endLine": 158,
                  "endColumn": 109,
                  "snippet": {
                    "text": "ResNeXt50_32X4D = lambda num_classes=1000: ResNet(50, num_classes=num_classes, groups=32, width_per_group=4)"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "73757e2135a1f249e9fac4fcef9585458c8adab5daeaa234e947c8820ab0d86ed14aecbc9aa42f6ba9577b70a42ebba65eddb8d0963908c825f4788dabde04bf_5"
          },
          "properties": {}
        },
        {
          "ruleId": "c1590fa3-e7a7-33e2-b8e9-a36edadf0efd",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "`return` should never appear inside a class __init__ function. This will cause a runtime error."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "extra/models/retinanet.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 61,
                  "startColumn": 42,
                  "endLine": 61,
                  "endColumn": 139,
                  "snippet": {
                    "text": "    self.anchor_gen = lambda input_size: generate_anchors(input_size, self.backbone.compute_grid_sizes(input_size), scales, aspect_ratios)"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "d2c24ad2febb67f238e5d40d2d05eee20ef79adffac5f07caa81ef875b42a5f1926eefdac3182f6ea52d9982a830b73162d2c8fa6a0205fa6d975e61994ce466_0"
          },
          "properties": {}
        },
        {
          "ruleId": "fbc0857a-4043-3557-8485-2f09b9d39b0e",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "`return` should never appear inside a class __init__ function. This will cause a runtime error."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "extra/models/retinanet.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 150,
                  "startColumn": 100,
                  "endLine": 150,
                  "endColumn": 108,
                  "snippet": {
                    "text": "    self.conv = flatten([(nn.Conv2d(in_channels, in_channels, kernel_size=3, padding=1), lambda x: x.relu()) for _ in range(4)])"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "c3d57945e69e4d98c7ccd3bb2fb097ee6ec7adc62e3708efbd55537d580da721802c87ebde34ab059849fa35686f71ff694009df590d97c0dee4b087fabec129_0"
          },
          "properties": {}
        },
        {
          "ruleId": "766e1df9-1b9b-3b55-ac80-30f7dbeed859",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "`return` should never appear inside a class __init__ function. This will cause a runtime error."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "extra/models/retinanet.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 158,
                  "startColumn": 100,
                  "endLine": 158,
                  "endColumn": 108,
                  "snippet": {
                    "text": "    self.conv = flatten([(nn.Conv2d(in_channels, in_channels, kernel_size=3, padding=1), lambda x: x.relu()) for _ in range(4)])"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "d2a8fcbf54c9bdea4806a8bcb8f93b5be9794e9695ac2253d1272d711ff92c88055dc936e97aaf1f4b66eac02e3c83ef47b63ad328a07a228aa07e9367091bd9_0"
          },
          "properties": {}
        },
        {
          "ruleId": "62a75619-4319-3de7-85c9-2e527b633425",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Functions reliant on pickle can result in arbitrary code execution.  Consider loading from `state_dict`, using fickling, or switching to a safer serialization method like ONNX"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "extra/models/rnnt.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 68,
                  "startColumn": 20,
                  "endLine": 68,
                  "endColumn": 53,
                  "snippet": {
                    "text": "      state_dict = torch.load(f, map_location=\"cpu\")[\"state_dict\"]"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "8d8df5b677149f305ad591be93d6b1cc49adbc9cc3b2a4774e412b1d58f51eb6699c157fc7d33e09e4a7eb65dc1423f267453db5a0f21fe4022c7596708c3e23_0"
          },
          "properties": {}
        },
        {
          "ruleId": "4bf95ad5-3e8f-3aef-ad51-793954b36f59",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "`return` should never appear inside a class __init__ function. This will cause a runtime error."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "extra/models/vit.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 14,
                  "startColumn": 37,
                  "endLine": 14,
                  "endColumn": 45,
                  "snippet": {
                    "text": "        prenorm=True, act=lambda x: x.gelu())"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "08d5ceaa05fef6f60acdf6f4ab34361f1fef236967b657580aac2082102744c2954e690539fefbf3553bdd9c5ceef76864b4c786ac5b7ea6b6ac9cc7e239a725_0"
          },
          "properties": {}
        },
        {
          "ruleId": "299c6a75-83a0-3a62-8897-25280402edef",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "function `lm` is defined inside a function but never used"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "extra/multitensor.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 21,
                  "startColumn": 3,
                  "endLine": 28,
                  "endColumn": 15,
                  "snippet": {
                    "text": "  def lm(x:Tensor, w:Tensor):\n    # these are movement ops on the local device\n    x = x.reshape(N, 1, N).expand(N, N, N)\n    w = w.T.reshape(1, N, N).expand(N, N, N)\n    m = x*w\n    assert m.lazydata.st.views[0].mask is not None\n    ret = m.sum(2)\n    return ret"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "e0b7feec7cae4c5a456a105c12c66afe3a4028aa2d3c5a6dd7c24ad4fda0bbbbde355aeceea09360747a23105157033869bc3b8296852bb837344b1e87f2ebd4_0"
          },
          "properties": {}
        },
        {
          "ruleId": "6ce5507f-fd03-31ba-8a28-694ca88ccb52",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Regex `r'NV01_ROOT.*?NV_SEMAPHORE_SURFACE = \\(0x000000da\\) # macro'` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "extra/nv_gpu_driver/nv_ioctl.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 67,
                  "startColumn": 10,
                  "endLine": 67,
                  "endColumn": 99,
                  "snippet": {
                    "text": "  clss = re.search(r'NV01_ROOT.*?NV_SEMAPHORE_SURFACE = \\(0x000000da\\) # macro', hdrpy, re.DOTALL).group()"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "b52bddac6220cb28d96f3fd09ceff1e8cba14289f8716a168ee7b8506bc5e91b7b3cce68015f9ec29cae571941253c27837680000c608a213f79ff8e59d3f579_0"
          },
          "properties": {}
        },
        {
          "ruleId": "0c3d0c9d-431f-3b4c-90df-36db8bef64ca",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Regex `pattern` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "extra/nv_gpu_driver/nv_ioctl.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 69,
                  "startColumn": 13,
                  "endLine": 69,
                  "endColumn": 52,
                  "snippet": {
                    "text": "  matches = re.findall(pattern, clss, re.MULTILINE)"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "702025a44c9f9d8c25263678a78159338c8ec272f56d8fe4212cfa7f5e65c880879ed9a69b0da06a5590091ee3572971e71aec0f58912be0a093051168bd49c5_0"
          },
          "properties": {}
        },
        {
          "ruleId": "a9548393-18d0-3f93-8fd6-f013fa661366",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Function 'ioctl' is missing a rate-limiting decorator.\nHigh volume traffic to this function could starve application\nresources. Consider adding rate limiting from a library such\nas 'django-ratelimit'.\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "extra/nv_gpu_driver/nv_ioctl.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 80,
                  "startColumn": 1,
                  "endLine": 149,
                  "endColumn": 13,
                  "snippet": {
                    "text": "@ctypes.CFUNCTYPE(ctypes.c_int, ctypes.c_int, ctypes.c_ulong, ctypes.c_void_p)\ndef ioctl(fd, request, argp):\n  global global_ioctl_id, gpus_user_modes, gpus_mmio\n  global_ioctl_id += 1\n  st = time.perf_counter()\n  ret = libc.syscall(IOCTL_SYSCALL, ctypes.c_int(fd), ctypes.c_ulong(request), ctypes.c_void_p(argp))\n  et = time.perf_counter()-st\n  fn = os.readlink(f\"/proc/self/fd/{fd}\")\n  #print(f\"ioctl {request:8x} {fn:20s}\")\n  idir, size, itype, nr = (request>>30), (request>>16)&0x3FFF, (request>>8)&0xFF, request&0xFF\n  print(f\"#{global_ioctl_id}: \", end=\"\")\n  if itype == ord(nv_gpu.NV_IOCTL_MAGIC):\n    if nr == nv_gpu.NV_ESC_RM_CONTROL:\n      s = get_struct(argp, nv_gpu.NVOS54_PARAMETERS)\n      if s.cmd in nvcmds:\n        name, struc = nvcmds[s.cmd]\n        print(f\"NV_ESC_RM_CONTROL    cmd={name:30s} hClient={s.hClient}, hObject={s.hObject}, flags={s.flags}, params={s.params}, paramsSize={s.paramsSize}, status={s.status}\")\n        if struc is not None: dump_struct(get_struct(s.params, struc))\n        elif hasattr(nv_gpu, name+\"_PARAMS\"): dump_struct(get_struct(argp, getattr(nv_gpu, name+\"_PARAMS\")))\n        elif name == \"NVA06C_CTRL_CMD_GPFIFO_SCHEDULE\": dump_struct(get_struct(argp, nv_gpu.NVA06C_CTRL_GPFIFO_SCHEDULE_PARAMS))\n      else:\n        print(\"unhandled cmd\", hex(s.cmd))\n      # format_struct(s)\n      # print(f\"{(st-start)*1000:7.2f} ms +{et*1000.:7.2f} ms : {ret:2d} = {name:40s}\", ' '.join(format_struct(s)))\n    elif nr == nv_gpu.NV_ESC_RM_ALLOC:\n      s = get_struct(argp, nv_gpu.NVOS21_PARAMETERS)\n      print(f\"NV_ESC_RM_ALLOC    hClass={nvclasses.get(s.hClass, 'unk'):30s}, hRoot={s.hRoot}, hObjectParent={s.hObjectParent}, pAllocParms={s.pAllocParms}, hObjectNew={s.hObjectNew}\")\n      if s.pAllocParms is not None:\n        if s.hClass == nv_gpu.NV01_DEVICE_0: dump_struct(get_struct(s.pAllocParms, nv_gpu.NV0080_ALLOC_PARAMETERS))\n        if s.hClass == nv_gpu.FERMI_VASPACE_A: dump_struct(get_struct(s.pAllocParms, nv_gpu.NV_VASPACE_ALLOCATION_PARAMETERS))\n        if s.hClass == nv_gpu.NV50_MEMORY_VIRTUAL: dump_struct(get_struct(s.pAllocParms, nv_gpu.NV_MEMORY_ALLOCATION_PARAMS))\n        if s.hClass == nv_gpu.NV1_MEMORY_USER: dump_struct(get_struct(s.pAllocParms, nv_gpu.NV_MEMORY_ALLOCATION_PARAMS))\n        if s.hClass == nv_gpu.NV1_MEMORY_SYSTEM: dump_struct(get_struct(s.pAllocParms, nv_gpu.NV_MEMORY_ALLOCATION_PARAMS))\n        if s.hClass == nv_gpu.AMPERE_CHANNEL_GPFIFO_A:\n          sx = get_struct(s.pAllocParms, nv_gpu.NV_CHANNELGPFIFO_ALLOCATION_PARAMETERS)\n          dump_struct(sx)\n          gpus_fifo.append((sx.gpFifoOffset, sx.gpFifoEntries))\n        if s.hClass == nv_gpu.KEPLER_CHANNEL_GROUP_A: dump_struct(get_struct(s.pAllocParms, nv_gpu.NV_CHANNEL_GROUP_ALLOCATION_PARAMETERS))\n      if s.hClass == nv_gpu.TURING_USERMODE_A: gpus_user_modes.append(s.hObjectNew)\n    elif nr == nv_gpu.NV_ESC_RM_MAP_MEMORY:\n      # nv_ioctl_nvos33_parameters_with_fd\n      s = get_struct(argp, nv_gpu.NVOS33_PARAMETERS)\n      print(f\"NV_ESC_RM_MAP_MEMORY   hClient={s.hClient}, hDevice={s.hDevice}, hMemory={s.hMemory}, length={s.length} flags={s.flags} pLinearAddress={s.pLinearAddress}\")\n    elif nr == nv_gpu.NV_ESC_RM_UPDATE_DEVICE_MAPPING_INFO:\n      s = get_struct(argp, nv_gpu.NVOS56_PARAMETERS)\n      print(f\"NV_ESC_RM_UPDATE_DEVICE_MAPPING_INFO   hClient={s.hClient}, hDevice={s.hDevice}, hMemory={s.hMemory}, pOldCpuAddress={s.pOldCpuAddress} pNewCpuAddress={s.pNewCpuAddress} status={s.status}\")\n    elif nr == nv_gpu.NV_ESC_RM_ALLOC_MEMORY:\n      s = get_struct(argp, nv_gpu.nv_ioctl_nvos02_parameters_with_fd)\n      print(f\"NV_ESC_RM_ALLOC_MEMORY  fd={s.fd}, hRoot={s.params.hRoot}, hObjectParent={s.params.hObjectParent}, hObjectNew={s.params.hObjectNew}, hClass={s.params.hClass}, flags={s.params.flags}, pMemory={s.params.pMemory}, limit={s.params.limit}, status={s.params.status}\")\n    elif nr == nv_gpu.NV_ESC_ALLOC_OS_EVENT:\n      s = get_struct(argp, nv_gpu.nv_ioctl_nvos02_parameters_with_fd)\n    elif nr == nv_gpu.NV_ESC_REGISTER_FD:\n      s = get_struct(argp, nv_gpu.nv_ioctl_register_fd_t)\n      print(f\"NV_ESC_REGISTER_FD  fd={s.ctl_fd}\")\n    elif nr in nvescs:\n      print(nvescs[nr])\n    else:\n      print(\"unhandled NR\", nr)\n  elif fn.endswith(\"nvidia-uvm\"):\n    print(f\"{nvuvms.get(request, f'UVM UNKNOWN {request=}')}\")\n    if nvuvms.get(request) is not None: dump_struct(get_struct(argp, getattr(nv_gpu, nvuvms.get(request)+\"_PARAMS\")))\n    if nvuvms.get(request) == \"UVM_MAP_EXTERNAL_ALLOCATION\":\n      st = get_struct(argp, getattr(nv_gpu, nvuvms.get(request)+\"_PARAMS\"))\n      for i in range(st.gpuAttributesCount):\n        print(\"perGpuAttributes[{i}] = \", end=\"\")\n        dump_struct(st.perGpuAttributes[i])\n    print(\"ok\")\n\n  if getenv(\"IOCTL\") >= 2: print(\"ioctl\", f\"{idir=} {size=} {itype=} {nr=} {fd=} {ret=}\", fn)\n  return ret"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "c964fc9d3507d597d835930a0d86b70b8fa109ff5cdbefb18bf1b871caefedfcbdefd0ece2818bc80c88005bdf4b96d5167f560b312fd2c9d1522284f8d68e17_0"
          },
          "properties": {}
        },
        {
          "ruleId": "7e057bd5-d864-321b-968a-6772c2abddee",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "`return` only makes sense inside a function"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "extra/onnx.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 16,
                  "startColumn": 40,
                  "endLine": 16,
                  "endColumn": 65,
                  "snippet": {
                    "text": "  tensor_dtype_to_np_dtype = lambda x: TENSOR_TYPE_TO_NP_TYPE[x]"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "4fafdd181902fbe9fb5b872ffddd8eabce3edbd75799cdbad0826a589be02cceeebc7e80f48d318f906ece4221c40eaef5d5308617791e4f391a550a38fbc713_0"
          },
          "properties": {}
        },
        {
          "ruleId": "651f2c7f-40a2-3e43-bb52-650e7ec2debe",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Detected the use of eval(). eval() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "extra/optimization/extract_policynet.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 41,
                  "startColumn": 24,
                  "endLine": 41,
                  "endColumn": 34,
                  "snippet": {
                    "text": "      lin = Linearizer(eval(f[0]))"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "49c55a2fcc84504a80d647e6d32c782cc3ba3e21eeee06b7ed75c5d5c403908c16104207a14cb037bbbb4d9169ed6b09fdf200e1fd0bdd4ffd22752be8572457_0"
          },
          "properties": {}
        },
        {
          "ruleId": "8c61a950-0ee2-38e9-b1a7-b2f3ab4af38d",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "extra/optimization/extract_policynet.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 42,
                  "startColumn": 14,
                  "endLine": 42,
                  "endColumn": 33,
                  "snippet": {
                    "text": "      opts = pickle.loads(f[-1])"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "2e6b2fff14ffaec78162602f443965978b5c7ca5ed3c881962dbf5b1f1827afa2506fc756b143ad17d9f1901c899c7b562f6cb7ed3d351dcdfcc4044502aa0a4_0"
          },
          "properties": {}
        },
        {
          "ruleId": "d2bd9895-68dd-3b3e-bcaf-528409557ad6",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "extra/optimization/extract_sa_pairs.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 31,
                  "startColumn": 59,
                  "endLine": 31,
                  "endColumn": 78,
                  "snippet": {
                    "text": "  for f in tqdm(cur.fetchall()): grouped[f[0]][f[1:-1]] = pickle.loads(f[-1])"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "e0e1eae376beefc61148d05c1ed99970fff7ffc6f7675ae6e2cee8dace792ca631daf3f12c29ff2445c8e673ba60ffb20cdcf4a849806bf4e77ec08636c51af3_0"
          },
          "properties": {}
        },
        {
          "ruleId": "f14d6494-91a9-3ac5-bb35-287e7e150eb5",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Detected the use of eval(). eval() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "extra/optimization/extract_sa_pairs.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 39,
                  "startColumn": 14,
                  "endLine": 39,
                  "endColumn": 26,
                  "snippet": {
                    "text": "      opts = eval(sks[0])"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "23ae860160ccf5f6ba86e2f7076f81c794d366f3d5347cdb3de8f62539fb95d052711b0e0f870f06e35c2166e3be67686ec479c251a68f74203eeabf10dd8836_0"
          },
          "properties": {}
        },
        {
          "ruleId": "079ee192-4154-32b5-920b-391b6d3a5370",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Detected the use of eval(). eval() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "extra/optimization/extract_sa_pairs.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 51,
                  "startColumn": 24,
                  "endLine": 51,
                  "endColumn": 33,
                  "snippet": {
                    "text": "      lin = Linearizer(eval(ast))"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "23ae860160ccf5f6ba86e2f7076f81c794d366f3d5347cdb3de8f62539fb95d052711b0e0f870f06e35c2166e3be67686ec479c251a68f74203eeabf10dd8836_1"
          },
          "properties": {}
        },
        {
          "ruleId": "b2559bee-f88a-3a65-b8e2-d892124661c5",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Detected the use of eval(). eval() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "extra/optimization/helpers.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 13,
                  "startColumn": 85,
                  "endLine": 13,
                  "endColumn": 98,
                  "snippet": {
                    "text": "def ast_str_to_ast(ast_str:str) -> Tuple[LazyOp,...]: return val if isinstance(val:=eval(ast_str), tuple) else (val,)"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "854fd25a81737a3494d055bd33e2409cdb428095852fb68a65d123b11254a23080291804801943c96fa2903a1f2fbf78aa208f15ecdefb4cf2ca111d664da18a_0"
          },
          "properties": {}
        },
        {
          "ruleId": "0c4b4f43-0451-34ba-862f-dc7ec2ed5f20",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Detected the use of eval(). eval() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "extra/optimization/helpers.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 16,
                  "startColumn": 26,
                  "endLine": 16,
                  "endColumn": 40,
                  "snippet": {
                    "text": "  (ast, applied_opts,) = eval(kern_str)"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "854fd25a81737a3494d055bd33e2409cdb428095852fb68a65d123b11254a23080291804801943c96fa2903a1f2fbf78aa208f15ecdefb4cf2ca111d664da18a_1"
          },
          "properties": {}
        },
        {
          "ruleId": "f57aeb02-4a76-358f-a3e8-252d6776f7e1",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Detected hardcoded temp directory. Consider using 'tempfile.TemporaryFile' instead.\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "extra/optimization/pretrain_valuenet.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 41,
                  "startColumn": 10,
                  "endLine": 41,
                  "endColumn": 28,
                  "snippet": {
                    "text": "  dset = open(\"/tmp/logtm\").read().strip().split(\"\\n\")"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "77f2c61de4f41fe3b17bac8dacd3b80acc3d437b2b52a2cca060fdeac6a019396d10dad6b0f50eabc924e806ff329d6ac8d9b863428c626184e6be48332c9d9c_0"
          },
          "properties": {}
        },
        {
          "ruleId": "bb232b76-ab76-3ce0-a184-4bee3dd08d31",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "key `3` is uselessly assigned twice"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "extra/qcom_gpu_driver/msm_kgsl.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 131,
                  "startColumn": 34,
                  "endLine": 138,
                  "endColumn": 2,
                  "snippet": {
                    "text": "kgsl_user_mem_type__enumvalues = {\n    0: 'KGSL_USER_MEM_TYPE_PMEM',\n    1: 'KGSL_USER_MEM_TYPE_ASHMEM',\n    2: 'KGSL_USER_MEM_TYPE_ADDR',\n    3: 'KGSL_USER_MEM_TYPE_ION',\n    3: 'KGSL_USER_MEM_TYPE_DMABUF',\n    7: 'KGSL_USER_MEM_TYPE_MAX',\n}"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "b392d1fea4b338da2f3b1be9e32208c45a34dfe3fac7ce0cf267513aa81bab20b704967afc449f9deb4c79cd4da2a118511f23e41f6c420cc5c7504f20821a8f_0"
          },
          "properties": {}
        },
        {
          "ruleId": "a329cc61-8eef-3b36-95eb-81ef58718567",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Detected the use of eval(). eval() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "extra/optimization/pretrain_valuenet.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 47,
                  "startColumn": 22,
                  "endLine": 47,
                  "endColumn": 29,
                  "snippet": {
                    "text": "    ast, opts, tms = eval(x)"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "d21a4513f83c35a26712466253fca2c240a6b6fc4d271ca99987058a6e1068cd5d2e81145280360de42f16c567e86e184f4d89efad8fa9faac802290b6219b65_0"
          },
          "properties": {}
        },
        {
          "ruleId": "106293ce-23d6-354c-9e90-de43bac15c20",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "key `0` is uselessly assigned twice"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "extra/qcom_gpu_driver/msm_kgsl.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 497,
                  "startColumn": 35,
                  "endLine": 504,
                  "endColumn": 2,
                  "snippet": {
                    "text": "kgsl_cmdwindow_type__enumvalues = {\n    0: 'KGSL_CMDWINDOW_MIN',\n    0: 'KGSL_CMDWINDOW_2D',\n    1: 'KGSL_CMDWINDOW_3D',\n    2: 'KGSL_CMDWINDOW_MMU',\n    255: 'KGSL_CMDWINDOW_ARBITER',\n    255: 'KGSL_CMDWINDOW_MAX',\n}"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "f539a95fc07e6fdeed6b975cbb0ba7c4f276ac8983fe0bb6c6efe4f2a202d74e37e0c2efc230c56d62711c4245aeafe858e5d3cc63d5bde2ab3c51bf91ef2143_0"
          },
          "properties": {}
        },
        {
          "ruleId": "5f281c50-3ce9-34f5-a1c0-805bfad69674",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Found use of the native Python XML libraries, which is vulnerable to XML external entity (XXE)\nattacks. The Python documentation recommends the 'defusedxml' library instead. Use 'defusedxml'.\nSee https://github.com/tiran/defusedxml for more information.\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "extra/qcom_gpu_driver/opencl_ioctl.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 8,
                  "startColumn": 1,
                  "endLine": 8,
                  "endColumn": 35,
                  "snippet": {
                    "text": "import xml.etree.ElementTree as ET"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "aa279a63fbc5ce8dc0f02b17bdbd659bab48a9180b734c738dd8923c43ae3f68bebb4097cb7f3b37a4035f887e958ce952b5feb4f8bc814edffcf90c379c7711_0"
          },
          "properties": {}
        },
        {
          "ruleId": "4eb01b69-ccfa-3440-81e3-953ee0fff8b8",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "The native Python `xml` library is vulnerable to XML External Entity (XXE) attacks.  These attacks can leak confidential data and \"XML bombs\" can cause denial of service. Do not use this library to parse untrusted input. Instead  the Python documentation recommends using `defusedxml`."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "extra/qcom_gpu_driver/opencl_ioctl.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 9,
                  "startColumn": 7,
                  "endLine": 9,
                  "endColumn": 65,
                  "snippet": {
                    "text": "xml = ET.parse(pathlib.Path(__file__).parent / \"adreno_pm4.xml\")"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "57058e52985c17c8e364fbfbe587a74c6fed554e810b26ed672e412f0a7a364acad28d22525b499e939f9676643ea3728fcbabfc5001434f34ac707ccb006187_0"
          },
          "properties": {}
        },
        {
          "ruleId": "cd619133-187d-36a5-9012-e081c9ad8a2a",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Insecure XML parsing functionality, prefer 'defusedxml'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "extra/qcom_gpu_driver/opencl_ioctl.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 10,
                  "startColumn": 14,
                  "endLine": 10,
                  "endColumn": 25,
                  "snippet": {
                    "text": "for child in xml.getroot():"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "05a0975f29aa0bc4d214b7d26ea107f74931b77419cea6f89d8f037d44604172c647724a816e12bacdec3791258e6f74bc12aa0db03c0d1198d3cc0b22c499d6_0"
          },
          "properties": {}
        },
        {
          "ruleId": "c352126c-f303-3027-befa-3e3bce96f31e",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Regex `pattern` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "extra/qcom_gpu_driver/opencl_ioctl.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 22,
                  "startColumn": 13,
                  "endLine": 22,
                  "endColumn": 51,
                  "snippet": {
                    "text": "  matches = re.findall(pattern, hdr, re.MULTILINE)"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "430c27c7d6f6d6265f31386e38b7855be50e09f9f8b4bbdefb1587e0caccac904aa3acdb36d2e8a0345ac61428a2b8a17a64d3e0790dc82b9c66e10cb89b7d2b_0"
          },
          "properties": {}
        },
        {
          "ruleId": "abbbf279-dab9-3cc0-a214-62021c68df47",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "`return` only makes sense inside a function"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "sz.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 66,
                  "startColumn": 62,
                  "endLine": 66,
                  "endColumn": 67,
                  "snippet": {
                    "text": "      print(tabulate([headers] + sorted(table, key=lambda x: -x[1]), headers=\"firstrow\", intfmt=(..., \"d\", \"+d\"),"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "26ed11e602dd1398a1091780cddbfdff6d138c24ca223a28ad9bf8043e4cf34956af023b7c2ede90634492ad4d5ce593508f2089233ec7c089c7906f396a9fc2_0"
          },
          "properties": {}
        },
        {
          "ruleId": "d9b42fba-e632-3954-ac0a-73c892f5caa8",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "`return` only makes sense inside a function"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "sz.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 71,
                  "startColumn": 62,
                  "endLine": 71,
                  "endColumn": 67,
                  "snippet": {
                    "text": "      print(tabulate([headers] + sorted(table, key=lambda x: -x[1]), headers=\"firstrow\", floatfmt=\".1f\")+\"\\n\")"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "26ed11e602dd1398a1091780cddbfdff6d138c24ca223a28ad9bf8043e4cf34956af023b7c2ede90634492ad4d5ce593508f2089233ec7c089c7906f396a9fc2_1"
          },
          "properties": {}
        },
        {
          "ruleId": "8b2e3d41-58e0-362c-b280-45ad6a947fb6",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "`return` only makes sense inside a function"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "sz.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 72,
                  "startColumn": 124,
                  "endLine": 72,
                  "endColumn": 128,
                  "snippet": {
                    "text": "      for dir_name, group in itertools.groupby(sorted([(x[0].rsplit(\"/\", 1)[0], x[1], x[2]) for x in table]), key=lambda x:x[0]):"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "26ed11e602dd1398a1091780cddbfdff6d138c24ca223a28ad9bf8043e4cf34956af023b7c2ede90634492ad4d5ce593508f2089233ec7c089c7906f396a9fc2_2"
          },
          "properties": {}
        },
        {
          "ruleId": "acc7665b-e2d9-33b7-8fac-159193fe5484",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Function 'ioctl' is missing a rate-limiting decorator.\nHigh volume traffic to this function could starve application\nresources. Consider adding rate limiting from a library such\nas 'django-ratelimit'.\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "extra/qcom_gpu_driver/opencl_ioctl.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 90,
                  "startColumn": 1,
                  "endLine": 116,
                  "endColumn": 13,
                  "snippet": {
                    "text": "@ctypes.CFUNCTYPE(ctypes.c_int, ctypes.c_int, ctypes.c_ulong, ctypes.c_void_p)\ndef ioctl(fd, request, argp):\n  ret = libc.syscall(0x1d, ctypes.c_int(fd), ctypes.c_ulong(request), ctypes.c_void_p(argp))\n\n  idir, size, itype, nr = (request>>30), (request>>16)&0x3FFF, (request>>8)&0xFF, request&0xFF\n  if nr in nrs and itype == 9:\n    name, stype = nrs[nr]\n    s = get_struct(argp, stype)\n    print(f\"{ret:2d} = {name:40s}\", ' '.join(format_struct(s)))\n    if name == \"IOCTL_KGSL_GPUOBJ_INFO\":\n      mmaped[s.gpuaddr] = mmap.mmap(fd, s.size, offset=s.id*0x1000)\n    if name == \"IOCTL_KGSL_GPU_COMMAND\":\n      for i in range(s.numcmds):\n        cmd = get_struct(s.cmdlist+s.cmdsize*i, msm_kgsl.struct_kgsl_command_object)\n        print(f\"cmd {i}:\", format_struct(cmd))\n        #hexdump(get_mem(cmd.gpuaddr, cmd.size))\n        parse_cmd_buf(get_mem(cmd.gpuaddr, cmd.size))\n      for i in range(s.numobjs):\n        obj = get_struct(s.objlist+s.objsize*i, msm_kgsl.struct_kgsl_command_object)\n        print(f\"obj {i}:\", format_struct(obj))\n        print(format_struct(msm_kgsl.struct_kgsl_cmdbatch_profiling_buffer.from_buffer_copy(get_mem(obj.gpuaddr, obj.size))))\n        #hexdump(get_mem(obj.gpuaddr, obj.size))\n  else:\n    #print(f\"ioctl({fd=}, (dir:{idir}, size:0x{size:3X}, type:{itype:d}, nr:0x{nr:2X}), {argp=:X}) = {ret=}\")\n    pass\n\n  return ret"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "b2b4372f2cd3476ab97a32d245238ca5da16d35c377e4a39f57bf698fe7f103c1521273a90aeef60c41057021d9fb239739a01c3c14a3bd3fea3aa3c43367dea_0"
          },
          "properties": {}
        },
        {
          "ruleId": "8560b299-6e0d-326f-b94f-7ea782add094",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "`return` should never appear inside a class __init__ function. This will cause a runtime error."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "extra/thneed.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 25,
                  "startColumn": 33,
                  "endLine": 25,
                  "endColumn": 66,
                  "snippet": {
                    "text": "    nodes = defaultdict(lambda: {'in_edges': [], 'out_edges': []})"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "b941431ed5c8c92a789ab70fec0c61d02d124f2e323d5ad494018afd2a3a095fbca1a2bcea62627f4c851c0ba11e0c64eda1484c159a11d0db2b5831285f1ad0_0"
          },
          "properties": {}
        },
        {
          "ruleId": "648e60b2-1cf8-35d6-8813-fb88c0f760e6",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "`return` only makes sense inside a function"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "openpilot/compile2.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 105,
                  "startColumn": 60,
                  "endLine": 105,
                  "endColumn": 86,
                  "snippet": {
                    "text": "  schedule, schedule_input = partition(schedule, lambda x: x.ast[0].op not in LoadOps)"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "af76d0d63cb06e3c527c74842a8ff9285dec5245b9023830b60efda48e504d065d8cbd76a08b23b1db35c031b386b30544b6410f313b59437042833d06c1d821_0"
          },
          "properties": {}
        },
        {
          "ruleId": "75c72ae5-c450-3f4d-8a40-130b9bdada8a",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "`return` should never appear inside a class __init__ function. This will cause a runtime error."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "tinygrad/codegen/kernel.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 84,
                  "startColumn": 7,
                  "endLine": 84,
                  "endColumn": 40,
                  "snippet": {
                    "text": "      return cached_ordered_lazyops[op]"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "e336394d67051b5c59b7f5153fe90d443478ce05ddf31d3d601c6631bab48c145c60087a1b29d51311e1f1597d2f3ffa284dcaf8169685809a8811351876c3fb_0"
          },
          "properties": {}
        },
        {
          "ruleId": "c9b5ae7f-412e-3507-a998-02a47b18b5b9",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "`return` only makes sense inside a function"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "tinygrad/codegen/linearizer.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 64,
                  "startColumn": 49,
                  "endLine": 64,
                  "endColumn": 122,
                  "snippet": {
                    "text": "                MulNode: lambda self, ops, ctx: ctx.uop_alu_idx(self.a.render(ops, ctx), self.b, ops, ctx, BinaryOps.MUL),"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "f094afe62702b2cb7f774154f30267a9c21081e6b189ae0b55f3ac1349e249e80e76673f61eebe50e43cb93c4509cbf8c9a88033f8c31ef304298acd75e0bbd1_2"
          },
          "properties": {}
        },
        {
          "ruleId": "49049ead-2488-32ef-bc77-563b71c80483",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "`return` only makes sense inside a function"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "tinygrad/codegen/linearizer.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 65,
                  "startColumn": 49,
                  "endLine": 65,
                  "endColumn": 122,
                  "snippet": {
                    "text": "                DivNode: lambda self, ops, ctx: ctx.uop_alu_idx(self.a.render(ops, ctx), self.b, ops, ctx, BinaryOps.DIV),"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "f094afe62702b2cb7f774154f30267a9c21081e6b189ae0b55f3ac1349e249e80e76673f61eebe50e43cb93c4509cbf8c9a88033f8c31ef304298acd75e0bbd1_3"
          },
          "properties": {}
        },
        {
          "ruleId": "13c1938f-311f-364e-9f91-03bc1f468561",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "`return` only makes sense inside a function"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "tinygrad/codegen/linearizer.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 66,
                  "startColumn": 49,
                  "endLine": 66,
                  "endColumn": 122,
                  "snippet": {
                    "text": "                ModNode: lambda self, ops, ctx: ctx.uop_alu_idx(self.a.render(ops, ctx), self.b, ops, ctx, BinaryOps.MOD),"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "f094afe62702b2cb7f774154f30267a9c21081e6b189ae0b55f3ac1349e249e80e76673f61eebe50e43cb93c4509cbf8c9a88033f8c31ef304298acd75e0bbd1_4"
          },
          "properties": {}
        },
        {
          "ruleId": "2ada83bb-3949-36dd-b669-058a36dc3e76",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "`return` only makes sense inside a function"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "tinygrad/codegen/linearizer.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 67,
                  "startColumn": 48,
                  "endLine": 67,
                  "endColumn": 142,
                  "snippet": {
                    "text": "                LtNode: lambda self, ops, ctx: ctx.uop_alu_idx(self.a.render(ops, ctx), self.b, ops, ctx, BinaryOps.CMPLT, dtype=dtypes.bool),"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "f094afe62702b2cb7f774154f30267a9c21081e6b189ae0b55f3ac1349e249e80e76673f61eebe50e43cb93c4509cbf8c9a88033f8c31ef304298acd75e0bbd1_5"
          },
          "properties": {}
        },
        {
          "ruleId": "2476bf44-27ac-3a85-af4e-5a4440bcbdd9",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "`return` only makes sense inside a function"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "tinygrad/codegen/uops.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 95,
                  "startColumn": 107,
                  "endLine": 95,
                  "endColumn": 135,
                  "snippet": {
                    "text": "  ({\"__name__\": \"root\", \"uop\": UOps.GEP, \"vin\": ({\"__name__\": \"c\", \"uop\": UOps.CONST},)}, lambda root, c: UOp.const(root.dtype, c.arg)),"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "81e52f602e4a31bfe669ab89931e5aa03b7d90502cbca17269881954636479f33fa55a370e4a8806515fc834f523294740873934344f9215aeabd01277390865_0"
          },
          "properties": {}
        },
        {
          "ruleId": "025464ab-b802-361c-940d-f0f4836a54c1",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "`return` only makes sense inside a function"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "tinygrad/codegen/uops.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 96,
                  "startColumn": 105,
                  "endLine": 96,
                  "endColumn": 133,
                  "snippet": {
                    "text": "  ({\"__name__\": \"root\", \"uop\": UOps.CAST, \"vin\": {\"__name__\": \"c\", \"uop\": UOps.CONST}}, lambda root, c: UOp.const(root.dtype, c.arg)),"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "81e52f602e4a31bfe669ab89931e5aa03b7d90502cbca17269881954636479f33fa55a370e4a8806515fc834f523294740873934344f9215aeabd01277390865_1"
          },
          "properties": {}
        },
        {
          "ruleId": "c2c9c5ab-53ab-30eb-b146-dd1570526f8f",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "`return` only makes sense inside a function"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "tinygrad/codegen/uops.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 98,
                  "startColumn": 65,
                  "endLine": 98,
                  "endColumn": 66,
                  "snippet": {
                    "text": "  ({\"uop\": UOps.PHI, \"vin\": ({}, {\"__name__\": \"x\"})}, lambda x: x),"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "81e52f602e4a31bfe669ab89931e5aa03b7d90502cbca17269881954636479f33fa55a370e4a8806515fc834f523294740873934344f9215aeabd01277390865_2"
          },
          "properties": {}
        },
        {
          "ruleId": "12ce4cc2-e740-3b90-90d5-e60ca7299ec8",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "`return` only makes sense inside a function"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "tinygrad/codegen/uops.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 101,
                  "startColumn": 19,
                  "endLine": 101,
                  "endColumn": 72,
                  "snippet": {
                    "text": "    lambda x, my: UOp(UOps.ALU, x.dtype, (x, my.vin[0]), BinaryOps.SUB)),"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "81e52f602e4a31bfe669ab89931e5aa03b7d90502cbca17269881954636479f33fa55a370e4a8806515fc834f523294740873934344f9215aeabd01277390865_3"
          },
          "properties": {}
        },
        {
          "ruleId": "f7a42fdd-9cd4-3b8a-be1a-c7a37bd3f79c",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "`return` only makes sense inside a function"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "tinygrad/codegen/uops.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 103,
                  "startColumn": 144,
                  "endLine": 103,
                  "endColumn": 145,
                  "snippet": {
                    "text": "  ({\"uop\": UOps.ALU, \"arg\": BinaryOps.CMPLT, \"vin\": ({}, {\"__name__\": \"x\", \"uop\": UOps.CONST, \"dtype\": dtypes.bool, \"arg\": False})}, lambda x: x),"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "81e52f602e4a31bfe669ab89931e5aa03b7d90502cbca17269881954636479f33fa55a370e4a8806515fc834f523294740873934344f9215aeabd01277390865_4"
          },
          "properties": {}
        },
        {
          "ruleId": "36ad69ed-6bbb-32a7-9360-b4143c30f672",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "`return` only makes sense inside a function"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "tinygrad/codegen/uops.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 105,
                  "startColumn": 15,
                  "endLine": 105,
                  "endColumn": 44,
                  "snippet": {
                    "text": "    lambda x: UOp.const(dtypes.bool, False)),"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "81e52f602e4a31bfe669ab89931e5aa03b7d90502cbca17269881954636479f33fa55a370e4a8806515fc834f523294740873934344f9215aeabd01277390865_5"
          },
          "properties": {}
        },
        {
          "ruleId": "7c222147-02f7-3be9-a07d-53d5106b100a",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "`return` only makes sense inside a function"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "tinygrad/codegen/uops.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 107,
                  "startColumn": 115,
                  "endLine": 107,
                  "endColumn": 118,
                  "snippet": {
                    "text": "  ({\"uop\": UOps.ALU, \"arg\": TernaryOps.WHERE, \"vin\": ({}, {\"__name__\": \"val\"}, {\"__name__\": \"val\"})}, lambda val: val),"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "81e52f602e4a31bfe669ab89931e5aa03b7d90502cbca17269881954636479f33fa55a370e4a8806515fc834f523294740873934344f9215aeabd01277390865_6"
          },
          "properties": {}
        },
        {
          "ruleId": "703d96e1-2145-3e01-b278-e0716b2dcce8",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "`return` only makes sense inside a function"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "tinygrad/codegen/uops.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 112,
                  "startColumn": 18,
                  "endLine": 112,
                  "endColumn": 98,
                  "snippet": {
                    "text": "    lambda root: UOp.const(root.dtype, exec_alu(root.arg, root.dtype, [x.arg for x in root.vin]))),"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "81e52f602e4a31bfe669ab89931e5aa03b7d90502cbca17269881954636479f33fa55a370e4a8806515fc834f523294740873934344f9215aeabd01277390865_7"
          },
          "properties": {}
        },
        {
          "ruleId": "c04f06b5-233a-3134-81ca-dd071d127aea",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "`return` only makes sense inside a function"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "tinygrad/codegen/uops.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 114,
                  "startColumn": 114,
                  "endLine": 114,
                  "endColumn": 115,
                  "snippet": {
                    "text": "  ({\"uop\": UOps.ALU, \"arg\": BinaryOps.ADD, \"vin\": [{\"__name__\": \"x\"}, {\"uop\": UOps.CONST, \"arg\": 0}]}, lambda x: x),   # x+0 -> x or 0+x -> x"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "81e52f602e4a31bfe669ab89931e5aa03b7d90502cbca17269881954636479f33fa55a370e4a8806515fc834f523294740873934344f9215aeabd01277390865_8"
          },
          "properties": {}
        },
        {
          "ruleId": "cdf0cd1c-b1e3-37c0-9732-f17304e708c3",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "`return` only makes sense inside a function"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "tinygrad/codegen/uops.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 115,
                  "startColumn": 114,
                  "endLine": 115,
                  "endColumn": 115,
                  "snippet": {
                    "text": "  ({\"uop\": UOps.ALU, \"arg\": BinaryOps.MUL, \"vin\": [{\"__name__\": \"x\"}, {\"uop\": UOps.CONST, \"arg\": 1}]}, lambda x: x),   # x*1 -> x or 1*x -> x"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "81e52f602e4a31bfe669ab89931e5aa03b7d90502cbca17269881954636479f33fa55a370e4a8806515fc834f523294740873934344f9215aeabd01277390865_9"
          },
          "properties": {}
        },
        {
          "ruleId": "883b315e-6e77-3c80-87a3-b6f7cc28f574",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "`return` only makes sense inside a function"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "tinygrad/codegen/uops.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 116,
                  "startColumn": 114,
                  "endLine": 116,
                  "endColumn": 115,
                  "snippet": {
                    "text": "  ({\"uop\": UOps.ALU, \"arg\": BinaryOps.SUB, \"vin\": ({\"__name__\": \"x\"}, {\"uop\": UOps.CONST, \"arg\": 0})}, lambda x: x),   # x-0 -> x"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "81e52f602e4a31bfe669ab89931e5aa03b7d90502cbca17269881954636479f33fa55a370e4a8806515fc834f523294740873934344f9215aeabd01277390865_10"
          },
          "properties": {}
        },
        {
          "ruleId": "38662a19-29c8-3aa8-831e-849af81a9f0e",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "`return` only makes sense inside a function"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "tinygrad/codegen/uops.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 117,
                  "startColumn": 114,
                  "endLine": 117,
                  "endColumn": 115,
                  "snippet": {
                    "text": "  ({\"uop\": UOps.ALU, \"arg\": BinaryOps.DIV, \"vin\": ({\"__name__\": \"x\"}, {\"uop\": UOps.CONST, \"arg\": 1})}, lambda x: x),   # x/1 -> x"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "81e52f602e4a31bfe669ab89931e5aa03b7d90502cbca17269881954636479f33fa55a370e4a8806515fc834f523294740873934344f9215aeabd01277390865_11"
          },
          "properties": {}
        },
        {
          "ruleId": "a0431bfc-83e5-34c6-ac18-34210466174d",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "`return` only makes sense inside a function"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "tinygrad/codegen/uops.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 119,
                  "startColumn": 116,
                  "endLine": 119,
                  "endColumn": 117,
                  "snippet": {
                    "text": "  ({\"uop\": UOps.ALU, \"arg\": BinaryOps.MUL, \"vin\": [{}, {\"__name__\": \"c\", \"uop\": UOps.CONST, \"arg\": 0}]}, lambda c: c), # x*0 -> 0 or 0*x -> 0"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "81e52f602e4a31bfe669ab89931e5aa03b7d90502cbca17269881954636479f33fa55a370e4a8806515fc834f523294740873934344f9215aeabd01277390865_12"
          },
          "properties": {}
        },
        {
          "ruleId": "3bb73345-52c6-343f-a907-2b1ee607eb50",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "`return` only makes sense inside a function"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "tinygrad/codegen/uops.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 120,
                  "startColumn": 102,
                  "endLine": 120,
                  "endColumn": 123,
                  "snippet": {
                    "text": "  ({\"uop\": UOps.ALU, \"arg\": BinaryOps.SUB, \"vin\": ({\"__name__\": \"x\"}, {\"__name__\": \"x\"})}, lambda x: UOp.const(x.dtype, 0)),   # x-x -> 0"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "81e52f602e4a31bfe669ab89931e5aa03b7d90502cbca17269881954636479f33fa55a370e4a8806515fc834f523294740873934344f9215aeabd01277390865_13"
          },
          "properties": {}
        },
        {
          "ruleId": "491ee4d0-8486-3526-b6a0-db74a53e7052",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "`return` only makes sense inside a function"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "tinygrad/codegen/uops.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 123,
                  "startColumn": 122,
                  "endLine": 123,
                  "endColumn": 136,
                  "snippet": {
                    "text": "                               {\"uop\": UOps.LOAD, \"vin\": ({\"__name__\": \"buf\"}, {\"__name__\": \"idx\"})})}, lambda buf, idx: UOp(UOps.NOOP)),"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "81e52f602e4a31bfe669ab89931e5aa03b7d90502cbca17269881954636479f33fa55a370e4a8806515fc834f523294740873934344f9215aeabd01277390865_14"
          },
          "properties": {}
        },
        {
          "ruleId": "a9204bc9-ec3b-3004-aa97-6d0951ae94fc",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "`return` only makes sense inside a function"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "tinygrad/codegen/uops.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 127,
                  "startColumn": 33,
                  "endLine": 127,
                  "endColumn": 77,
                  "snippet": {
                    "text": "    lambda buf, idx, gate, alt: UOp(UOps.STORE, None, (buf, idx, alt, gate))),"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "81e52f602e4a31bfe669ab89931e5aa03b7d90502cbca17269881954636479f33fa55a370e4a8806515fc834f523294740873934344f9215aeabd01277390865_15"
          },
          "properties": {}
        },
        {
          "ruleId": "000d57bf-bac8-33b5-bc66-25d059000578",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Untrusted user input in `importlib.import_module()` function allows an attacker to load arbitrary code. Avoid dynamic values in `importlib.import_module()` or use a whitelist to prevent running untrusted code."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "tinygrad/device.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 30,
                  "startColumn": 54,
                  "endLine": 30,
                  "endColumn": 114,
                  "snippet": {
                    "text": "    return [cls for cname, cls in inspect.getmembers(importlib.import_module(f'tinygrad.runtime.ops_{x.lower()}')) if (cname.lower() == x.lower() + \"device\") and x in self._devices][0](ix)  # noqa: E501"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "c117d52a9ba1cba550f8f67ba2bd1ec5f39ce89da2904cb87254d80454ba48fcc90fb4049f0251b2a6215628a4d8fea651909d8df99fbbc8aa3711a258001ae0_0"
          },
          "properties": {}
        },
        {
          "ruleId": "9373f6e3-8005-35ba-b4b9-9d71b07e1664",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Found dynamic content used in a system call. This is dangerous if external data can reach this function call because it allows a malicious actor to execute commands. Use the 'subprocess' module instead, which is easier to use without accidentally exposing a command injection vulnerability."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "tinygrad/features/graph.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 26,
                  "startColumn": 3,
                  "endLine": 26,
                  "endColumn": 53,
                  "snippet": {
                    "text": "  os.system(f'dot {opt} -Tsvg {fn}.dot -o {fn}.svg')"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "222c1edb844542b0ab50e0e2c55ac09082ef2d8ab0c672ac5f1e5ac90aa72401e0215afd163446804504598ec4aa42a88800549a7aaa022aa0d015bc6ee3f123_0"
          },
          "properties": {}
        },
        {
          "ruleId": "a99d53c3-6845-3684-8478-758e93946334",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Regex `'\\x1b\\\\[(K|.*?m)'` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "tinygrad/helpers.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 29,
                  "startColumn": 30,
                  "endLine": 29,
                  "endColumn": 62,
                  "snippet": {
                    "text": "def ansistrip(s:str): return re.sub('\\x1b\\\\[(K|.*?m)', '', s)"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "c18c4bc6e1b28726081b591e94e19e637cccb2de88c6d4d12fbfa7e6d1c44b3d51140a2db6d2117c644a0c44e0b446f91881d7ce0cd01700399e91f7450c0a8c_0"
          },
          "properties": {}
        },
        {
          "ruleId": "f97aa672-0906-36b3-9015-216fdeeb2bc2",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Avoiding SQL string concatenation: untrusted input concatenated with raw SQL query can result in SQL Injection. In order to execute raw query safely, prepared statement should be used. SQLAlchemy provides TextualSQL to easily used prepared statement with named parameters. For complex SQL composition, use SQL Expression Language or Schema Definition Language. In most cases, SQLAlchemy ORM will be a better option."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "tinygrad/helpers.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 169,
                  "startColumn": 11,
                  "endLine": 169,
                  "endColumn": 136,
                  "snippet": {
                    "text": "    res = cur.execute(f\"SELECT val FROM '{table}_{VERSION}' WHERE {' AND '.join([f'{x}=?' for x in key.keys()])}\", tuple(key.values()))"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "f4afc79bbbef4a8b5bbf238a7618f817b41f3216785f81f448f7bac7c1c278ca97ef5947b85b9b16cdf2fb5bc0969416e29ffe1235096a30eb817b5b05f8bd29_0"
          },
          "properties": {}
        },
        {
          "ruleId": "50c16f3a-02e2-312d-8790-dd485015ced6",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Detected possible formatted SQL query. Use parameterized queries instead."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "tinygrad/helpers.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 184,
                  "startColumn": 5,
                  "endLine": 184,
                  "endColumn": 127,
                  "snippet": {
                    "text": "    cur.execute(f\"CREATE TABLE IF NOT EXISTS '{table}_{VERSION}' ({ltypes}, val blob, PRIMARY KEY ({', '.join(key.keys())}))\")"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "63d997d9edcefc897cb7674555d1c441c1c51ffb57851f36ad15f376d769336000feb07db5d3714e7697df1a74ecb7336846c490cfe2223a1b178c484b16c65a_0"
          },
          "properties": {}
        },
        {
          "ruleId": "082c14db-2b9f-3ab1-b80d-9a330ea73a60",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "tinygrad/helpers.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 172,
                  "startColumn": 48,
                  "endLine": 172,
                  "endColumn": 68,
                  "snippet": {
                    "text": "  if (val:=res.fetchone()) is not None: return pickle.loads(val[0])"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "fb2353641d59115ffd40dc939cbaff32998ee1b41b3e59cee46ceb08a33b93983f6de08055f96d77cf076f06d45fc0d2fc220900bf120e78cb2418106aca3935_0"
          },
          "properties": {}
        },
        {
          "ruleId": "ad2d496a-d21d-393a-873b-6ce36f4b66b0",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "tinygrad/helpers.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 193,
                  "startColumn": 59,
                  "endLine": 193,
                  "endColumn": 87,
                  "snippet": {
                    "text": "    table, key = f\"cache_{func.__name__}\", hashlib.sha256(pickle.dumps((args, kwargs))).hexdigest()"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "0160b4cbaa323841aa1bca3bdb7aacdf1da48971a42935d82fc071bdc16f6b218668e66dc25dfc5a0b988e17c3755b192e9f3901ce69ddea5d9ff69c4dd7c56c_1"
          },
          "properties": {}
        },
        {
          "ruleId": "0eb83e2a-b6e4-3af5-ac28-e1892cbc5912",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Detected MD5 hash algorithm which is considered insecure. MD5 is not\ncollision resistant and is therefore not suitable as a cryptographic\nsignature. Use SHA256 or SHA3 instead.\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "tinygrad/helpers.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 202,
                  "startColumn": 177,
                  "endLine": 202,
                  "endColumn": 209,
                  "snippet": {
                    "text": "  fp = pathlib.Path(name) if name is not None and (isinstance(name, pathlib.Path) or '/' in name) else pathlib.Path(_cache_dir) / \"tinygrad\" / \"downloads\" / (name if name else hashlib.md5(url.encode('utf-8')).hexdigest())  # noqa: E501"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "5e8b709b1366ca4222452b304f370e24d269b302c362c49a1ca5dd6e4ebec2bec29245a6351b17ee470f498d32ee8b899de3281145923c3b289635d2bd1a28aa_0"
          },
          "properties": {}
        },
        {
          "ruleId": "a0171b88-aafd-349b-bb76-08bed5f12e3a",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "`return` only makes sense inside a function"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "tinygrad/ops.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 112,
                  "startColumn": 31,
                  "endLine": 112,
                  "endColumn": 111,
                  "snippet": {
                    "text": "  BufferOps.LOAD: lambda arg: FlopCounter(arg.st.shape, 0, {arg.idx: arg.dtype.itemsize * arg.st.real_size()}),"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "1b7ab21b5b94340b36a37be33aee8b65436b1cf0e8483fb0bb98e6be268f971137eb9bbcc427af27c824b6694d3b52934c1e4a9df19ae572ef46efd0c092b474_0"
          },
          "properties": {}
        },
        {
          "ruleId": "5cbc6814-c497-3120-a6b1-c20887103377",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Detected a dynamic value being used with urllib. urllib supports 'file://' schemes, so a dynamic value controlled by a malicious actor may allow them to read arbitrary files. Audit uses of urllib calls to ensure user data cannot control the URLs, or consider using the 'requests' library instead."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "tinygrad/helpers.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 204,
                  "startColumn": 10,
                  "endLine": 204,
                  "endColumn": 49,
                  "snippet": {
                    "text": "    with urllib.request.urlopen(url, timeout=10) as r:"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "2b546a6bd03162e0a18f17768a46645d1302cc47dcbb8d224701e4285f689170c6fff2bca21c7b774299ef99403cff95236e027691b17a2d0ff09f34092a32e3_0"
          },
          "properties": {}
        },
        {
          "ruleId": "652c76ae-1773-3ff7-ad12-f7d6231ee714",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "`return` only makes sense inside a function"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "tinygrad/ops.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 113,
                  "startColumn": 32,
                  "endLine": 113,
                  "endColumn": 64,
                  "snippet": {
                    "text": "  BufferOps.CONST: lambda arg: FlopCounter(arg.st.shape, 0, {}),"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "1b7ab21b5b94340b36a37be33aee8b65436b1cf0e8483fb0bb98e6be268f971137eb9bbcc427af27c824b6694d3b52934c1e4a9df19ae572ef46efd0c092b474_1"
          },
          "properties": {}
        },
        {
          "ruleId": "6754aafe-d8d7-39ba-9c5a-8752261ea71a",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "`return` only makes sense inside a function"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "tinygrad/ops.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 114,
                  "startColumn": 37,
                  "endLine": 114,
                  "endColumn": 148,
                  "snippet": {
                    "text": "  BufferOps.STORE: lambda self,arg: FlopCounter(arg.st.shape, self.consume_flops(), {**self.mem, arg.idx: arg.dtype.itemsize * arg.st.real_size()}),"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "1b7ab21b5b94340b36a37be33aee8b65436b1cf0e8483fb0bb98e6be268f971137eb9bbcc427af27c824b6694d3b52934c1e4a9df19ae572ef46efd0c092b474_2"
          },
          "properties": {}
        },
        {
          "ruleId": "7c7208cf-876a-3b1d-9803-96462e366cdd",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "`return` only makes sense inside a function"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "tinygrad/ops.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 115,
                  "startColumn": 35,
                  "endLine": 115,
                  "endColumn": 90,
                  "snippet": {
                    "text": "  UnaryOps.CAST: lambda self,arg: FlopCounter(self.shape, self.consume_flops(), self.mem),   # cast uses no flops"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "1b7ab21b5b94340b36a37be33aee8b65436b1cf0e8483fb0bb98e6be268f971137eb9bbcc427af27c824b6694d3b52934c1e4a9df19ae572ef46efd0c092b474_3"
          },
          "properties": {}
        },
        {
          "ruleId": "f3f1817d-9e17-306a-9447-bdde7b5eb261",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "`return` only makes sense inside a function"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "tinygrad/ops.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 116,
                  "startColumn": 22,
                  "endLine": 116,
                  "endColumn": 96,
                  "snippet": {
                    "text": "  **{op:lambda self: FlopCounter(self.shape, self.consume_flops() + prod(self.shape), self.mem) for op in UnaryOps if op is not UnaryOps.CAST},"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "1b7ab21b5b94340b36a37be33aee8b65436b1cf0e8483fb0bb98e6be268f971137eb9bbcc427af27c824b6694d3b52934c1e4a9df19ae572ef46efd0c092b474_4"
          },
          "properties": {}
        },
        {
          "ruleId": "4eeb9899-4ed8-3f39-b288-94a1a54b0fb9",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "`return` only makes sense inside a function"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "tinygrad/ops.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 117,
                  "startColumn": 24,
                  "endLine": 117,
                  "endColumn": 131,
                  "snippet": {
                    "text": "  **{op:lambda self,y: FlopCounter(self.shape, self.consume_flops() + y.consume_flops() + prod(self.shape), {**self.mem, **y.mem}) for op in BinaryOps},  # noqa: E501"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "1b7ab21b5b94340b36a37be33aee8b65436b1cf0e8483fb0bb98e6be268f971137eb9bbcc427af27c824b6694d3b52934c1e4a9df19ae572ef46efd0c092b474_5"
          },
          "properties": {}
        },
        {
          "ruleId": "a1bccfd2-57dd-3d1b-bc50-1a77c71f57a5",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "`return` only makes sense inside a function"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "tinygrad/ops.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 118,
                  "startColumn": 27,
                  "endLine": 118,
                  "endColumn": 152,
                  "snippet": {
                    "text": "  **{op:lambda self,axis: FlopCounter(tuple(1 if i in axis else s for i,s in enumerate(self.shape)), self.consume_flops() + prod(self.shape), self.mem) for op in ReduceOps},  # noqa: E501"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "1b7ab21b5b94340b36a37be33aee8b65436b1cf0e8483fb0bb98e6be268f971137eb9bbcc427af27c824b6694d3b52934c1e4a9df19ae572ef46efd0c092b474_6"
          },
          "properties": {}
        },
        {
          "ruleId": "06119f56-611a-3f45-8921-201a47d493d9",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "`return` only makes sense inside a function"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "tinygrad/ops.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 119,
                  "startColumn": 38,
                  "endLine": 119,
                  "endColumn": 174,
                  "snippet": {
                    "text": "  TernaryOps.WHERE: lambda self,y,z: FlopCounter(self.shape, self.consume_flops() + y.consume_flops() + z.consume_flops() + prod(self.shape), {**self.mem, **y.mem, **z.mem})}  # noqa: E501"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "1b7ab21b5b94340b36a37be33aee8b65436b1cf0e8483fb0bb98e6be268f971137eb9bbcc427af27c824b6694d3b52934c1e4a9df19ae572ef46efd0c092b474_7"
          },
          "properties": {}
        },
        {
          "ruleId": "17f7bf2d-dec8-3a9d-b518-fced30ecfda0",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "`return` only makes sense inside a function"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "tinygrad/ops.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 137,
                  "startColumn": 52,
                  "endLine": 137,
                  "endColumn": 75,
                  "snippet": {
                    "text": "  UnaryOps.EXP2: hook_overflow(math.inf, lambda x: math.exp(x*math.log(2))),"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "1b7ab21b5b94340b36a37be33aee8b65436b1cf0e8483fb0bb98e6be268f971137eb9bbcc427af27c824b6694d3b52934c1e4a9df19ae572ef46efd0c092b474_8"
          },
          "properties": {}
        },
        {
          "ruleId": "80fce39b-37f9-360f-b9ad-d23a1dfe188e",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "`return` only makes sense inside a function"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "tinygrad/ops.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 142,
                  "startColumn": 30,
                  "endLine": 142,
                  "endColumn": 65,
                  "snippet": {
                    "text": "  BinaryOps.MOD: lambda x,y: abs(int(x))%abs(int(y))*(1,-1)[x<0],"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "1b7ab21b5b94340b36a37be33aee8b65436b1cf0e8483fb0bb98e6be268f971137eb9bbcc427af27c824b6694d3b52934c1e4a9df19ae572ef46efd0c092b474_9"
          },
          "properties": {}
        },
        {
          "ruleId": "78771338-6a8e-31f2-b04a-10242d986a97",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "`return` only makes sense inside a function"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "tinygrad/renderer/assembly.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 238,
                  "startColumn": 42,
                  "endLine": 238,
                  "endColumn": 145,
                  "snippet": {
                    "text": "    BinaryOps.MUL: lambda d,a,b,dt,name: ('and' if dt == dtypes.bool else 'mul') + f\"{'.lo' if dtypes.is_int(dt) else ''}.{name} {d}, {a}, {b};\","
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "adea1f82933fe83fd41486384dcc94021a5a32c20c119c1dc9e101834404a223d8924d04cefb01003627a4d7722bcabb7b18a7c149798bbde807abfd071640b8_0"
          },
          "properties": {}
        },
        {
          "ruleId": "0e1653e1-7e89-3a79-a3bf-50ab08241e28",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "`return` only makes sense inside a function"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "tinygrad/renderer/llvmir.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 15,
                  "startColumn": 44,
                  "endLine": 15,
                  "endColumn": 135,
                  "snippet": {
                    "text": "  UnaryOps.EXP2: lambda builder, x, dtype: builder.call(builder.module.declare_intrinsic('llvm.exp2', [x.type]), [x], fastmath=MFLAGS),"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "48cd2fc6c89a920135afc0a2a1e4f717982023c4790fad406184c74ae2aff6c5d7d37964bf1c47d4cc070aae3c343f145589cc8af03e4a7d2a39d9149fb65a3c_0"
          },
          "properties": {}
        },
        {
          "ruleId": "07c99fe2-0c00-3c7c-b41e-027a1d6cdf2f",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "`return` only makes sense inside a function"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "tinygrad/renderer/llvmir.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 16,
                  "startColumn": 44,
                  "endLine": 16,
                  "endColumn": 135,
                  "snippet": {
                    "text": "  UnaryOps.LOG2: lambda builder, x, dtype: builder.call(builder.module.declare_intrinsic('llvm.log2', [x.type]), [x], fastmath=MFLAGS),"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "48cd2fc6c89a920135afc0a2a1e4f717982023c4790fad406184c74ae2aff6c5d7d37964bf1c47d4cc070aae3c343f145589cc8af03e4a7d2a39d9149fb65a3c_1"
          },
          "properties": {}
        },
        {
          "ruleId": "fc7e58c0-4b64-3cfe-adda-d0910c362ca8",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "`return` only makes sense inside a function"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "tinygrad/renderer/llvmir.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 17,
                  "startColumn": 43,
                  "endLine": 17,
                  "endColumn": 133,
                  "snippet": {
                    "text": "  UnaryOps.SIN: lambda builder, x, dtype: builder.call(builder.module.declare_intrinsic('llvm.sin', [x.type]), [x], fastmath=MFLAGS),"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "48cd2fc6c89a920135afc0a2a1e4f717982023c4790fad406184c74ae2aff6c5d7d37964bf1c47d4cc070aae3c343f145589cc8af03e4a7d2a39d9149fb65a3c_2"
          },
          "properties": {}
        },
        {
          "ruleId": "8b5a5401-2c51-31ff-8ea3-5f7a1748b25f",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "`return` only makes sense inside a function"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "tinygrad/renderer/llvmir.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 18,
                  "startColumn": 44,
                  "endLine": 18,
                  "endColumn": 135,
                  "snippet": {
                    "text": "  UnaryOps.SQRT: lambda builder, x, dtype: builder.call(builder.module.declare_intrinsic('llvm.sqrt', [x.type]), [x], fastmath=MFLAGS),"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "48cd2fc6c89a920135afc0a2a1e4f717982023c4790fad406184c74ae2aff6c5d7d37964bf1c47d4cc070aae3c343f145589cc8af03e4a7d2a39d9149fb65a3c_3"
          },
          "properties": {}
        },
        {
          "ruleId": "950d7d69-9ebd-3b04-b505-734905f84226",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "`return` only makes sense inside a function"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "tinygrad/renderer/llvmir.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 25,
                  "startColumn": 47,
                  "endLine": 25,
                  "endColumn": 244,
                  "snippet": {
                    "text": "  BinaryOps.MAX: lambda builder, x, y, dtype: builder.select(builder.icmp_unsigned(\">\", x, y) if is_bool_or_unsigned(dtype) else builder.icmp_signed(\">\", x, y) if dtypes.is_int(dtype) else builder.fcmp_unordered(\">\", x, y, flags=MFLAGS), x, y),  # noqa: E501"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "48cd2fc6c89a920135afc0a2a1e4f717982023c4790fad406184c74ae2aff6c5d7d37964bf1c47d4cc070aae3c343f145589cc8af03e4a7d2a39d9149fb65a3c_4"
          },
          "properties": {}
        },
        {
          "ruleId": "d6924030-d1ce-30bc-aca4-e387838973a7",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "`return` only makes sense inside a function"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "tinygrad/renderer/llvmir.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 27,
                  "startColumn": 47,
                  "endLine": 27,
                  "endColumn": 64,
                  "snippet": {
                    "text": "  BinaryOps.XOR: lambda builder, x, y, dtype: builder.xor(x, y),"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "48cd2fc6c89a920135afc0a2a1e4f717982023c4790fad406184c74ae2aff6c5d7d37964bf1c47d4cc070aae3c343f145589cc8af03e4a7d2a39d9149fb65a3c_5"
          },
          "properties": {}
        },
        {
          "ruleId": "0f9d3f21-b033-39c3-b6ac-7b3cb40bdde6",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "`return` only makes sense inside a function"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "tinygrad/renderer/llvmir.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 28,
                  "startColumn": 53,
                  "endLine": 28,
                  "endColumn": 76,
                  "snippet": {
                    "text": "  TernaryOps.WHERE: lambda builder, x, y, z, dtype: builder.select(x, y, z)}"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "48cd2fc6c89a920135afc0a2a1e4f717982023c4790fad406184c74ae2aff6c5d7d37964bf1c47d4cc070aae3c343f145589cc8af03e4a7d2a39d9149fb65a3c_6"
          },
          "properties": {}
        },
        {
          "ruleId": "f4743764-0cb3-302f-926c-1499479d51f6",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "key `4` is uselessly assigned twice"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "tinygrad/runtime/autogen/comgr.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 168,
                  "startColumn": 36,
                  "endLine": 175,
                  "endColumn": 2,
                  "snippet": {
                    "text": "amd_comgr_language_s__enumvalues = {\n    0: 'AMD_COMGR_LANGUAGE_NONE',\n    1: 'AMD_COMGR_LANGUAGE_OPENCL_1_2',\n    2: 'AMD_COMGR_LANGUAGE_OPENCL_2_0',\n    3: 'AMD_COMGR_LANGUAGE_HC',\n    4: 'AMD_COMGR_LANGUAGE_HIP',\n    4: 'AMD_COMGR_LANGUAGE_LAST',\n}"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "48e0925783bcad6ade7762d654523d9bb2fc994cd68f936cfec21d4c20344ebac8d3f1b864f27ec60c34453c1ad12a0372454cc322ba133208ea4b3291742beb_0"
          },
          "properties": {}
        },
        {
          "ruleId": "a946df2b-22fd-30da-a3c4-d888aeb4b059",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "key `19` is uselessly assigned twice"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "tinygrad/runtime/autogen/comgr.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 199,
                  "startColumn": 37,
                  "endLine": 215,
                  "endColumn": 2,
                  "snippet": {
                    "text": "amd_comgr_data_kind_s__enumvalues = {\n    0: 'AMD_COMGR_DATA_KIND_UNDEF',\n    1: 'AMD_COMGR_DATA_KIND_SOURCE',\n    2: 'AMD_COMGR_DATA_KIND_INCLUDE',\n    3: 'AMD_COMGR_DATA_KIND_PRECOMPILED_HEADER',\n    4: 'AMD_COMGR_DATA_KIND_DIAGNOSTIC',\n    5: 'AMD_COMGR_DATA_KIND_LOG',\n    6: 'AMD_COMGR_DATA_KIND_BC',\n    7: 'AMD_COMGR_DATA_KIND_RELOCATABLE',\n    8: 'AMD_COMGR_DATA_KIND_EXECUTABLE',\n    9: 'AMD_COMGR_DATA_KIND_BYTES',\n    16: 'AMD_COMGR_DATA_KIND_FATBIN',\n    17: 'AMD_COMGR_DATA_KIND_AR',\n    18: 'AMD_COMGR_DATA_KIND_BC_BUNDLE',\n    19: 'AMD_COMGR_DATA_KIND_AR_BUNDLE',\n    19: 'AMD_COMGR_DATA_KIND_LAST',\n}"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "87dd9c3c2d83a0c757804f91196820c91e0a181919dd9ffc822c435d63736b8d8bce06e2762b411316478857ed793ecf2bd3791dad9a283d0c15c0865a21f4c9_0"
          },
          "properties": {}
        },
        {
          "ruleId": "9e36e292-32b8-38c5-8367-1fcf1945c56d",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "key `15` is uselessly assigned twice"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "tinygrad/runtime/autogen/comgr.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 529,
                  "startColumn": 39,
                  "endLine": 547,
                  "endColumn": 2,
                  "snippet": {
                    "text": "amd_comgr_action_kind_s__enumvalues = {\n    0: 'AMD_COMGR_ACTION_SOURCE_TO_PREPROCESSOR',\n    1: 'AMD_COMGR_ACTION_ADD_PRECOMPILED_HEADERS',\n    2: 'AMD_COMGR_ACTION_COMPILE_SOURCE_TO_BC',\n    3: 'AMD_COMGR_ACTION_ADD_DEVICE_LIBRARIES',\n    4: 'AMD_COMGR_ACTION_LINK_BC_TO_BC',\n    5: 'AMD_COMGR_ACTION_OPTIMIZE_BC_TO_BC',\n    6: 'AMD_COMGR_ACTION_CODEGEN_BC_TO_RELOCATABLE',\n    7: 'AMD_COMGR_ACTION_CODEGEN_BC_TO_ASSEMBLY',\n    8: 'AMD_COMGR_ACTION_LINK_RELOCATABLE_TO_RELOCATABLE',\n    9: 'AMD_COMGR_ACTION_LINK_RELOCATABLE_TO_EXECUTABLE',\n    10: 'AMD_COMGR_ACTION_ASSEMBLE_SOURCE_TO_RELOCATABLE',\n    11: 'AMD_COMGR_ACTION_DISASSEMBLE_RELOCATABLE_TO_SOURCE',\n    12: 'AMD_COMGR_ACTION_DISASSEMBLE_EXECUTABLE_TO_SOURCE',\n    13: 'AMD_COMGR_ACTION_DISASSEMBLE_BYTES_TO_SOURCE',\n    14: 'AMD_COMGR_ACTION_COMPILE_SOURCE_TO_FATBIN',\n    15: 'AMD_COMGR_ACTION_COMPILE_SOURCE_WITH_DEVICE_LIBS_TO_BC',\n    15: 'AMD_COMGR_ACTION_LAST',\n}"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "a654df4047f5a4eb7ae8eb11430ea833225b2c3899ba98f420f345360034591b2f9769b6605410f2701ceeab2a8a968fb4a773e9474616fbc806ac330a2e8e54_0"
          },
          "properties": {}
        },
        {
          "ruleId": "93cd8fa2-bd3b-3f80-b9ca-350986befcc4",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "key `3` is uselessly assigned twice"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "tinygrad/runtime/autogen/comgr.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 576,
                  "startColumn": 41,
                  "endLine": 582,
                  "endColumn": 2,
                  "snippet": {
                    "text": "amd_comgr_metadata_kind_s__enumvalues = {\n    0: 'AMD_COMGR_METADATA_KIND_NULL',\n    1: 'AMD_COMGR_METADATA_KIND_STRING',\n    2: 'AMD_COMGR_METADATA_KIND_MAP',\n    3: 'AMD_COMGR_METADATA_KIND_LIST',\n    3: 'AMD_COMGR_METADATA_KIND_LAST',\n}"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "bd2f48f8991ad06c7b0959ce21d1f2367bbe79ed0180b07f6d064d1d14a1f270dd6c97c75546445e34442a2a1e008b9878ea10facb72282f724fee4897569341_0"
          },
          "properties": {}
        },
        {
          "ruleId": "e8703c60-b44e-3d29-9d12-6c91f178372f",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "key `5` is uselessly assigned twice"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "tinygrad/runtime/autogen/comgr.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 670,
                  "startColumn": 39,
                  "endLine": 678,
                  "endColumn": 2,
                  "snippet": {
                    "text": "amd_comgr_symbol_info_s__enumvalues = {\n    0: 'AMD_COMGR_SYMBOL_INFO_NAME_LENGTH',\n    1: 'AMD_COMGR_SYMBOL_INFO_NAME',\n    2: 'AMD_COMGR_SYMBOL_INFO_TYPE',\n    3: 'AMD_COMGR_SYMBOL_INFO_SIZE',\n    4: 'AMD_COMGR_SYMBOL_INFO_IS_UNDEFINED',\n    5: 'AMD_COMGR_SYMBOL_INFO_VALUE',\n    5: 'AMD_COMGR_SYMBOL_INFO_LAST',\n}"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "7f9578d1e29debf1d9e119f9b6577f550f9b7a550feeda7f681794e97ff87684ced27d05839ebf6b663336935394d74fc6406d05ae7944cdbb0d9c577535b050_0"
          },
          "properties": {}
        },
        {
          "ruleId": "bdcd40b4-b2e7-3af0-9ca4-9584ac24f3d5",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "key `4` is uselessly assigned twice"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "tinygrad/runtime/autogen/cuda.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 283,
                  "startColumn": 32,
                  "endLine": 293,
                  "endColumn": 2,
                  "snippet": {
                    "text": "CUctx_flags_enum__enumvalues = {\n    0: 'CU_CTX_SCHED_AUTO',\n    1: 'CU_CTX_SCHED_SPIN',\n    2: 'CU_CTX_SCHED_YIELD',\n    4: 'CU_CTX_SCHED_BLOCKING_SYNC',\n    4: 'CU_CTX_BLOCKING_SYNC',\n    7: 'CU_CTX_SCHED_MASK',\n    8: 'CU_CTX_MAP_HOST',\n    16: 'CU_CTX_LMEM_RESIZE_TO_MAX',\n    31: 'CU_CTX_FLAGS_MASK',\n}"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "def10c6f8cc727fff01c244043eda28ad166e633c331b9ad2ba9336f0a3f0874c6d2482c66c15bacafda9d5a4c56deb71d7cf11c5196fac67b7a1ca793944b68_0"
          },
          "properties": {}
        },
        {
          "ruleId": "d5ef2c50-a454-3ef2-a294-b9b4465a3d9f",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "key `102` is uselessly assigned twice"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "tinygrad/runtime/autogen/cuda.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 597,
                  "startColumn": 39,
                  "endLine": 724,
                  "endColumn": 2,
                  "snippet": {
                    "text": "CUdevice_attribute_enum__enumvalues = {\n    1: 'CU_DEVICE_ATTRIBUTE_MAX_THREADS_PER_BLOCK',\n    2: 'CU_DEVICE_ATTRIBUTE_MAX_BLOCK_DIM_X',\n    3: 'CU_DEVICE_ATTRIBUTE_MAX_BLOCK_DIM_Y',\n    4: 'CU_DEVICE_ATTRIBUTE_MAX_BLOCK_DIM_Z',\n    5: 'CU_DEVICE_ATTRIBUTE_MAX_GRID_DIM_X',\n    6: 'CU_DEVICE_ATTRIBUTE_MAX_GRID_DIM_Y',\n    7: 'CU_DEVICE_ATTRIBUTE_MAX_GRID_DIM_Z',\n    8: 'CU_DEVICE_ATTRIBUTE_MAX_SHARED_MEMORY_PER_BLOCK',\n    8: 'CU_DEVICE_ATTRIBUTE_SHARED_MEMORY_PER_BLOCK',\n    9: 'CU_DEVICE_ATTRIBUTE_TOTAL_CONSTANT_MEMORY',\n    10: 'CU_DEVICE_ATTRIBUTE_WARP_SIZE',\n    11: 'CU_DEVICE_ATTRIBUTE_MAX_PITCH',\n    12: 'CU_DEVICE_ATTRIBUTE_MAX_REGISTERS_PER_BLOCK',\n    12: 'CU_DEVICE_ATTRIBUTE_REGISTERS_PER_BLOCK',\n    13: 'CU_DEVICE_ATTRIBUTE_CLOCK_RATE',\n    14: 'CU_DEVICE_ATTRIBUTE_TEXTURE_ALIGNMENT',\n    15: 'CU_DEVICE_ATTRIBUTE_GPU_OVERLAP',\n    16: 'CU_DEVICE_ATTRIBUTE_MULTIPROCESSOR_COUNT',\n    17: 'CU_DEVICE_ATTRIBUTE_KERNEL_EXEC_TIMEOUT',\n    18: 'CU_DEVICE_ATTRIBUTE_INTEGRATED',\n    19: 'CU_DEVICE_ATTRIBUTE_CAN_MAP_HOST_MEMORY',\n    20: 'CU_DEVICE_ATTRIBUTE_COMPUTE_MODE',\n    21: 'CU_DEVICE_ATTRIBUTE_MAXIMUM_TEXTURE1D_WIDTH',\n    22: 'CU_DEVICE_ATTRIBUTE_MAXIMUM_TEXTURE2D_WIDTH',\n    23: 'CU_DEVICE_ATTRIBUTE_MAXIMUM_TEXTURE2D_HEIGHT',\n    24: 'CU_DEVICE_ATTRIBUTE_MAXIMUM_TEXTURE3D_WIDTH',\n    25: 'CU_DEVICE_ATTRIBUTE_MAXIMUM_TEXTURE3D_HEIGHT',\n    26: 'CU_DEVICE_ATTRIBUTE_MAXIMUM_TEXTURE3D_DEPTH',\n    27: 'CU_DEVICE_ATTRIBUTE_MAXIMUM_TEXTURE2D_LAYERED_WIDTH',\n    28: 'CU_DEVICE_ATTRIBUTE_MAXIMUM_TEXTURE2D_LAYERED_HEIGHT',\n    29: 'CU_DEVICE_ATTRIBUTE_MAXIMUM_TEXTURE2D_LAYERED_LAYERS',\n    27: 'CU_DEVICE_ATTRIBUTE_MAXIMUM_TEXTURE2D_ARRAY_WIDTH',\n    28: 'CU_DEVICE_ATTRIBUTE_MAXIMUM_TEXTURE2D_ARRAY_HEIGHT',\n    29: 'CU_DEVICE_ATTRIBUTE_MAXIMUM_TEXTURE2D_ARRAY_NUMSLICES',\n    30: 'CU_DEVICE_ATTRIBUTE_SURFACE_ALIGNMENT',\n    31: 'CU_DEVICE_ATTRIBUTE_CONCURRENT_KERNELS',\n    32: 'CU_DEVICE_ATTRIBUTE_ECC_ENABLED',\n    33: 'CU_DEVICE_ATTRIBUTE_PCI_BUS_ID',\n    34: 'CU_DEVICE_ATTRIBUTE_PCI_DEVICE_ID',\n    35: 'CU_DEVICE_ATTRIBUTE_TCC_DRIVER',\n    36: 'CU_DEVICE_ATTRIBUTE_MEMORY_CLOCK_RATE',\n    37: 'CU_DEVICE_ATTRIBUTE_GLOBAL_MEMORY_BUS_WIDTH',\n    38: 'CU_DEVICE_ATTRIBUTE_L2_CACHE_SIZE',\n    39: 'CU_DEVICE_ATTRIBUTE_MAX_THREADS_PER_MULTIPROCESSOR',\n    40: 'CU_DEVICE_ATTRIBUTE_ASYNC_ENGINE_COUNT',\n    41: 'CU_DEVICE_ATTRIBUTE_UNIFIED_ADDRESSING',\n    42: 'CU_DEVICE_ATTRIBUTE_MAXIMUM_TEXTURE1D_LAYERED_WIDTH',\n    43: 'CU_DEVICE_ATTRIBUTE_MAXIMUM_TEXTURE1D_LAYERED_LAYERS',\n    44: 'CU_DEVICE_ATTRIBUTE_CAN_TEX2D_GATHER',\n    45: 'CU_DEVICE_ATTRIBUTE_MAXIMUM_TEXTURE2D_GATHER_WIDTH',\n    46: 'CU_DEVICE_ATTRIBUTE_MAXIMUM_TEXTURE2D_GATHER_HEIGHT',\n    47: 'CU_DEVICE_ATTRIBUTE_MAXIMUM_TEXTURE3D_WIDTH_ALTERNATE',\n    48: 'CU_DEVICE_ATTRIBUTE_MAXIMUM_TEXTURE3D_HEIGHT_ALTERNATE',\n    49: 'CU_DEVICE_ATTRIBUTE_MAXIMUM_TEXTURE3D_DEPTH_ALTERNATE',\n    50: 'CU_DEVICE_ATTRIBUTE_PCI_DOMAIN_ID',\n    51: 'CU_DEVICE_ATTRIBUTE_TEXTURE_PITCH_ALIGNMENT',\n    52: 'CU_DEVICE_ATTRIBUTE_MAXIMUM_TEXTURECUBEMAP_WIDTH',\n    53: 'CU_DEVICE_ATTRIBUTE_MAXIMUM_TEXTURECUBEMAP_LAYERED_WIDTH',\n    54: 'CU_DEVICE_ATTRIBUTE_MAXIMUM_TEXTURECUBEMAP_LAYERED_LAYERS',\n    55: 'CU_DEVICE_ATTRIBUTE_MAXIMUM_SURFACE1D_WIDTH',\n    56: 'CU_DEVICE_ATTRIBUTE_MAXIMUM_SURFACE2D_WIDTH',\n    57: 'CU_DEVICE_ATTRIBUTE_MAXIMUM_SURFACE2D_HEIGHT',\n    58: 'CU_DEVICE_ATTRIBUTE_MAXIMUM_SURFACE3D_WIDTH',\n    59: 'CU_DEVICE_ATTRIBUTE_MAXIMUM_SURFACE3D_HEIGHT',\n    60: 'CU_DEVICE_ATTRIBUTE_MAXIMUM_SURFACE3D_DEPTH',\n    61: 'CU_DEVICE_ATTRIBUTE_MAXIMUM_SURFACE1D_LAYERED_WIDTH',\n    62: 'CU_DEVICE_ATTRIBUTE_MAXIMUM_SURFACE1D_LAYERED_LAYERS',\n    63: 'CU_DEVICE_ATTRIBUTE_MAXIMUM_SURFACE2D_LAYERED_WIDTH',\n    64: 'CU_DEVICE_ATTRIBUTE_MAXIMUM_SURFACE2D_LAYERED_HEIGHT',\n    65: 'CU_DEVICE_ATTRIBUTE_MAXIMUM_SURFACE2D_LAYERED_LAYERS',\n    66: 'CU_DEVICE_ATTRIBUTE_MAXIMUM_SURFACECUBEMAP_WIDTH',\n    67: 'CU_DEVICE_ATTRIBUTE_MAXIMUM_SURFACECUBEMAP_LAYERED_WIDTH',\n    68: 'CU_DEVICE_ATTRIBUTE_MAXIMUM_SURFACECUBEMAP_LAYERED_LAYERS',\n    69: 'CU_DEVICE_ATTRIBUTE_MAXIMUM_TEXTURE1D_LINEAR_WIDTH',\n    70: 'CU_DEVICE_ATTRIBUTE_MAXIMUM_TEXTURE2D_LINEAR_WIDTH',\n    71: 'CU_DEVICE_ATTRIBUTE_MAXIMUM_TEXTURE2D_LINEAR_HEIGHT',\n    72: 'CU_DEVICE_ATTRIBUTE_MAXIMUM_TEXTURE2D_LINEAR_PITCH',\n    73: 'CU_DEVICE_ATTRIBUTE_MAXIMUM_TEXTURE2D_MIPMAPPED_WIDTH',\n    74: 'CU_DEVICE_ATTRIBUTE_MAXIMUM_TEXTURE2D_MIPMAPPED_HEIGHT',\n    75: 'CU_DEVICE_ATTRIBUTE_COMPUTE_CAPABILITY_MAJOR',\n    76: 'CU_DEVICE_ATTRIBUTE_COMPUTE_CAPABILITY_MINOR',\n    77: 'CU_DEVICE_ATTRIBUTE_MAXIMUM_TEXTURE1D_MIPMAPPED_WIDTH',\n    78: 'CU_DEVICE_ATTRIBUTE_STREAM_PRIORITIES_SUPPORTED',\n    79: 'CU_DEVICE_ATTRIBUTE_GLOBAL_L1_CACHE_SUPPORTED',\n    80: 'CU_DEVICE_ATTRIBUTE_LOCAL_L1_CACHE_SUPPORTED',\n    81: 'CU_DEVICE_ATTRIBUTE_MAX_SHARED_MEMORY_PER_MULTIPROCESSOR',\n    82: 'CU_DEVICE_ATTRIBUTE_MAX_REGISTERS_PER_MULTIPROCESSOR',\n    83: 'CU_DEVICE_ATTRIBUTE_MANAGED_MEMORY',\n    84: 'CU_DEVICE_ATTRIBUTE_MULTI_GPU_BOARD',\n    85: 'CU_DEVICE_ATTRIBUTE_MULTI_GPU_BOARD_GROUP_ID',\n    86: 'CU_DEVICE_ATTRIBUTE_HOST_NATIVE_ATOMIC_SUPPORTED',\n    87: 'CU_DEVICE_ATTRIBUTE_SINGLE_TO_DOUBLE_PRECISION_PERF_RATIO',\n    88: 'CU_DEVICE_ATTRIBUTE_PAGEABLE_MEMORY_ACCESS',\n    89: 'CU_DEVICE_ATTRIBUTE_CONCURRENT_MANAGED_ACCESS',\n    90: 'CU_DEVICE_ATTRIBUTE_COMPUTE_PREEMPTION_SUPPORTED',\n    91: 'CU_DEVICE_ATTRIBUTE_CAN_USE_HOST_POINTER_FOR_REGISTERED_MEM',\n    92: 'CU_DEVICE_ATTRIBUTE_CAN_USE_STREAM_MEM_OPS',\n    93: 'CU_DEVICE_ATTRIBUTE_CAN_USE_64_BIT_STREAM_MEM_OPS',\n    94: 'CU_DEVICE_ATTRIBUTE_CAN_USE_STREAM_WAIT_VALUE_NOR',\n    95: 'CU_DEVICE_ATTRIBUTE_COOPERATIVE_LAUNCH',\n    96: 'CU_DEVICE_ATTRIBUTE_COOPERATIVE_MULTI_DEVICE_LAUNCH',\n    97: 'CU_DEVICE_ATTRIBUTE_MAX_SHARED_MEMORY_PER_BLOCK_OPTIN',\n    98: 'CU_DEVICE_ATTRIBUTE_CAN_FLUSH_REMOTE_WRITES',\n    99: 'CU_DEVICE_ATTRIBUTE_HOST_REGISTER_SUPPORTED',\n    100: 'CU_DEVICE_ATTRIBUTE_PAGEABLE_MEMORY_ACCESS_USES_HOST_PAGE_TABLES',\n    101: 'CU_DEVICE_ATTRIBUTE_DIRECT_MANAGED_MEM_ACCESS_FROM_HOST',\n    102: 'CU_DEVICE_ATTRIBUTE_VIRTUAL_ADDRESS_MANAGEMENT_SUPPORTED',\n    102: 'CU_DEVICE_ATTRIBUTE_VIRTUAL_MEMORY_MANAGEMENT_SUPPORTED',\n    103: 'CU_DEVICE_ATTRIBUTE_HANDLE_TYPE_POSIX_FILE_DESCRIPTOR_SUPPORTED',\n    104: 'CU_DEVICE_ATTRIBUTE_HANDLE_TYPE_WIN32_HANDLE_SUPPORTED',\n    105: 'CU_DEVICE_ATTRIBUTE_HANDLE_TYPE_WIN32_KMT_HANDLE_SUPPORTED',\n    106: 'CU_DEVICE_ATTRIBUTE_MAX_BLOCKS_PER_MULTIPROCESSOR',\n    107: 'CU_DEVICE_ATTRIBUTE_GENERIC_COMPRESSION_SUPPORTED',\n    108: 'CU_DEVICE_ATTRIBUTE_MAX_PERSISTING_L2_CACHE_SIZE',\n    109: 'CU_DEVICE_ATTRIBUTE_MAX_ACCESS_POLICY_WINDOW_SIZE',\n    110: 'CU_DEVICE_ATTRIBUTE_GPU_DIRECT_RDMA_WITH_CUDA_VMM_SUPPORTED',\n    111: 'CU_DEVICE_ATTRIBUTE_RESERVED_SHARED_MEMORY_PER_BLOCK',\n    112: 'CU_DEVICE_ATTRIBUTE_SPARSE_CUDA_ARRAY_SUPPORTED',\n    113: 'CU_DEVICE_ATTRIBUTE_READ_ONLY_HOST_REGISTER_SUPPORTED',\n    114: 'CU_DEVICE_ATTRIBUTE_TIMELINE_SEMAPHORE_INTEROP_SUPPORTED',\n    115: 'CU_DEVICE_ATTRIBUTE_MEMORY_POOLS_SUPPORTED',\n    116: 'CU_DEVICE_ATTRIBUTE_GPU_DIRECT_RDMA_SUPPORTED',\n    117: 'CU_DEVICE_ATTRIBUTE_GPU_DIRECT_RDMA_FLUSH_WRITES_OPTIONS',\n    118: 'CU_DEVICE_ATTRIBUTE_GPU_DIRECT_RDMA_WRITES_ORDERING',\n    119: 'CU_DEVICE_ATTRIBUTE_MEMPOOL_SUPPORTED_HANDLE_TYPES',\n    120: 'CU_DEVICE_ATTRIBUTE_MAX',\n}"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "1c3d498f5ea3e6a78bd0f7fa60550326f58b75fa0a547d56d19506df6b8aae6075703a5b673bb31e4f844392f2cd14f40c94584f1f7003ad4a24294c3e272970_0"
          },
          "properties": {}
        },
        {
          "ruleId": "ea63207c-b989-3755-b6b4-16a2cab8efe6",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "key `4` is uselessly assigned twice"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "tinygrad/runtime/autogen/cuda.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 1709,
                  "startColumn": 42,
                  "endLine": 1715,
                  "endColumn": 2,
                  "snippet": {
                    "text": "CUdevice_P2PAttribute_enum__enumvalues = {\n    1: 'CU_DEVICE_P2P_ATTRIBUTE_PERFORMANCE_RANK',\n    2: 'CU_DEVICE_P2P_ATTRIBUTE_ACCESS_SUPPORTED',\n    3: 'CU_DEVICE_P2P_ATTRIBUTE_NATIVE_ATOMIC_SUPPORTED',\n    4: 'CU_DEVICE_P2P_ATTRIBUTE_ACCESS_ACCESS_SUPPORTED',\n    4: 'CU_DEVICE_P2P_ATTRIBUTE_CUDA_ARRAY_ACCESS_SUPPORTED',\n}"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "827bb6c2879c3d4a3cb087b6dc4d34a67c3871a835c2d780a0e4c4584f828c1690006fdb087261b8d14806bce3aa2a1fc833fc456ede912d9f936fbd8ab09360_0"
          },
          "properties": {}
        },
        {
          "ruleId": "181f5224-7685-3b96-8df7-acfca344de06",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "key `205` is uselessly assigned twice"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "tinygrad/runtime/autogen/hip.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 358,
                  "startColumn": 26,
                  "endLine": 437,
                  "endColumn": 2,
                  "snippet": {
                    "text": "hipError_t__enumvalues = {\n    0: 'hipSuccess',\n    1: 'hipErrorInvalidValue',\n    2: 'hipErrorOutOfMemory',\n    2: 'hipErrorMemoryAllocation',\n    3: 'hipErrorNotInitialized',\n    3: 'hipErrorInitializationError',\n    4: 'hipErrorDeinitialized',\n    5: 'hipErrorProfilerDisabled',\n    6: 'hipErrorProfilerNotInitialized',\n    7: 'hipErrorProfilerAlreadyStarted',\n    8: 'hipErrorProfilerAlreadyStopped',\n    9: 'hipErrorInvalidConfiguration',\n    12: 'hipErrorInvalidPitchValue',\n    13: 'hipErrorInvalidSymbol',\n    17: 'hipErrorInvalidDevicePointer',\n    21: 'hipErrorInvalidMemcpyDirection',\n    35: 'hipErrorInsufficientDriver',\n    52: 'hipErrorMissingConfiguration',\n    53: 'hipErrorPriorLaunchFailure',\n    98: 'hipErrorInvalidDeviceFunction',\n    100: 'hipErrorNoDevice',\n    101: 'hipErrorInvalidDevice',\n    200: 'hipErrorInvalidImage',\n    201: 'hipErrorInvalidContext',\n    202: 'hipErrorContextAlreadyCurrent',\n    205: 'hipErrorMapFailed',\n    205: 'hipErrorMapBufferObjectFailed',\n    206: 'hipErrorUnmapFailed',\n    207: 'hipErrorArrayIsMapped',\n    208: 'hipErrorAlreadyMapped',\n    209: 'hipErrorNoBinaryForGpu',\n    210: 'hipErrorAlreadyAcquired',\n    211: 'hipErrorNotMapped',\n    212: 'hipErrorNotMappedAsArray',\n    213: 'hipErrorNotMappedAsPointer',\n    214: 'hipErrorECCNotCorrectable',\n    215: 'hipErrorUnsupportedLimit',\n    216: 'hipErrorContextAlreadyInUse',\n    217: 'hipErrorPeerAccessUnsupported',\n    218: 'hipErrorInvalidKernelFile',\n    219: 'hipErrorInvalidGraphicsContext',\n    300: 'hipErrorInvalidSource',\n    301: 'hipErrorFileNotFound',\n    302: 'hipErrorSharedObjectSymbolNotFound',\n    303: 'hipErrorSharedObjectInitFailed',\n    304: 'hipErrorOperatingSystem',\n    400: 'hipErrorInvalidHandle',\n    400: 'hipErrorInvalidResourceHandle',\n    401: 'hipErrorIllegalState',\n    500: 'hipErrorNotFound',\n    600: 'hipErrorNotReady',\n    700: 'hipErrorIllegalAddress',\n    701: 'hipErrorLaunchOutOfResources',\n    702: 'hipErrorLaunchTimeOut',\n    704: 'hipErrorPeerAccessAlreadyEnabled',\n    705: 'hipErrorPeerAccessNotEnabled',\n    708: 'hipErrorSetOnActiveProcess',\n    709: 'hipErrorContextIsDestroyed',\n    710: 'hipErrorAssert',\n    712: 'hipErrorHostMemoryAlreadyRegistered',\n    713: 'hipErrorHostMemoryNotRegistered',\n    719: 'hipErrorLaunchFailure',\n    720: 'hipErrorCooperativeLaunchTooLarge',\n    801: 'hipErrorNotSupported',\n    900: 'hipErrorStreamCaptureUnsupported',\n    901: 'hipErrorStreamCaptureInvalidated',\n    902: 'hipErrorStreamCaptureMerge',\n    903: 'hipErrorStreamCaptureUnmatched',\n    904: 'hipErrorStreamCaptureUnjoined',\n    905: 'hipErrorStreamCaptureIsolation',\n    906: 'hipErrorStreamCaptureImplicit',\n    907: 'hipErrorCapturedEvent',\n    908: 'hipErrorStreamCaptureWrongThread',\n    910: 'hipErrorGraphExecUpdateFailure',\n    999: 'hipErrorUnknown',\n    1052: 'hipErrorRuntimeMemory',\n    1053: 'hipErrorRuntimeOther',\n    1054: 'hipErrorTbd',\n}"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "f1579f01367560e7d8fa18aeb0789cb7b368d0a113afa84d846137861b91a542993356d1cb1731fa58f67723d4dbc47b1b209ff44b83a0d5c62adb27c9820322_0"
          },
          "properties": {}
        },
        {
          "ruleId": "a818b5b4-683e-32d5-aeb6-dc9faae55487",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "key `0` is uselessly assigned twice"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "tinygrad/runtime/autogen/hip.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 519,
                  "startColumn": 36,
                  "endLine": 634,
                  "endColumn": 2,
                  "snippet": {
                    "text": "hipDeviceAttribute_t__enumvalues = {\n    0: 'hipDeviceAttributeCudaCompatibleBegin',\n    0: 'hipDeviceAttributeEccEnabled',\n    1: 'hipDeviceAttributeAccessPolicyMaxWindowSize',\n    2: 'hipDeviceAttributeAsyncEngineCount',\n    3: 'hipDeviceAttributeCanMapHostMemory',\n    4: 'hipDeviceAttributeCanUseHostPointerForRegisteredMem',\n    5: 'hipDeviceAttributeClockRate',\n    6: 'hipDeviceAttributeComputeMode',\n    7: 'hipDeviceAttributeComputePreemptionSupported',\n    8: 'hipDeviceAttributeConcurrentKernels',\n    9: 'hipDeviceAttributeConcurrentManagedAccess',\n    10: 'hipDeviceAttributeCooperativeLaunch',\n    11: 'hipDeviceAttributeCooperativeMultiDeviceLaunch',\n    12: 'hipDeviceAttributeDeviceOverlap',\n    13: 'hipDeviceAttributeDirectManagedMemAccessFromHost',\n    14: 'hipDeviceAttributeGlobalL1CacheSupported',\n    15: 'hipDeviceAttributeHostNativeAtomicSupported',\n    16: 'hipDeviceAttributeIntegrated',\n    17: 'hipDeviceAttributeIsMultiGpuBoard',\n    18: 'hipDeviceAttributeKernelExecTimeout',\n    19: 'hipDeviceAttributeL2CacheSize',\n    20: 'hipDeviceAttributeLocalL1CacheSupported',\n    21: 'hipDeviceAttributeLuid',\n    22: 'hipDeviceAttributeLuidDeviceNodeMask',\n    23: 'hipDeviceAttributeComputeCapabilityMajor',\n    24: 'hipDeviceAttributeManagedMemory',\n    25: 'hipDeviceAttributeMaxBlocksPerMultiProcessor',\n    26: 'hipDeviceAttributeMaxBlockDimX',\n    27: 'hipDeviceAttributeMaxBlockDimY',\n    28: 'hipDeviceAttributeMaxBlockDimZ',\n    29: 'hipDeviceAttributeMaxGridDimX',\n    30: 'hipDeviceAttributeMaxGridDimY',\n    31: 'hipDeviceAttributeMaxGridDimZ',\n    32: 'hipDeviceAttributeMaxSurface1D',\n    33: 'hipDeviceAttributeMaxSurface1DLayered',\n    34: 'hipDeviceAttributeMaxSurface2D',\n    35: 'hipDeviceAttributeMaxSurface2DLayered',\n    36: 'hipDeviceAttributeMaxSurface3D',\n    37: 'hipDeviceAttributeMaxSurfaceCubemap',\n    38: 'hipDeviceAttributeMaxSurfaceCubemapLayered',\n    39: 'hipDeviceAttributeMaxTexture1DWidth',\n    40: 'hipDeviceAttributeMaxTexture1DLayered',\n    41: 'hipDeviceAttributeMaxTexture1DLinear',\n    42: 'hipDeviceAttributeMaxTexture1DMipmap',\n    43: 'hipDeviceAttributeMaxTexture2DWidth',\n    44: 'hipDeviceAttributeMaxTexture2DHeight',\n    45: 'hipDeviceAttributeMaxTexture2DGather',\n    46: 'hipDeviceAttributeMaxTexture2DLayered',\n    47: 'hipDeviceAttributeMaxTexture2DLinear',\n    48: 'hipDeviceAttributeMaxTexture2DMipmap',\n    49: 'hipDeviceAttributeMaxTexture3DWidth',\n    50: 'hipDeviceAttributeMaxTexture3DHeight',\n    51: 'hipDeviceAttributeMaxTexture3DDepth',\n    52: 'hipDeviceAttributeMaxTexture3DAlt',\n    53: 'hipDeviceAttributeMaxTextureCubemap',\n    54: 'hipDeviceAttributeMaxTextureCubemapLayered',\n    55: 'hipDeviceAttributeMaxThreadsDim',\n    56: 'hipDeviceAttributeMaxThreadsPerBlock',\n    57: 'hipDeviceAttributeMaxThreadsPerMultiProcessor',\n    58: 'hipDeviceAttributeMaxPitch',\n    59: 'hipDeviceAttributeMemoryBusWidth',\n    60: 'hipDeviceAttributeMemoryClockRate',\n    61: 'hipDeviceAttributeComputeCapabilityMinor',\n    62: 'hipDeviceAttributeMultiGpuBoardGroupID',\n    63: 'hipDeviceAttributeMultiprocessorCount',\n    64: 'hipDeviceAttributeUnused1',\n    65: 'hipDeviceAttributePageableMemoryAccess',\n    66: 'hipDeviceAttributePageableMemoryAccessUsesHostPageTables',\n    67: 'hipDeviceAttributePciBusId',\n    68: 'hipDeviceAttributePciDeviceId',\n    69: 'hipDeviceAttributePciDomainID',\n    70: 'hipDeviceAttributePersistingL2CacheMaxSize',\n    71: 'hipDeviceAttributeMaxRegistersPerBlock',\n    72: 'hipDeviceAttributeMaxRegistersPerMultiprocessor',\n    73: 'hipDeviceAttributeReservedSharedMemPerBlock',\n    74: 'hipDeviceAttributeMaxSharedMemoryPerBlock',\n    75: 'hipDeviceAttributeSharedMemPerBlockOptin',\n    76: 'hipDeviceAttributeSharedMemPerMultiprocessor',\n    77: 'hipDeviceAttributeSingleToDoublePrecisionPerfRatio',\n    78: 'hipDeviceAttributeStreamPrioritiesSupported',\n    79: 'hipDeviceAttributeSurfaceAlignment',\n    80: 'hipDeviceAttributeTccDriver',\n    81: 'hipDeviceAttributeTextureAlignment',\n    82: 'hipDeviceAttributeTexturePitchAlignment',\n    83: 'hipDeviceAttributeTotalConstantMemory',\n    84: 'hipDeviceAttributeTotalGlobalMem',\n    85: 'hipDeviceAttributeUnifiedAddressing',\n    86: 'hipDeviceAttributeUnused2',\n    87: 'hipDeviceAttributeWarpSize',\n    88: 'hipDeviceAttributeMemoryPoolsSupported',\n    89: 'hipDeviceAttributeVirtualMemoryManagementSupported',\n    90: 'hipDeviceAttributeHostRegisterSupported',\n    9999: 'hipDeviceAttributeCudaCompatibleEnd',\n    10000: 'hipDeviceAttributeAmdSpecificBegin',\n    10000: 'hipDeviceAttributeClockInstructionRate',\n    10001: 'hipDeviceAttributeUnused3',\n    10002: 'hipDeviceAttributeMaxSharedMemoryPerMultiprocessor',\n    10003: 'hipDeviceAttributeUnused4',\n    10004: 'hipDeviceAttributeUnused5',\n    10005: 'hipDeviceAttributeHdpMemFlushCntl',\n    10006: 'hipDeviceAttributeHdpRegFlushCntl',\n    10007: 'hipDeviceAttributeCooperativeMultiDeviceUnmatchedFunc',\n    10008: 'hipDeviceAttributeCooperativeMultiDeviceUnmatchedGridDim',\n    10009: 'hipDeviceAttributeCooperativeMultiDeviceUnmatchedBlockDim',\n    10010: 'hipDeviceAttributeCooperativeMultiDeviceUnmatchedSharedMem',\n    10011: 'hipDeviceAttributeIsLargeBar',\n    10012: 'hipDeviceAttributeAsicRevision',\n    10013: 'hipDeviceAttributeCanUseStreamWaitValue',\n    10014: 'hipDeviceAttributeImageSupport',\n    10015: 'hipDeviceAttributePhysicalMultiProcessorCount',\n    10016: 'hipDeviceAttributeFineGrainSupport',\n    10017: 'hipDeviceAttributeWallClockRate',\n    19999: 'hipDeviceAttributeAmdSpecificEnd',\n    20000: 'hipDeviceAttributeVendorSpecificBegin',\n}"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "7ba70d080e28f7fa6927fd77931976090bb5517d2ca9a289142e3f75d097d5d62033abb2a353d873a5f92d93e9cbcca1d3417b7f052c8b190587c890bbef475f_0"
          },
          "properties": {}
        },
        {
          "ruleId": "5e25c592-7270-3236-9294-7ab5c6f5ea1f",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "key `3` is uselessly assigned twice"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "tinygrad/runtime/autogen/hsa.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 361,
                  "startColumn": 37,
                  "endLine": 372,
                  "endColumn": 2,
                  "snippet": {
                    "text": "c__EA_hsa_extension_t__enumvalues = {\n    0: 'HSA_EXTENSION_FINALIZER',\n    1: 'HSA_EXTENSION_IMAGES',\n    2: 'HSA_EXTENSION_PERFORMANCE_COUNTERS',\n    3: 'HSA_EXTENSION_PROFILING_EVENTS',\n    3: 'HSA_EXTENSION_STD_LAST',\n    512: 'HSA_AMD_FIRST_EXTENSION',\n    512: 'HSA_EXTENSION_AMD_PROFILER',\n    513: 'HSA_EXTENSION_AMD_LOADER',\n    514: 'HSA_EXTENSION_AMD_AQLPROFILE',\n    514: 'HSA_AMD_LAST_EXTENSION',\n}"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "a0fb5936a2fdb1113e37da126035f15ba2e2835ef18857188d7e5d417f08b28d76ded8258aa8cd9b8c31df1102b79515ea6410180894d70c0a5cf288360822ac_0"
          },
          "properties": {}
        },
        {
          "ruleId": "bf01ac21-ceb1-3958-bd0d-f8b199a30d70",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "key `11` is uselessly assigned twice"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "tinygrad/runtime/autogen/hsa.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 1306,
                  "startColumn": 41,
                  "endLine": 1313,
                  "endColumn": 2,
                  "snippet": {
                    "text": "c__EA_hsa_packet_header_t__enumvalues = {\n    0: 'HSA_PACKET_HEADER_TYPE',\n    8: 'HSA_PACKET_HEADER_BARRIER',\n    9: 'HSA_PACKET_HEADER_SCACQUIRE_FENCE_SCOPE',\n    9: 'HSA_PACKET_HEADER_ACQUIRE_FENCE_SCOPE',\n    11: 'HSA_PACKET_HEADER_SCRELEASE_FENCE_SCOPE',\n    11: 'HSA_PACKET_HEADER_RELEASE_FENCE_SCOPE',\n}"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "c04e4524b8e55968b42e6dd0c95c17ff5418abe39d4d41e16a092a6241f7d02979d4d6f439df022b11785825013a9b52f800c8a66fecad69d6ca572a12d6c001_0"
          },
          "properties": {}
        },
        {
          "ruleId": "d3a9b0b5-e733-363e-aa6a-57778db1d311",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "key `2` is uselessly assigned twice"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "tinygrad/runtime/autogen/hsa.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 1325,
                  "startColumn": 47,
                  "endLine": 1332,
                  "endColumn": 2,
                  "snippet": {
                    "text": "c__EA_hsa_packet_header_width_t__enumvalues = {\n    8: 'HSA_PACKET_HEADER_WIDTH_TYPE',\n    1: 'HSA_PACKET_HEADER_WIDTH_BARRIER',\n    2: 'HSA_PACKET_HEADER_WIDTH_SCACQUIRE_FENCE_SCOPE',\n    2: 'HSA_PACKET_HEADER_WIDTH_ACQUIRE_FENCE_SCOPE',\n    2: 'HSA_PACKET_HEADER_WIDTH_SCRELEASE_FENCE_SCOPE',\n    2: 'HSA_PACKET_HEADER_WIDTH_RELEASE_FENCE_SCOPE',\n}"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "57c76a708b5f22234d042e576dee0cd8ff3d51802bf30f5c7cb0ac6638d1b267168e5fa12fe95cadf7b03b53ec22e74943d84bbb47acd6755e021270b3161425_0"
          },
          "properties": {}
        },
        {
          "ruleId": "1814db5f-07ba-31ab-85d7-f12b57390724",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "key `1` is uselessly assigned twice"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "tinygrad/runtime/autogen/hsa.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 3604,
                  "startColumn": 38,
                  "endLine": 3623,
                  "endColumn": 2,
                  "snippet": {
                    "text": "amd_queue_properties_t__enumvalues = {\n    0: 'AMD_QUEUE_PROPERTIES_ENABLE_TRAP_HANDLER_SHIFT',\n    1: 'AMD_QUEUE_PROPERTIES_ENABLE_TRAP_HANDLER_WIDTH',\n    1: 'AMD_QUEUE_PROPERTIES_ENABLE_TRAP_HANDLER',\n    1: 'AMD_QUEUE_PROPERTIES_IS_PTR64_SHIFT',\n    1: 'AMD_QUEUE_PROPERTIES_IS_PTR64_WIDTH',\n    2: 'AMD_QUEUE_PROPERTIES_IS_PTR64',\n    2: 'AMD_QUEUE_PROPERTIES_ENABLE_TRAP_HANDLER_DEBUG_SGPRS_SHIFT',\n    1: 'AMD_QUEUE_PROPERTIES_ENABLE_TRAP_HANDLER_DEBUG_SGPRS_WIDTH',\n    4: 'AMD_QUEUE_PROPERTIES_ENABLE_TRAP_HANDLER_DEBUG_SGPRS',\n    3: 'AMD_QUEUE_PROPERTIES_ENABLE_PROFILING_SHIFT',\n    1: 'AMD_QUEUE_PROPERTIES_ENABLE_PROFILING_WIDTH',\n    8: 'AMD_QUEUE_PROPERTIES_ENABLE_PROFILING',\n    4: 'AMD_QUEUE_PROPERTIES_USE_SCRATCH_ONCE_SHIFT',\n    1: 'AMD_QUEUE_PROPERTIES_USE_SCRATCH_ONCE_WIDTH',\n    16: 'AMD_QUEUE_PROPERTIES_USE_SCRATCH_ONCE',\n    5: 'AMD_QUEUE_PROPERTIES_RESERVED1_SHIFT',\n    27: 'AMD_QUEUE_PROPERTIES_RESERVED1_WIDTH',\n    -32: 'AMD_QUEUE_PROPERTIES_RESERVED1',\n}"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "24da8b6c74637b1be54762c1398798d90bdf8e6c24e76ffb66d52b210faa4bb807bd01cba4a4cfdf85d23e2d78f107ffb99eea0b795e5684a2fb2d7547855cc0_0"
          },
          "properties": {}
        },
        {
          "ruleId": "aa19ef5f-eab8-3b42-ba89-f00f1f01b311",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "key `1` is uselessly assigned twice"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "tinygrad/runtime/autogen/hsa.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 3726,
                  "startColumn": 41,
                  "endLine": 3729,
                  "endColumn": 2,
                  "snippet": {
                    "text": "amd_kernel_code_version_t__enumvalues = {\n    1: 'AMD_KERNEL_CODE_VERSION_MAJOR',\n    1: 'AMD_KERNEL_CODE_VERSION_MINOR',\n}"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "bb872048e37994691d16082be7c17b1ce45f64c378d493aa1a5a08990786cf049750ec068b433e04f800152ee9f276f944ec8acdb49577ac511a50d6a86a7c02_0"
          },
          "properties": {}
        },
        {
          "ruleId": "5bc5e67f-373c-38ad-bec5-9fbb9fe1fe1b",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "key `1` is uselessly assigned twice"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "tinygrad/runtime/autogen/hsa.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 3773,
                  "startColumn": 42,
                  "endLine": 3816,
                  "endColumn": 2,
                  "snippet": {
                    "text": "amd_compute_pgm_rsrc_one_t__enumvalues = {\n    0: 'AMD_COMPUTE_PGM_RSRC_ONE_GRANULATED_WORKITEM_VGPR_COUNT_SHIFT',\n    6: 'AMD_COMPUTE_PGM_RSRC_ONE_GRANULATED_WORKITEM_VGPR_COUNT_WIDTH',\n    63: 'AMD_COMPUTE_PGM_RSRC_ONE_GRANULATED_WORKITEM_VGPR_COUNT',\n    6: 'AMD_COMPUTE_PGM_RSRC_ONE_GRANULATED_WAVEFRONT_SGPR_COUNT_SHIFT',\n    4: 'AMD_COMPUTE_PGM_RSRC_ONE_GRANULATED_WAVEFRONT_SGPR_COUNT_WIDTH',\n    960: 'AMD_COMPUTE_PGM_RSRC_ONE_GRANULATED_WAVEFRONT_SGPR_COUNT',\n    10: 'AMD_COMPUTE_PGM_RSRC_ONE_PRIORITY_SHIFT',\n    2: 'AMD_COMPUTE_PGM_RSRC_ONE_PRIORITY_WIDTH',\n    3072: 'AMD_COMPUTE_PGM_RSRC_ONE_PRIORITY',\n    12: 'AMD_COMPUTE_PGM_RSRC_ONE_FLOAT_ROUND_MODE_32_SHIFT',\n    2: 'AMD_COMPUTE_PGM_RSRC_ONE_FLOAT_ROUND_MODE_32_WIDTH',\n    12288: 'AMD_COMPUTE_PGM_RSRC_ONE_FLOAT_ROUND_MODE_32',\n    14: 'AMD_COMPUTE_PGM_RSRC_ONE_FLOAT_ROUND_MODE_16_64_SHIFT',\n    2: 'AMD_COMPUTE_PGM_RSRC_ONE_FLOAT_ROUND_MODE_16_64_WIDTH',\n    49152: 'AMD_COMPUTE_PGM_RSRC_ONE_FLOAT_ROUND_MODE_16_64',\n    16: 'AMD_COMPUTE_PGM_RSRC_ONE_FLOAT_DENORM_MODE_32_SHIFT',\n    2: 'AMD_COMPUTE_PGM_RSRC_ONE_FLOAT_DENORM_MODE_32_WIDTH',\n    196608: 'AMD_COMPUTE_PGM_RSRC_ONE_FLOAT_DENORM_MODE_32',\n    18: 'AMD_COMPUTE_PGM_RSRC_ONE_FLOAT_DENORM_MODE_16_64_SHIFT',\n    2: 'AMD_COMPUTE_PGM_RSRC_ONE_FLOAT_DENORM_MODE_16_64_WIDTH',\n    786432: 'AMD_COMPUTE_PGM_RSRC_ONE_FLOAT_DENORM_MODE_16_64',\n    20: 'AMD_COMPUTE_PGM_RSRC_ONE_PRIV_SHIFT',\n    1: 'AMD_COMPUTE_PGM_RSRC_ONE_PRIV_WIDTH',\n    1048576: 'AMD_COMPUTE_PGM_RSRC_ONE_PRIV',\n    21: 'AMD_COMPUTE_PGM_RSRC_ONE_ENABLE_DX10_CLAMP_SHIFT',\n    1: 'AMD_COMPUTE_PGM_RSRC_ONE_ENABLE_DX10_CLAMP_WIDTH',\n    2097152: 'AMD_COMPUTE_PGM_RSRC_ONE_ENABLE_DX10_CLAMP',\n    22: 'AMD_COMPUTE_PGM_RSRC_ONE_DEBUG_MODE_SHIFT',\n    1: 'AMD_COMPUTE_PGM_RSRC_ONE_DEBUG_MODE_WIDTH',\n    4194304: 'AMD_COMPUTE_PGM_RSRC_ONE_DEBUG_MODE',\n    23: 'AMD_COMPUTE_PGM_RSRC_ONE_ENABLE_IEEE_MODE_SHIFT',\n    1: 'AMD_COMPUTE_PGM_RSRC_ONE_ENABLE_IEEE_MODE_WIDTH',\n    8388608: 'AMD_COMPUTE_PGM_RSRC_ONE_ENABLE_IEEE_MODE',\n    24: 'AMD_COMPUTE_PGM_RSRC_ONE_BULKY_SHIFT',\n    1: 'AMD_COMPUTE_PGM_RSRC_ONE_BULKY_WIDTH',\n    16777216: 'AMD_COMPUTE_PGM_RSRC_ONE_BULKY',\n    25: 'AMD_COMPUTE_PGM_RSRC_ONE_CDBG_USER_SHIFT',\n    1: 'AMD_COMPUTE_PGM_RSRC_ONE_CDBG_USER_WIDTH',\n    33554432: 'AMD_COMPUTE_PGM_RSRC_ONE_CDBG_USER',\n    26: 'AMD_COMPUTE_PGM_RSRC_ONE_RESERVED1_SHIFT',\n    6: 'AMD_COMPUTE_PGM_RSRC_ONE_RESERVED1_WIDTH',\n    -67108864: 'AMD_COMPUTE_PGM_RSRC_ONE_RESERVED1',\n}"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "afb962cd24ecf8ea3795c1d8b95fdebfe4a070a6b866056b1ebe51789d9e432eb69e43467d2c43fefda6e88fcf3d8733ca6bb409a832a2504dbd03ff203420c0_0"
          },
          "properties": {}
        },
        {
          "ruleId": "cdd59526-2b1a-3604-915f-d117a630e4a2",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "key `1` is uselessly assigned twice"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "tinygrad/runtime/autogen/hsa.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 3876,
                  "startColumn": 42,
                  "endLine": 3934,
                  "endColumn": 2,
                  "snippet": {
                    "text": "amd_compute_pgm_rsrc_two_t__enumvalues = {\n    0: 'AMD_COMPUTE_PGM_RSRC_TWO_ENABLE_SGPR_PRIVATE_SEGMENT_WAVE_BYTE_OFFSET_SHIFT',\n    1: 'AMD_COMPUTE_PGM_RSRC_TWO_ENABLE_SGPR_PRIVATE_SEGMENT_WAVE_BYTE_OFFSET_WIDTH',\n    1: 'AMD_COMPUTE_PGM_RSRC_TWO_ENABLE_SGPR_PRIVATE_SEGMENT_WAVE_BYTE_OFFSET',\n    1: 'AMD_COMPUTE_PGM_RSRC_TWO_USER_SGPR_COUNT_SHIFT',\n    5: 'AMD_COMPUTE_PGM_RSRC_TWO_USER_SGPR_COUNT_WIDTH',\n    62: 'AMD_COMPUTE_PGM_RSRC_TWO_USER_SGPR_COUNT',\n    6: 'AMD_COMPUTE_PGM_RSRC_TWO_ENABLE_TRAP_HANDLER_SHIFT',\n    1: 'AMD_COMPUTE_PGM_RSRC_TWO_ENABLE_TRAP_HANDLER_WIDTH',\n    64: 'AMD_COMPUTE_PGM_RSRC_TWO_ENABLE_TRAP_HANDLER',\n    7: 'AMD_COMPUTE_PGM_RSRC_TWO_ENABLE_SGPR_WORKGROUP_ID_X_SHIFT',\n    1: 'AMD_COMPUTE_PGM_RSRC_TWO_ENABLE_SGPR_WORKGROUP_ID_X_WIDTH',\n    128: 'AMD_COMPUTE_PGM_RSRC_TWO_ENABLE_SGPR_WORKGROUP_ID_X',\n    8: 'AMD_COMPUTE_PGM_RSRC_TWO_ENABLE_SGPR_WORKGROUP_ID_Y_SHIFT',\n    1: 'AMD_COMPUTE_PGM_RSRC_TWO_ENABLE_SGPR_WORKGROUP_ID_Y_WIDTH',\n    256: 'AMD_COMPUTE_PGM_RSRC_TWO_ENABLE_SGPR_WORKGROUP_ID_Y',\n    9: 'AMD_COMPUTE_PGM_RSRC_TWO_ENABLE_SGPR_WORKGROUP_ID_Z_SHIFT',\n    1: 'AMD_COMPUTE_PGM_RSRC_TWO_ENABLE_SGPR_WORKGROUP_ID_Z_WIDTH',\n    512: 'AMD_COMPUTE_PGM_RSRC_TWO_ENABLE_SGPR_WORKGROUP_ID_Z',\n    10: 'AMD_COMPUTE_PGM_RSRC_TWO_ENABLE_SGPR_WORKGROUP_INFO_SHIFT',\n    1: 'AMD_COMPUTE_PGM_RSRC_TWO_ENABLE_SGPR_WORKGROUP_INFO_WIDTH',\n    1024: 'AMD_COMPUTE_PGM_RSRC_TWO_ENABLE_SGPR_WORKGROUP_INFO',\n    11: 'AMD_COMPUTE_PGM_RSRC_TWO_ENABLE_VGPR_WORKITEM_ID_SHIFT',\n    2: 'AMD_COMPUTE_PGM_RSRC_TWO_ENABLE_VGPR_WORKITEM_ID_WIDTH',\n    6144: 'AMD_COMPUTE_PGM_RSRC_TWO_ENABLE_VGPR_WORKITEM_ID',\n    13: 'AMD_COMPUTE_PGM_RSRC_TWO_ENABLE_EXCEPTION_ADDRESS_WATCH_SHIFT',\n    1: 'AMD_COMPUTE_PGM_RSRC_TWO_ENABLE_EXCEPTION_ADDRESS_WATCH_WIDTH',\n    8192: 'AMD_COMPUTE_PGM_RSRC_TWO_ENABLE_EXCEPTION_ADDRESS_WATCH',\n    14: 'AMD_COMPUTE_PGM_RSRC_TWO_ENABLE_EXCEPTION_MEMORY_VIOLATION_SHIFT',\n    1: 'AMD_COMPUTE_PGM_RSRC_TWO_ENABLE_EXCEPTION_MEMORY_VIOLATION_WIDTH',\n    16384: 'AMD_COMPUTE_PGM_RSRC_TWO_ENABLE_EXCEPTION_MEMORY_VIOLATION',\n    15: 'AMD_COMPUTE_PGM_RSRC_TWO_GRANULATED_LDS_SIZE_SHIFT',\n    9: 'AMD_COMPUTE_PGM_RSRC_TWO_GRANULATED_LDS_SIZE_WIDTH',\n    16744448: 'AMD_COMPUTE_PGM_RSRC_TWO_GRANULATED_LDS_SIZE',\n    24: 'AMD_COMPUTE_PGM_RSRC_TWO_ENABLE_EXCEPTION_IEEE_754_FP_INVALID_OPERATION_SHIFT',\n    1: 'AMD_COMPUTE_PGM_RSRC_TWO_ENABLE_EXCEPTION_IEEE_754_FP_INVALID_OPERATION_WIDTH',\n    16777216: 'AMD_COMPUTE_PGM_RSRC_TWO_ENABLE_EXCEPTION_IEEE_754_FP_INVALID_OPERATION',\n    25: 'AMD_COMPUTE_PGM_RSRC_TWO_ENABLE_EXCEPTION_FP_DENORMAL_SOURCE_SHIFT',\n    1: 'AMD_COMPUTE_PGM_RSRC_TWO_ENABLE_EXCEPTION_FP_DENORMAL_SOURCE_WIDTH',\n    33554432: 'AMD_COMPUTE_PGM_RSRC_TWO_ENABLE_EXCEPTION_FP_DENORMAL_SOURCE',\n    26: 'AMD_COMPUTE_PGM_RSRC_TWO_ENABLE_EXCEPTION_IEEE_754_FP_DIVISION_BY_ZERO_SHIFT',\n    1: 'AMD_COMPUTE_PGM_RSRC_TWO_ENABLE_EXCEPTION_IEEE_754_FP_DIVISION_BY_ZERO_WIDTH',\n    67108864: 'AMD_COMPUTE_PGM_RSRC_TWO_ENABLE_EXCEPTION_IEEE_754_FP_DIVISION_BY_ZERO',\n    27: 'AMD_COMPUTE_PGM_RSRC_TWO_ENABLE_EXCEPTION_IEEE_754_FP_OVERFLOW_SHIFT',\n    1: 'AMD_COMPUTE_PGM_RSRC_TWO_ENABLE_EXCEPTION_IEEE_754_FP_OVERFLOW_WIDTH',\n    134217728: 'AMD_COMPUTE_PGM_RSRC_TWO_ENABLE_EXCEPTION_IEEE_754_FP_OVERFLOW',\n    28: 'AMD_COMPUTE_PGM_RSRC_TWO_ENABLE_EXCEPTION_IEEE_754_FP_UNDERFLOW_SHIFT',\n    1: 'AMD_COMPUTE_PGM_RSRC_TWO_ENABLE_EXCEPTION_IEEE_754_FP_UNDERFLOW_WIDTH',\n    268435456: 'AMD_COMPUTE_PGM_RSRC_TWO_ENABLE_EXCEPTION_IEEE_754_FP_UNDERFLOW',\n    29: 'AMD_COMPUTE_PGM_RSRC_TWO_ENABLE_EXCEPTION_IEEE_754_FP_INEXACT_SHIFT',\n    1: 'AMD_COMPUTE_PGM_RSRC_TWO_ENABLE_EXCEPTION_IEEE_754_FP_INEXACT_WIDTH',\n    536870912: 'AMD_COMPUTE_PGM_RSRC_TWO_ENABLE_EXCEPTION_IEEE_754_FP_INEXACT',\n    30: 'AMD_COMPUTE_PGM_RSRC_TWO_ENABLE_EXCEPTION_INT_DIVISION_BY_ZERO_SHIFT',\n    1: 'AMD_COMPUTE_PGM_RSRC_TWO_ENABLE_EXCEPTION_INT_DIVISION_BY_ZERO_WIDTH',\n    1073741824: 'AMD_COMPUTE_PGM_RSRC_TWO_ENABLE_EXCEPTION_INT_DIVISION_BY_ZERO',\n    31: 'AMD_COMPUTE_PGM_RSRC_TWO_RESERVED1_SHIFT',\n    1: 'AMD_COMPUTE_PGM_RSRC_TWO_RESERVED1_WIDTH',\n    -2147483648: 'AMD_COMPUTE_PGM_RSRC_TWO_RESERVED1',\n}"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "766a631391c2da830ad3e43fd7b92e3e3de3c1c321cd48d35471e1721d3114bece5a6c2346de787ab31dd6ecdce67f2df1e2a6d1de3b5d18ec891f8086a73424_0"
          },
          "properties": {}
        },
        {
          "ruleId": "0003e19f-1870-3cb0-a348-5ffb59975451",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "key `16` is uselessly assigned twice"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "tinygrad/runtime/autogen/hsa.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 4009,
                  "startColumn": 44,
                  "endLine": 4064,
                  "endColumn": 2,
                  "snippet": {
                    "text": "amd_kernel_code_properties_t__enumvalues = {\n    0: 'AMD_KERNEL_CODE_PROPERTIES_ENABLE_SGPR_PRIVATE_SEGMENT_BUFFER_SHIFT',\n    1: 'AMD_KERNEL_CODE_PROPERTIES_ENABLE_SGPR_PRIVATE_SEGMENT_BUFFER_WIDTH',\n    1: 'AMD_KERNEL_CODE_PROPERTIES_ENABLE_SGPR_PRIVATE_SEGMENT_BUFFER',\n    1: 'AMD_KERNEL_CODE_PROPERTIES_ENABLE_SGPR_DISPATCH_PTR_SHIFT',\n    1: 'AMD_KERNEL_CODE_PROPERTIES_ENABLE_SGPR_DISPATCH_PTR_WIDTH',\n    2: 'AMD_KERNEL_CODE_PROPERTIES_ENABLE_SGPR_DISPATCH_PTR',\n    2: 'AMD_KERNEL_CODE_PROPERTIES_ENABLE_SGPR_QUEUE_PTR_SHIFT',\n    1: 'AMD_KERNEL_CODE_PROPERTIES_ENABLE_SGPR_QUEUE_PTR_WIDTH',\n    4: 'AMD_KERNEL_CODE_PROPERTIES_ENABLE_SGPR_QUEUE_PTR',\n    3: 'AMD_KERNEL_CODE_PROPERTIES_ENABLE_SGPR_KERNARG_SEGMENT_PTR_SHIFT',\n    1: 'AMD_KERNEL_CODE_PROPERTIES_ENABLE_SGPR_KERNARG_SEGMENT_PTR_WIDTH',\n    8: 'AMD_KERNEL_CODE_PROPERTIES_ENABLE_SGPR_KERNARG_SEGMENT_PTR',\n    4: 'AMD_KERNEL_CODE_PROPERTIES_ENABLE_SGPR_DISPATCH_ID_SHIFT',\n    1: 'AMD_KERNEL_CODE_PROPERTIES_ENABLE_SGPR_DISPATCH_ID_WIDTH',\n    16: 'AMD_KERNEL_CODE_PROPERTIES_ENABLE_SGPR_DISPATCH_ID',\n    5: 'AMD_KERNEL_CODE_PROPERTIES_ENABLE_SGPR_FLAT_SCRATCH_INIT_SHIFT',\n    1: 'AMD_KERNEL_CODE_PROPERTIES_ENABLE_SGPR_FLAT_SCRATCH_INIT_WIDTH',\n    32: 'AMD_KERNEL_CODE_PROPERTIES_ENABLE_SGPR_FLAT_SCRATCH_INIT',\n    6: 'AMD_KERNEL_CODE_PROPERTIES_ENABLE_SGPR_PRIVATE_SEGMENT_SIZE_SHIFT',\n    1: 'AMD_KERNEL_CODE_PROPERTIES_ENABLE_SGPR_PRIVATE_SEGMENT_SIZE_WIDTH',\n    64: 'AMD_KERNEL_CODE_PROPERTIES_ENABLE_SGPR_PRIVATE_SEGMENT_SIZE',\n    7: 'AMD_KERNEL_CODE_PROPERTIES_ENABLE_SGPR_GRID_WORKGROUP_COUNT_X_SHIFT',\n    1: 'AMD_KERNEL_CODE_PROPERTIES_ENABLE_SGPR_GRID_WORKGROUP_COUNT_X_WIDTH',\n    128: 'AMD_KERNEL_CODE_PROPERTIES_ENABLE_SGPR_GRID_WORKGROUP_COUNT_X',\n    8: 'AMD_KERNEL_CODE_PROPERTIES_ENABLE_SGPR_GRID_WORKGROUP_COUNT_Y_SHIFT',\n    1: 'AMD_KERNEL_CODE_PROPERTIES_ENABLE_SGPR_GRID_WORKGROUP_COUNT_Y_WIDTH',\n    256: 'AMD_KERNEL_CODE_PROPERTIES_ENABLE_SGPR_GRID_WORKGROUP_COUNT_Y',\n    9: 'AMD_KERNEL_CODE_PROPERTIES_ENABLE_SGPR_GRID_WORKGROUP_COUNT_Z_SHIFT',\n    1: 'AMD_KERNEL_CODE_PROPERTIES_ENABLE_SGPR_GRID_WORKGROUP_COUNT_Z_WIDTH',\n    512: 'AMD_KERNEL_CODE_PROPERTIES_ENABLE_SGPR_GRID_WORKGROUP_COUNT_Z',\n    10: 'AMD_KERNEL_CODE_PROPERTIES_RESERVED1_SHIFT',\n    6: 'AMD_KERNEL_CODE_PROPERTIES_RESERVED1_WIDTH',\n    64512: 'AMD_KERNEL_CODE_PROPERTIES_RESERVED1',\n    16: 'AMD_KERNEL_CODE_PROPERTIES_ENABLE_ORDERED_APPEND_GDS_SHIFT',\n    1: 'AMD_KERNEL_CODE_PROPERTIES_ENABLE_ORDERED_APPEND_GDS_WIDTH',\n    65536: 'AMD_KERNEL_CODE_PROPERTIES_ENABLE_ORDERED_APPEND_GDS',\n    17: 'AMD_KERNEL_CODE_PROPERTIES_PRIVATE_ELEMENT_SIZE_SHIFT',\n    2: 'AMD_KERNEL_CODE_PROPERTIES_PRIVATE_ELEMENT_SIZE_WIDTH',\n    393216: 'AMD_KERNEL_CODE_PROPERTIES_PRIVATE_ELEMENT_SIZE',\n    19: 'AMD_KERNEL_CODE_PROPERTIES_IS_PTR64_SHIFT',\n    1: 'AMD_KERNEL_CODE_PROPERTIES_IS_PTR64_WIDTH',\n    524288: 'AMD_KERNEL_CODE_PROPERTIES_IS_PTR64',\n    20: 'AMD_KERNEL_CODE_PROPERTIES_IS_DYNAMIC_CALLSTACK_SHIFT',\n    1: 'AMD_KERNEL_CODE_PROPERTIES_IS_DYNAMIC_CALLSTACK_WIDTH',\n    1048576: 'AMD_KERNEL_CODE_PROPERTIES_IS_DYNAMIC_CALLSTACK',\n    21: 'AMD_KERNEL_CODE_PROPERTIES_IS_DEBUG_ENABLED_SHIFT',\n    1: 'AMD_KERNEL_CODE_PROPERTIES_IS_DEBUG_ENABLED_WIDTH',\n    2097152: 'AMD_KERNEL_CODE_PROPERTIES_IS_DEBUG_ENABLED',\n    22: 'AMD_KERNEL_CODE_PROPERTIES_IS_XNACK_ENABLED_SHIFT',\n    1: 'AMD_KERNEL_CODE_PROPERTIES_IS_XNACK_ENABLED_WIDTH',\n    4194304: 'AMD_KERNEL_CODE_PROPERTIES_IS_XNACK_ENABLED',\n    23: 'AMD_KERNEL_CODE_PROPERTIES_RESERVED2_SHIFT',\n    9: 'AMD_KERNEL_CODE_PROPERTIES_RESERVED2_WIDTH',\n    -8388608: 'AMD_KERNEL_CODE_PROPERTIES_RESERVED2',\n}"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "9010c94d380f00e61203730428e81a471d5a47cdeb4d78b7482e39dc1c7e92ee2f4da710320c0a56c8b5081f7f0b7164a8638b73803a79789edb92df4aee5f91_0"
          },
          "properties": {}
        },
        {
          "ruleId": "bf46b9e4-3a0e-304b-a791-d453aa9c089f",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "`return` should never appear inside a class __init__ function. This will cause a runtime error."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "tinygrad/runtime/driver/hsa.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 33,
                  "startColumn": 77,
                  "endLine": 34,
                  "endColumn": 142,
                  "snippet": {
                    "text": "    self.hw_queue = init_c_var(ctypes.POINTER(hsa.hsa_queue_t)(), lambda x: check(\n      hsa.hsa_queue_create(self.device.agent, queue_size, hsa.HSA_QUEUE_TYPE_SINGLE, null_func, None, (1<<32)-1, (1<<32)-1, ctypes.byref(x))))"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "4b671a7b45941fe71687af83b3b30b608152d91463d50708cde5f57d7e370be963904ec8b4b09f30cb0af95255a5257104f11884c12c7a1573882700559bfdc1_0"
          },
          "properties": {}
        },
        {
          "ruleId": "8c584bda-9112-3b5c-b2f0-e8799a943361",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "`return` should never appear inside a class __init__ function. This will cause a runtime error."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "tinygrad/runtime/graph/cuda.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 21,
                  "startColumn": 55,
                  "endLine": 21,
                  "endColumn": 100,
                  "snippet": {
                    "text": "    self.graph = init_c_var(cuda.CUgraph(), lambda x: check(cuda.cuGraphCreate(ctypes.byref(x), 0)))"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "785dc4920a857405e8e01f69e8892df7ab7baabb5c103eb59412cfd03a0dcd9f3aac794cae937d3de77c2377454ab536f2ecd0a68e55dedc9ae1a589321d6068_0"
          },
          "properties": {}
        },
        {
          "ruleId": "c3a3c8f4-fc40-3964-b54e-3258a1b361f4",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "`return` should never appear inside a class __init__ function. This will cause a runtime error."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "tinygrad/runtime/graph/cuda.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 50,
                  "startColumn": 62,
                  "endLine": 50,
                  "endColumn": 139,
                  "snippet": {
                    "text": "    self.instance = init_c_var(cuda.CUgraphExec(), lambda x: check(cuda.cuGraphInstantiate_v2(ctypes.byref(x), self.graph, None, None, 0)))"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "785dc4920a857405e8e01f69e8892df7ab7baabb5c103eb59412cfd03a0dcd9f3aac794cae937d3de77c2377454ab536f2ecd0a68e55dedc9ae1a589321d6068_1"
          },
          "properties": {}
        },
        {
          "ruleId": "072f7e05-3d8a-324b-ad46-bd8758165262",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "`return` should never appear inside a class __init__ function. This will cause a runtime error."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "tinygrad/runtime/graph/hsa.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 99,
                  "startColumn": 67,
                  "endLine": 99,
                  "endColumn": 131,
                  "snippet": {
                    "text": "    self.finish_signal = init_c_var(hsa.hsa_signal_t(), lambda x: check(hsa.hsa_amd_signal_create(1, 0, None, 0, ctypes.byref(x))))"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "6c807c9c3f6a666ce1847d95f3eb8a9e0c12f6af486b40c74b060b4cd72101c9674c7406095de7bab776730c5759a4a53fc834f47c525d40e310b7bf4eaa84d8_0"
          },
          "properties": {}
        },
        {
          "ruleId": "d810cf53-234b-3721-8688-c235f3ebe443",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Regex `pattern` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "tinygrad/runtime/ops_amd.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 40,
                  "startColumn": 13,
                  "endLine": 40,
                  "endColumn": 53,
                  "snippet": {
                    "text": "  matches = re.findall(pattern, hdrpy, re.MULTILINE)"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "519f8c3e217844b892baf05168b6dc9d6e6df7a821549b7ec67254cb7ba439d38b6a56cd633ceef11b1d88150276898dde25bb50309da8a3227c1320f41a4946_0"
          },
          "properties": {}
        },
        {
          "ruleId": "a8a9e473-27e9-3d79-acd4-d1bba363e3de",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Using 'output_file.name' without '.flush()' or '.close()' may cause an error because the file may not exist when 'output_file.name' is used. Use '.flush()' or close the file before using 'output_file.name'."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "tinygrad/runtime/ops_clang.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 13,
                  "startColumn": 42,
                  "endLine": 13,
                  "endColumn": 58,
                  "snippet": {
                    "text": "                               '-o', str(output_file.name)], input=src.encode('utf-8'))"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "6160a4f0c30782f83ae44727914e8bdd81ace16bd9fbd66ff710051a39213a6bb026473014eba3e15db61df0ce7ebffe373f48297bb106e3e637200fb7d5a742_0"
          },
          "properties": {}
        },
        {
          "ruleId": "57605913-21e0-3fee-8db4-92afbc20f917",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Using 'output_file.name' without '.flush()' or '.close()' may cause an error because the file may not exist when 'output_file.name' is used. Use '.flush()' or close the file before using 'output_file.name'."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "tinygrad/runtime/ops_clang.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 14,
                  "startColumn": 27,
                  "endLine": 14,
                  "endColumn": 43,
                  "snippet": {
                    "text": "      return pathlib.Path(output_file.name).read_bytes()"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "6160a4f0c30782f83ae44727914e8bdd81ace16bd9fbd66ff710051a39213a6bb026473014eba3e15db61df0ce7ebffe373f48297bb106e3e637200fb7d5a742_1"
          },
          "properties": {}
        },
        {
          "ruleId": "686bbfb6-bb88-3463-a879-5d64c8ae24ac",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Using 'cached_file_path.name' without '.flush()' or '.close()' may cause an error because the file may not exist when 'cached_file_path.name' is used. Use '.flush()' or close the file before using 'cached_file_path.name'."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "tinygrad/runtime/ops_clang.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 21,
                  "startColumn": 20,
                  "endLine": 21,
                  "endColumn": 41,
                  "snippet": {
                    "text": "      pathlib.Path(cached_file_path.name).write_bytes(lib)"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "48611c87c95afc3e7d88b81fed3246547296b182f6f61cf3554d12cd36e21dc55e4bdbaf6f57aef083838b54857dcd03abe3b92c9e380313c788bd74b09d82cf_0"
          },
          "properties": {}
        },
        {
          "ruleId": "6f38f8a8-cd32-3af1-a0f9-0c08a811b155",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Using 'cached_file_path.name' without '.flush()' or '.close()' may cause an error because the file may not exist when 'cached_file_path.name' is used. Use '.flush()' or close the file before using 'cached_file_path.name'."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "tinygrad/runtime/ops_clang.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 22,
                  "startColumn": 34,
                  "endLine": 22,
                  "endColumn": 55,
                  "snippet": {
                    "text": "      self.fxn = ctypes.CDLL(str(cached_file_path.name))[name]"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "48611c87c95afc3e7d88b81fed3246547296b182f6f61cf3554d12cd36e21dc55e4bdbaf6f57aef083838b54857dcd03abe3b92c9e380313c788bd74b09d82cf_1"
          },
          "properties": {}
        },
        {
          "ruleId": "a4c3c2fa-470a-3852-a151-8633fc55596d",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Regex `r'([!@<\\[\\s,\\+\\-;\\n])((?:[_%$][\\w%\\$_]+(?:\\.[xyz])?\\:?)|(?:buf\\d+))([<>\\]\\s,\\+\\-;\\n\\)])'` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "tinygrad/runtime/ops_cuda.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 16,
                  "startColumn": 7,
                  "endLine": 16,
                  "endColumn": 160,
                  "snippet": {
                    "text": "  s = re.sub(r'([!@<\\[\\s,\\+\\-;\\n])((?:[_%$][\\w%\\$_]+(?:\\.[xyz])?\\:?)|(?:buf\\d+))([<>\\]\\s,\\+\\-;\\n\\)])', lambda m:m[1]+colored(m[2], \"blue\")+m[3], s, flags=re.M) # identifiers  # noqa: E501"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "d78a3ef1e0a4658ad0e46aa7ba1c93016f500f67e0d1703578a6db46ed03cd7c02c62fc7ced54746f30b885ce9e660b8a9a32507dabe0710d738a32cf6cf85c8_0"
          },
          "properties": {}
        },
        {
          "ruleId": "19badc14-fc57-30e1-aced-d2367d696fc3",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Regex `r'(.)((?:b|s|u|f)(?:8|16|32|64)|pred)([\\.\\s])'` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "tinygrad/runtime/ops_cuda.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 17,
                  "startColumn": 7,
                  "endLine": 17,
                  "endColumn": 119,
                  "snippet": {
                    "text": "  s = re.sub(r'(.)((?:b|s|u|f)(?:8|16|32|64)|pred)([\\.\\s])', lambda m:m[1]+colored(m[2], \"green\")+m[3], s, flags=re.M) # types"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "2142ec37b5dfa63d00120b1ff3be4a5aa53de447ae78819caafcfc3289c9328912a298900414a09d4580c9f5eed770c1943f24d644ebf42afc02390bd72dda69_0"
          },
          "properties": {}
        },
        {
          "ruleId": "58889dcb-8bcd-34b5-af8e-afba8a66e6a0",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Regex `r'^(\\s*)([\\w]+)(.*?;$)'` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "tinygrad/runtime/ops_cuda.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 18,
                  "startColumn": 7,
                  "endLine": 18,
                  "endColumn": 97,
                  "snippet": {
                    "text": "  s = re.sub(r'^(\\s*)([\\w]+)(.*?;$)', lambda m:m[1]+colored(m[2], \"yellow\")+m[3], s, flags=re.M) # instructions"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "16bb5201ba28d68e1c35dffc8eed6e0511748e0d817a69d83331da09fa6094ed88d704cddf09422417903dfb2312108792d23270f1804df551935803d1aa9d16_0"
          },
          "properties": {}
        },
        {
          "ruleId": "7e152d95-7b50-3951-97e7-d1032416502f",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Regex `r'([<>\\[\\]\\s,\\+\\-;])((?:0[fF][0-9a-fA-F]{8})|(?:[0-9]+)|(?:0[xX][0-9a-fA-F]+))([<>\\[\\]\\s,\\+\\-;])'` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "tinygrad/runtime/ops_cuda.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 19,
                  "startColumn": 7,
                  "endLine": 19,
                  "endColumn": 171,
                  "snippet": {
                    "text": "  s = re.sub(r'([<>\\[\\]\\s,\\+\\-;])((?:0[fF][0-9a-fA-F]{8})|(?:[0-9]+)|(?:0[xX][0-9a-fA-F]+))([<>\\[\\]\\s,\\+\\-;])', lambda m:m[1]+colored(m[2], \"yellow\")+m[3], s, flags=re.M) # numbers  # noqa: E501"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "fc63eaa55d6555e68e45663d5cf2cb93a6062693b6ca195c5ef75b77ab826007b012b13d5f39362b91707a5258a76f9d9dada1a834498981c7ab3a7466baca1f_0"
          },
          "properties": {}
        },
        {
          "ruleId": "8253b8fd-91ea-3ece-b983-d86728852689",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Regex `r'(\\.)(param|reg|global)'` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "tinygrad/runtime/ops_cuda.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 20,
                  "startColumn": 7,
                  "endLine": 20,
                  "endColumn": 95,
                  "snippet": {
                    "text": "  s = re.sub(r'(\\.)(param|reg|global)', lambda m:m[1]+colored(m[2], \"magenta\"), s, flags=re.M) # space"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "4a76487c499ba63684a06ac5104ce48564c31f54bb7d9bd2c87281e9fcc41355f505c508bbd52272ea9e0cce08e957d4e2cea6b4cf4d43dcc60eed6b36772115_0"
          },
          "properties": {}
        },
        {
          "ruleId": "1af983de-efa3-351c-b52d-a1ef65ac0ebe",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Regex `r'(\\.)(version|target|address_size|visible|entry)'` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "tinygrad/runtime/ops_cuda.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 21,
                  "startColumn": 7,
                  "endLine": 21,
                  "endColumn": 120,
                  "snippet": {
                    "text": "  s = re.sub(r'(\\.)(version|target|address_size|visible|entry)', lambda m:m[1]+colored(m[2], \"magenta\"), s, flags=re.M) # derivatives"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "348a22e41b5dbbf4858fe8a85490ffc0da1fe3c3ef5cc6af8dc0c3c287b2f1ab8e9876033484c2f1bf533fefab83aec03178fc4d4ce8651f21a2463d2abfd049_0"
          },
          "properties": {}
        },
        {
          "ruleId": "900ccc2d-743f-3223-9a13-ae3b82a8829a",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "`return` only makes sense inside a function"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "tinygrad/runtime/ops_cuda.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 28,
                  "startColumn": 97,
                  "endLine": 28,
                  "endColumn": 247,
                  "snippet": {
                    "text": "  cuda.cuLaunchKernel = lambda src, gx, gy, gz, lx, ly, lz, shared, stream, unused_extra, args: gpuocelot_lib.ptx_run(src, len(args), (ctypes.c_void_p * len(args))(*[ctypes.cast(x, ctypes.c_void_p) for x in args]), lx, ly, lz, gx, gy, gz, shared)  # type: ignore  # noqa: E501"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "a42142c7e90dcdee3aa785ddc636102c5a1cac101c5ad5987ce0475a4cdecfa2f9691b9f519b9c521bf4c1ffce425c1b93c1ebceeb42a41f4482a92a796097c8_0"
          },
          "properties": {}
        },
        {
          "ruleId": "36ab5527-2987-3062-a89f-1ca6c1f4f2ca",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Detected MD5 hash algorithm which is considered insecure. MD5 is not\ncollision resistant and is therefore not suitable as a cryptographic\nsignature. Use SHA256 or SHA3 instead.\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "tinygrad/runtime/ops_cuda.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 85,
                  "startColumn": 53,
                  "endLine": 85,
                  "endColumn": 69,
                  "snippet": {
                    "text": "    fn = (Path(tempfile.gettempdir()) / f\"tinycuda_{hashlib.md5(lib).hexdigest()}\").as_posix()"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "df4f9fa971f9cb2b21cd604ec99f190d8b7280c351b7a7fc1d222f25b34828c11f490f322b586979e35b5d6521b930663cd5a5794b40cbc8c1b96c815f98200e_0"
          },
          "properties": {}
        },
        {
          "ruleId": "03a1cf33-3652-33ef-9580-3ccc6b50ef49",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "`return` should never appear inside a class __init__ function. This will cause a runtime error."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "tinygrad/runtime/ops_cuda.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 161,
                  "startColumn": 62,
                  "endLine": 161,
                  "endColumn": 113,
                  "snippet": {
                    "text": "      self.cu_device = init_c_var(cuda.CUdevice(), lambda x: check(cuda.cuDeviceGet(ctypes.byref(x), device_id)))"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "c72cd1ead0d7a29706586046f713964b9e0952e218b8cf656eea0ef7de9d6970d6230de9cd6547fd3f32dffed61d290b8c92f898f156d80dcde9206ddec2a3ae_0"
          },
          "properties": {}
        },
        {
          "ruleId": "b6f4b6f2-d534-380f-ac25-2dbfc59a4e0e",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "`return` should never appear inside a class __init__ function. This will cause a runtime error."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "tinygrad/runtime/ops_cuda.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 162,
                  "startColumn": 61,
                  "endLine": 162,
                  "endColumn": 123,
                  "snippet": {
                    "text": "      self.context = init_c_var(cuda.CUcontext(), lambda x: check(cuda.cuCtxCreate_v2(ctypes.byref(x), 0, self.cu_device)))"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "c72cd1ead0d7a29706586046f713964b9e0952e218b8cf656eea0ef7de9d6970d6230de9cd6547fd3f32dffed61d290b8c92f898f156d80dcde9206ddec2a3ae_1"
          },
          "properties": {}
        },
        {
          "ruleId": "b44657b3-248e-3216-b015-bef48c47dca5",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "`return` should never appear inside a class __init__ function. This will cause a runtime error."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "tinygrad/runtime/ops_gpu.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 91,
                  "startColumn": 91,
                  "endLine": 91,
                  "endColumn": 167,
                  "snippet": {
                    "text": "      CLDevice.device_ids = init_c_var((cl.cl_device_id * num_devices.value)(), lambda x: check(cl.clGetDeviceIDs(platform_ids[0], device_type, num_devices, x, None)))  # noqa: E501"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "cd125215f916eb81ae8c45dace37bd49de0e40bf53217b73f5c2f8f70163dd8ec6c6637052ced615ff1206df84a028e78d0591f349aa9cc9ee0b5a6de8c51cb1_0"
          },
          "properties": {}
        },
        {
          "ruleId": "3f8058d7-afdf-3174-9626-e09955c396af",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Detected MD5 hash algorithm which is considered insecure. MD5 is not\ncollision resistant and is therefore not suitable as a cryptographic\nsignature. Use SHA256 or SHA3 instead.\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "tinygrad/runtime/ops_gpu.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 100,
                  "startColumn": 19,
                  "endLine": 100,
                  "endColumn": 88,
                  "snippet": {
                    "text": "    compile_key = hashlib.md5(self.device_name.encode() + self.driver_version.encode()).hexdigest()"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "6de2c2cb52d6e9945e5fcd544e7091c8b6372f7a1b3d6946576121e396bfb617f1243e911d84a17a62bf5aeb1913b21f86521b7082a7eb66e6b6d15053ac60e5_0"
          },
          "properties": {}
        },
        {
          "ruleId": "dabe961d-c9ca-3a51-912c-4517d84514e9",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "`return` should never appear inside a class __init__ function. This will cause a runtime error."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "tinygrad/runtime/ops_hsa.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 61,
                  "startColumn": 62,
                  "endLine": 61,
                  "endColumn": 188,
                  "snippet": {
                    "text": "    self.exec = init_c_var(hsa.hsa_executable_t(), lambda x: check(hsa.hsa_executable_create_alt(hsa.HSA_PROFILE_FULL, hsa.HSA_DEFAULT_FLOAT_ROUNDING_MODE_DEFAULT, None, ctypes.byref(x)))) # noqa: E501"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "9bb94e96ce003f5711fe37edaa0265dae67ae47598c464e8878f0360b8ae881a70ec6c31a60ea92e938f7d8ca18d320530946d0d16eda80c192e509ae4a234f1_0"
          },
          "properties": {}
        },
        {
          "ruleId": "55a37a52-e229-3142-aa78-8b1054088fb5",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "`return` should never appear inside a class __init__ function. This will cause a runtime error."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "tinygrad/runtime/ops_hsa.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 63,
                  "startColumn": 45,
                  "endLine": 63,
                  "endColumn": 129,
                  "snippet": {
                    "text": "                                  lambda x: check(hsa.hsa_code_object_reader_create_from_memory(lib, len(lib), ctypes.byref(x))))"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "9bb94e96ce003f5711fe37edaa0265dae67ae47598c464e8878f0360b8ae881a70ec6c31a60ea92e938f7d8ca18d320530946d0d16eda80c192e509ae4a234f1_1"
          },
          "properties": {}
        },
        {
          "ruleId": "0db64735-0837-3f47-ba63-3a5dd3704bf2",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "`return` should never appear inside a class __init__ function. This will cause a runtime error."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "tinygrad/runtime/ops_hsa.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 67,
                  "startColumn": 71,
                  "endLine": 67,
                  "endColumn": 206,
                  "snippet": {
                    "text": "    self.kernel = init_c_var(hsa.hsa_executable_symbol_t(), lambda x: check(hsa.hsa_executable_get_symbol_by_name(self.exec, (name+\".kd\").encode(\"utf-8\"), ctypes.byref(self.device.agent), ctypes.byref(x)))) # noqa: E501"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "9bb94e96ce003f5711fe37edaa0265dae67ae47598c464e8878f0360b8ae881a70ec6c31a60ea92e938f7d8ca18d320530946d0d16eda80c192e509ae4a234f1_2"
          },
          "properties": {}
        },
        {
          "ruleId": "cdb61223-10e3-3b44-bfb1-fb929f4f35c7",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "`return` should never appear inside a class __init__ function. This will cause a runtime error."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "tinygrad/runtime/ops_hsa.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 68,
                  "startColumn": 59,
                  "endLine": 68,
                  "endColumn": 176,
                  "snippet": {
                    "text": "    self.handle = init_c_var(ctypes.c_uint64(), lambda x: check(hsa.hsa_executable_symbol_get_info(self.kernel, hsa.HSA_EXECUTABLE_SYMBOL_INFO_KERNEL_OBJECT, ctypes.byref(x)))) # noqa: E501"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "9bb94e96ce003f5711fe37edaa0265dae67ae47598c464e8878f0360b8ae881a70ec6c31a60ea92e938f7d8ca18d320530946d0d16eda80c192e509ae4a234f1_3"
          },
          "properties": {}
        },
        {
          "ruleId": "fc9cff88-957e-3e09-b77f-cbd133040ed2",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "`return` should never appear inside a class __init__ function. This will cause a runtime error."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "tinygrad/runtime/ops_hsa.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 69,
                  "startColumn": 74,
                  "endLine": 69,
                  "endColumn": 205,
                  "snippet": {
                    "text": "    self.kernargs_segment_size = init_c_var(ctypes.c_uint32(), lambda x: check(hsa.hsa_executable_symbol_get_info(self.kernel, hsa.HSA_EXECUTABLE_SYMBOL_INFO_KERNEL_KERNARG_SEGMENT_SIZE, ctypes.byref(x)))).value # noqa: E501"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "9bb94e96ce003f5711fe37edaa0265dae67ae47598c464e8878f0360b8ae881a70ec6c31a60ea92e938f7d8ca18d320530946d0d16eda80c192e509ae4a234f1_4"
          },
          "properties": {}
        },
        {
          "ruleId": "a2383e02-4760-30ed-9bd8-dd6c2ffc7faf",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "`return` should never appear inside a class __init__ function. This will cause a runtime error."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "tinygrad/runtime/ops_hsa.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 70,
                  "startColumn": 71,
                  "endLine": 70,
                  "endColumn": 200,
                  "snippet": {
                    "text": "    self.group_segment_size = init_c_var(ctypes.c_uint32(), lambda x: check(hsa.hsa_executable_symbol_get_info(self.kernel, hsa.HSA_EXECUTABLE_SYMBOL_INFO_KERNEL_GROUP_SEGMENT_SIZE, ctypes.byref(x)))).value # noqa: E501"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "9bb94e96ce003f5711fe37edaa0265dae67ae47598c464e8878f0360b8ae881a70ec6c31a60ea92e938f7d8ca18d320530946d0d16eda80c192e509ae4a234f1_5"
          },
          "properties": {}
        },
        {
          "ruleId": "a22d324f-8129-31c9-a2a8-e8b7ebdfc7a2",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "`return` should never appear inside a class __init__ function. This will cause a runtime error."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "tinygrad/runtime/ops_hsa.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 71,
                  "startColumn": 73,
                  "endLine": 71,
                  "endColumn": 204,
                  "snippet": {
                    "text": "    self.private_segment_size = init_c_var(ctypes.c_uint32(), lambda x: check(hsa.hsa_executable_symbol_get_info(self.kernel, hsa.HSA_EXECUTABLE_SYMBOL_INFO_KERNEL_PRIVATE_SEGMENT_SIZE, ctypes.byref(x)))).value # noqa: E501"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "9bb94e96ce003f5711fe37edaa0265dae67ae47598c464e8878f0360b8ae881a70ec6c31a60ea92e938f7d8ca18d320530946d0d16eda80c192e509ae4a234f1_6"
          },
          "properties": {}
        },
        {
          "ruleId": "871328de-dc82-372e-8c81-54944a98ef24",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "`return` should never appear inside a class __init__ function. This will cause a runtime error."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "tinygrad/runtime/ops_hsa.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 227,
                  "startColumn": 66,
                  "endLine": 227,
                  "endColumn": 123,
                  "snippet": {
                    "text": "    self.signal_pool = [init_c_var(hsa.hsa_signal_t(), lambda x: check(hsa.hsa_signal_create(1, 0, None, ctypes.byref(x)))) for _ in range(4096)]"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "1af7d06577393072e47d72565f30d303543d47b269c95085146017ff2297f6840bb01639777c3f6a4007aeb1bd4faa85b76dfc713d76770ccfe98e24919a989a_0"
          },
          "properties": {}
        },
        {
          "ruleId": "7d31b4e3-d5ac-3c9f-b33d-1cd2c19de787",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Found dynamic content used in a system call. This is dangerous if external data can reach this function call because it allows a malicious actor to execute commands. Use the 'subprocess' module instead, which is easier to use without accidentally exposing a command injection vulnerability."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "tinygrad/runtime/ops_metal.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 38,
                  "startColumn": 9,
                  "endLine": 38,
                  "endColumn": 130,
                  "snippet": {
                    "text": "        os.system(f\"cd {pathlib.Path(__file__).parents[2]}/disassemblers/applegpu && python3 compiler_explorer.py {shader.name}\")"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "76bed37581ede14740617f830fe1b9259962bea638dd4028c838a54f26f9ab06598cc49be68a1acbf62ea77f6867a4d8e18bdc7a52dabb95ca6d3d424c646f6b_0"
          },
          "properties": {}
        },
        {
          "ruleId": "347fd815-a97d-395f-8148-9760a7522f2e",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Detected MD5 hash algorithm which is considered insecure. MD5 is not\ncollision resistant and is therefore not suitable as a cryptographic\nsignature. Use SHA256 or SHA3 instead.\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "tinygrad/runtime/ops_nv.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 162,
                  "startColumn": 65,
                  "endLine": 162,
                  "endColumn": 81,
                  "snippet": {
                    "text": "        fn = (pathlib.Path(tempfile.gettempdir()) / f\"tinycuda_{hashlib.md5(lib).hexdigest()}\").as_posix()"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "c9b04df3277bfd37e470d7677125d6322b528687625a6ccd3c633dea607eadc114c7620fe5daf7528c3ffc32394b67119318d8cca99930a2901976672cb6b25f_0"
          },
          "properties": {}
        },
        {
          "ruleId": "989f18d5-b1eb-34d0-87af-1c374707b095",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "tinygrad/runtime/ops_python.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 26,
                  "startColumn": 69,
                  "endLine": 26,
                  "endColumn": 86,
                  "snippet": {
                    "text": "    self.uops: List[Tuple[UOps, Optional[DType], List[int], Any]] = pickle.loads(lib)"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "27fe33df555272059beb49f79882a51d859ceb7fcf0e96f3b655af700ee207315b836dc9abb09397a2a7ea3bd42e8965482c4bc922a52c802a4aea925244655c_0"
          },
          "properties": {}
        },
        {
          "ruleId": "b1379111-86b9-3856-9fa6-ba6d6633c705",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Regex `r'\\.nv\\.constant(\\d+)'` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "tinygrad/runtime/ops_nv.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 179,
                  "startColumn": 19,
                  "endLine": 179,
                  "endColumn": 65,
                  "snippet": {
                    "text": "      if match := re.match(r'\\.nv\\.constant(\\d+)', section_name):"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "962c41bcb4d327cea1c7fd974422cb416697df261046d9700994b173dd4444e0bdedea8082d958e759f678c25a59508647735df8b05d00100816dcf1cc02b0a4_0"
          },
          "properties": {}
        },
        {
          "ruleId": "df39b683-3a43-3d6b-b1bf-08fcce8b8615",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "tinygrad/runtime/ops_python.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 186,
                  "startColumn": 29,
                  "endLine": 186,
                  "endColumn": 47,
                  "snippet": {
                    "text": "    return base64.b64encode(pickle.dumps(lops)).decode()"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "925e83cd176a74540d22e60708252684f1004c42fe27eb482c2b3879d896f4f9c82e66f8f1c10259dd6eb2ca93b02bf21aaf4cdc6b223886656f203a0567b3ac_0"
          },
          "properties": {}
        }
      ],
      "newlineSequences": [
        "\r\n",
        "\n"
      ]
    }
  ]
}